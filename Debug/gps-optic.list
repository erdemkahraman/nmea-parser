
gps-optic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08006e88  08006e88  00016e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800730c  0800730c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007314  08007314  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800731c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001ac  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e98  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a38  00000000  00000000  0002a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000740  00000000  00000000  0002c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a2a  00000000  00000000  0002ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a08f  00000000  00000000  00050432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d43f5  00000000  00000000  0005a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e8b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030e4  00000000  00000000  0012e908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e70 	.word	0x08006e70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08006e70 	.word	0x08006e70

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9aa 	b.w	8000f48 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d106      	bne.n	8000f6e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3371      	adds	r3, #113	; 0x71
 8000f64:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000f66:	e002      	b.n	8000f6e <prv_parse_number+0x22>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <prv_parse_number+0x30>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d0f5      	beq.n	8000f68 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b2d      	cmp	r3, #45	; 0x2d
 8000f82:	d104      	bne.n	8000f8e <prv_parse_number+0x42>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <prv_parse_number+0x44>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000f92:	e00d      	b.n	8000fb0 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	3b30      	subs	r3, #48	; 0x30
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <prv_parse_number+0x7a>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b2f      	cmp	r3, #47	; 0x2f
 8000fbc:	d903      	bls.n	8000fc6 <prv_parse_number+0x7a>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b39      	cmp	r3, #57	; 0x39
 8000fc4:	d9e6      	bls.n	8000f94 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <prv_parse_number+0x86>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	425b      	negs	r3, r3
 8000fd0:	e000      	b.n	8000fd4 <prv_parse_number+0x88>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d106      	bne.n	8000ffe <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3371      	adds	r3, #113	; 0x71
 8000ff4:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000ff6:	e002      	b.n	8000ffe <prv_parse_float_number+0x1e>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <prv_parse_float_number+0x2c>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b20      	cmp	r3, #32
 800100a:	d0f5      	beq.n	8000ff8 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 800100c:	2100      	movs	r1, #0
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f003 feb8 	bl	8004d84 <strtod>
 8001014:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8001018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800101c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001020:	eeb0 0a47 	vmov.f32	s0, s14
 8001024:	eef0 0a67 	vmov.f32	s1, s15
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001038:	2100      	movs	r1, #0
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffd0 	bl	8000fe0 <prv_parse_float_number>
 8001040:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001044:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001048:	f7ff fd80 	bl	8000b4c <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <prv_parse_lat_long+0x94>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1152      	asrs	r2, r2, #5
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa72 	bl	8000544 <__aeabi_i2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <prv_parse_lat_long+0x98>)
 800106e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001072:	f7ff fad1 	bl	8000618 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800107e:	f7ff f913 	bl	80002a8 <__aeabi_dsub>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <prv_parse_lat_long+0x9c>)
 8001090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001094:	f7ff fbea 	bl	800086c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a0:	f7ff f904 	bl	80002ac <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80010ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b4:	eeb0 0a47 	vmov.f32	s0, s14
 80010b8:	eef0 0a67 	vmov.f32	s1, s15
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	51eb851f 	.word	0x51eb851f
 80010c8:	40590000 	.word	0x40590000
 80010cc:	404e0000 	.word	0x404e0000

080010d0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d169      	bne.n	80011b8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3371      	adds	r3, #113	; 0x71
 80010e8:	2206      	movs	r2, #6
 80010ea:	49ba      	ldr	r1, [pc, #744]	; (80013d4 <prv_parse_term+0x304>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f811 	bl	8004114 <strncmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <prv_parse_term+0x3c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3371      	adds	r3, #113	; 0x71
 80010fc:	2206      	movs	r2, #6
 80010fe:	49b6      	ldr	r1, [pc, #728]	; (80013d8 <prv_parse_term+0x308>)
 8001100:	4618      	mov	r0, r3
 8001102:	f003 f807 	bl	8004114 <strncmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001114:	e04e      	b.n	80011b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3371      	adds	r3, #113	; 0x71
 800111a:	2206      	movs	r2, #6
 800111c:	49af      	ldr	r1, [pc, #700]	; (80013dc <prv_parse_term+0x30c>)
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fff8 	bl	8004114 <strncmp>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <prv_parse_term+0x6e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3371      	adds	r3, #113	; 0x71
 800112e:	2206      	movs	r2, #6
 8001130:	49ab      	ldr	r1, [pc, #684]	; (80013e0 <prv_parse_term+0x310>)
 8001132:	4618      	mov	r0, r3
 8001134:	f002 ffee 	bl	8004114 <strncmp>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001146:	e035      	b.n	80011b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3371      	adds	r3, #113	; 0x71
 800114c:	2206      	movs	r2, #6
 800114e:	49a5      	ldr	r1, [pc, #660]	; (80013e4 <prv_parse_term+0x314>)
 8001150:	4618      	mov	r0, r3
 8001152:	f002 ffdf 	bl	8004114 <strncmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <prv_parse_term+0xa0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3371      	adds	r3, #113	; 0x71
 8001160:	2206      	movs	r2, #6
 8001162:	49a1      	ldr	r1, [pc, #644]	; (80013e8 <prv_parse_term+0x318>)
 8001164:	4618      	mov	r0, r3
 8001166:	f002 ffd5 	bl	8004114 <strncmp>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001178:	e01c      	b.n	80011b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3371      	adds	r3, #113	; 0x71
 800117e:	2206      	movs	r2, #6
 8001180:	499a      	ldr	r1, [pc, #616]	; (80013ec <prv_parse_term+0x31c>)
 8001182:	4618      	mov	r0, r3
 8001184:	f002 ffc6 	bl	8004114 <strncmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <prv_parse_term+0xd2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3371      	adds	r3, #113	; 0x71
 8001192:	2206      	movs	r2, #6
 8001194:	4996      	ldr	r1, [pc, #600]	; (80013f0 <prv_parse_term+0x320>)
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ffbc 	bl	8004114 <strncmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2204      	movs	r2, #4
 80011a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80011aa:	e003      	b.n	80011b4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e233      	b.n	8001620 <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80011be:	2900      	cmp	r1, #0
 80011c0:	f000 822d 	beq.w	800161e <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80011ca:	2901      	cmp	r1, #1
 80011cc:	f040 80c9 	bne.w	8001362 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80011d6:	3b01      	subs	r3, #1
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	f200 8213 	bhi.w	8001604 <prv_parse_term+0x534>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <prv_parse_term+0x114>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	08001211 	.word	0x08001211
 80011e8:	0800128b 	.word	0x0800128b
 80011ec:	080012a1 	.word	0x080012a1
 80011f0:	080012cb 	.word	0x080012cb
 80011f4:	080012e1 	.word	0x080012e1
 80011f8:	0800130b 	.word	0x0800130b
 80011fc:	0800131f 	.word	0x0800131f
 8001200:	08001605 	.word	0x08001605
 8001204:	08001333 	.word	0x08001333
 8001208:	08001605 	.word	0x08001605
 800120c:	0800134b 	.word	0x0800134b
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001216:	3b30      	subs	r3, #48	; 0x30
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800122a:	4413      	add	r3, r2
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b30      	subs	r3, #48	; 0x30
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800123e:	3b30      	subs	r3, #48	; 0x30
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001252:	4413      	add	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3b30      	subs	r3, #48	; 0x30
 8001258:	b2da      	uxtb	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001266:	3b30      	subs	r3, #48	; 0x30
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800127a:	4413      	add	r3, r2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3b30      	subs	r3, #48	; 0x30
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001288:	e1c9      	b.n	800161e <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fed0 	bl	8001030 <prv_parse_lat_long>
 8001290:	eeb0 7a40 	vmov.f32	s14, s0
 8001294:	eef0 7a60 	vmov.f32	s15, s1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800129e:	e1be      	b.n	800161e <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012a6:	2b53      	cmp	r3, #83	; 0x53
 80012a8:	d005      	beq.n	80012b6 <prv_parse_term+0x1e6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012b0:	2b73      	cmp	r3, #115	; 0x73
 80012b2:	f040 81a9 	bne.w	8001608 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80012bc:	4690      	mov	r8, r2
 80012be:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80012c8:	e19e      	b.n	8001608 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff feb0 	bl	8001030 <prv_parse_lat_long>
 80012d0:	eeb0 7a40 	vmov.f32	s14, s0
 80012d4:	eef0 7a60 	vmov.f32	s15, s1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80012de:	e19e      	b.n	800161e <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012e6:	2b57      	cmp	r3, #87	; 0x57
 80012e8:	d005      	beq.n	80012f6 <prv_parse_term+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012f0:	2b77      	cmp	r3, #119	; 0x77
 80012f2:	f040 818b 	bne.w	800160c <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80012fc:	4614      	mov	r4, r2
 80012fe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001308:	e180      	b.n	800160c <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fe1d 	bl	8000f4c <prv_parse_number>
 8001312:	4603      	mov	r3, r0
 8001314:	b2da      	uxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 800131c:	e17f      	b.n	800161e <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fe13 	bl	8000f4c <prv_parse_number>
 8001326:	4603      	mov	r3, r0
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001330:	e175      	b.n	800161e <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001332:	2100      	movs	r1, #0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fe53 	bl	8000fe0 <prv_parse_float_number>
 800133a:	eeb0 7a40 	vmov.f32	s14, s0
 800133e:	eef0 7a60 	vmov.f32	s15, s1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001348:	e169      	b.n	800161e <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800134a:	2100      	movs	r1, #0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fe47 	bl	8000fe0 <prv_parse_float_number>
 8001352:	eeb0 7a40 	vmov.f32	s14, s0
 8001356:	eef0 7a60 	vmov.f32	s15, s1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001360:	e15d      	b.n	800161e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001368:	2902      	cmp	r1, #2
 800136a:	f040 8083 	bne.w	8001474 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001374:	3b02      	subs	r3, #2
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d860      	bhi.n	800143c <prv_parse_term+0x36c>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <prv_parse_term+0x2b0>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	080013c1 	.word	0x080013c1
 8001384:	0800143d 	.word	0x0800143d
 8001388:	0800143d 	.word	0x0800143d
 800138c:	0800143d 	.word	0x0800143d
 8001390:	0800143d 	.word	0x0800143d
 8001394:	0800143d 	.word	0x0800143d
 8001398:	0800143d 	.word	0x0800143d
 800139c:	0800143d 	.word	0x0800143d
 80013a0:	0800143d 	.word	0x0800143d
 80013a4:	0800143d 	.word	0x0800143d
 80013a8:	0800143d 	.word	0x0800143d
 80013ac:	0800143d 	.word	0x0800143d
 80013b0:	0800143d 	.word	0x0800143d
 80013b4:	080013f5 	.word	0x080013f5
 80013b8:	0800140d 	.word	0x0800140d
 80013bc:	08001425 	.word	0x08001425
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80013c0:	2100      	movs	r1, #0
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fdc2 	bl	8000f4c <prv_parse_number>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80013d2:	e124      	b.n	800161e <prv_parse_term+0x54e>
 80013d4:	08006e88 	.word	0x08006e88
 80013d8:	08006e90 	.word	0x08006e90
 80013dc:	08006e98 	.word	0x08006e98
 80013e0:	08006ea0 	.word	0x08006ea0
 80013e4:	08006ea8 	.word	0x08006ea8
 80013e8:	08006eb0 	.word	0x08006eb0
 80013ec:	08006eb8 	.word	0x08006eb8
 80013f0:	08006ec0 	.word	0x08006ec0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80013f4:	2100      	movs	r1, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fdf2 	bl	8000fe0 <prv_parse_float_number>
 80013fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001400:	eef0 7a60 	vmov.f32	s15, s1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800140a:	e108      	b.n	800161e <prv_parse_term+0x54e>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 800140c:	2100      	movs	r1, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fde6 	bl	8000fe0 <prv_parse_float_number>
 8001414:	eeb0 7a40 	vmov.f32	s14, s0
 8001418:	eef0 7a60 	vmov.f32	s15, s1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001422:	e0fc      	b.n	800161e <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001424:	2100      	movs	r1, #0
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fdda 	bl	8000fe0 <prv_parse_float_number>
 800142c:	eeb0 7a40 	vmov.f32	s14, s0
 8001430:	eef0 7a60 	vmov.f32	s15, s1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800143a:	e0f0      	b.n	800161e <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001442:	2b02      	cmp	r3, #2
 8001444:	f240 80e4 	bls.w	8001610 <prv_parse_term+0x540>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800144e:	2b0e      	cmp	r3, #14
 8001450:	f200 80de 	bhi.w	8001610 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001454:	2100      	movs	r1, #0
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fd78 	bl	8000f4c <prv_parse_number>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001464:	3b03      	subs	r3, #3
 8001466:	b2d1      	uxtb	r1, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	460a      	mov	r2, r1
 800146e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001472:	e0cd      	b.n	8001610 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800147a:	2903      	cmp	r1, #3
 800147c:	d11b      	bne.n	80014b6 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001484:	2b02      	cmp	r3, #2
 8001486:	d002      	beq.n	800148e <prv_parse_term+0x3be>
 8001488:	2b03      	cmp	r3, #3
 800148a:	d00a      	beq.n	80014a2 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800148c:	e0c7      	b.n	800161e <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd5b 	bl	8000f4c <prv_parse_number>
 8001496:	4603      	mov	r3, r0
 8001498:	b2da      	uxtb	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80014a0:	e0bd      	b.n	800161e <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80014a2:	2100      	movs	r1, #0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fd51 	bl	8000f4c <prv_parse_number>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80014b4:	e0b3      	b.n	800161e <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80014bc:	2904      	cmp	r1, #4
 80014be:	f040 80a9 	bne.w	8001614 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80014c8:	3902      	subs	r1, #2
 80014ca:	2909      	cmp	r1, #9
 80014cc:	f200 80a4 	bhi.w	8001618 <prv_parse_term+0x548>
 80014d0:	a001      	add	r0, pc, #4	; (adr r0, 80014d8 <prv_parse_term+0x408>)
 80014d2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	08001501 	.word	0x08001501
 80014dc:	08001619 	.word	0x08001619
 80014e0:	08001619 	.word	0x08001619
 80014e4:	08001619 	.word	0x08001619
 80014e8:	08001619 	.word	0x08001619
 80014ec:	0800151b 	.word	0x0800151b
 80014f0:	08001533 	.word	0x08001533
 80014f4:	0800154b 	.word	0x0800154b
 80014f8:	080015c5 	.word	0x080015c5
 80014fc:	080015dd 	.word	0x080015dd
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001506:	2b41      	cmp	r3, #65	; 0x41
 8001508:	bf0c      	ite	eq
 800150a:	2301      	moveq	r3, #1
 800150c:	2300      	movne	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001518:	e081      	b.n	800161e <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fd5f 	bl	8000fe0 <prv_parse_float_number>
 8001522:	eeb0 7a40 	vmov.f32	s14, s0
 8001526:	eef0 7a60 	vmov.f32	s15, s1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001530:	e075      	b.n	800161e <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001532:	2100      	movs	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fd53 	bl	8000fe0 <prv_parse_float_number>
 800153a:	eeb0 7a40 	vmov.f32	s14, s0
 800153e:	eef0 7a60 	vmov.f32	s15, s1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001548:	e069      	b.n	800161e <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001550:	3b30      	subs	r3, #48	; 0x30
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001564:	4413      	add	r3, r2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b30      	subs	r3, #48	; 0x30
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001578:	3b30      	subs	r3, #48	; 0x30
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800158c:	4413      	add	r3, r2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3b30      	subs	r3, #48	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80015a0:	3b30      	subs	r3, #48	; 0x30
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80015b4:	4413      	add	r3, r2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3b30      	subs	r3, #48	; 0x30
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80015c2:	e02c      	b.n	800161e <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fd0a 	bl	8000fe0 <prv_parse_float_number>
 80015cc:	eeb0 7a40 	vmov.f32	s14, s0
 80015d0:	eef0 7a60 	vmov.f32	s15, s1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80015da:	e020      	b.n	800161e <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80015e2:	2957      	cmp	r1, #87	; 0x57
 80015e4:	d004      	beq.n	80015f0 <prv_parse_term+0x520>
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80015ec:	2977      	cmp	r1, #119	; 0x77
 80015ee:	d115      	bne.n	800161c <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80015f6:	4602      	mov	r2, r0
 80015f8:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001602:	e00b      	b.n	800161c <prv_parse_term+0x54c>
                break;
 8001604:	bf00      	nop
 8001606:	e00a      	b.n	800161e <prv_parse_term+0x54e>
                break;
 8001608:	bf00      	nop
 800160a:	e008      	b.n	800161e <prv_parse_term+0x54e>
                break;
 800160c:	bf00      	nop
 800160e:	e006      	b.n	800161e <prv_parse_term+0x54e>
                break;
 8001610:	bf00      	nop
 8001612:	e004      	b.n	800161e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001614:	bf00      	nop
 8001616:	e002      	b.n	800161e <prv_parse_term+0x54e>
                break;
 8001618:	bf00      	nop
 800161a:	e000      	b.n	800161e <prv_parse_term+0x54e>
                break;
 800161c:	bf00      	nop
    return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800162a:	bf00      	nop

0800162c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800163a:	2b2f      	cmp	r3, #47	; 0x2f
 800163c:	d90d      	bls.n	800165a <prv_check_crc+0x2e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001644:	2b39      	cmp	r3, #57	; 0x39
 8001646:	d808      	bhi.n	800165a <prv_check_crc+0x2e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800164e:	3b30      	subs	r3, #48	; 0x30
 8001650:	b2db      	uxtb	r3, r3
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b2db      	uxtb	r3, r3
 8001656:	b25a      	sxtb	r2, r3
 8001658:	e026      	b.n	80016a8 <prv_check_crc+0x7c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001660:	2b60      	cmp	r3, #96	; 0x60
 8001662:	d90d      	bls.n	8001680 <prv_check_crc+0x54>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800166a:	2b7a      	cmp	r3, #122	; 0x7a
 800166c:	d808      	bhi.n	8001680 <prv_check_crc+0x54>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001674:	3b57      	subs	r3, #87	; 0x57
 8001676:	b2db      	uxtb	r3, r3
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	b2db      	uxtb	r3, r3
 800167c:	b25a      	sxtb	r2, r3
 800167e:	e013      	b.n	80016a8 <prv_check_crc+0x7c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001686:	2b40      	cmp	r3, #64	; 0x40
 8001688:	d90d      	bls.n	80016a6 <prv_check_crc+0x7a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001690:	2b5a      	cmp	r3, #90	; 0x5a
 8001692:	d808      	bhi.n	80016a6 <prv_check_crc+0x7a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800169a:	3b37      	subs	r3, #55	; 0x37
 800169c:	b2db      	uxtb	r3, r3
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	e000      	b.n	80016a8 <prv_check_crc+0x7c>
 80016a6:	2200      	movs	r2, #0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016ae:	2b2f      	cmp	r3, #47	; 0x2f
 80016b0:	d90c      	bls.n	80016cc <prv_check_crc+0xa0>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016b8:	2b39      	cmp	r3, #57	; 0x39
 80016ba:	d807      	bhi.n	80016cc <prv_check_crc+0xa0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	e028      	b.n	800171e <prv_check_crc+0xf2>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016d2:	2b60      	cmp	r3, #96	; 0x60
 80016d4:	d90e      	bls.n	80016f4 <prv_check_crc+0xc8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016dc:	2b7a      	cmp	r3, #122	; 0x7a
 80016de:	d809      	bhi.n	80016f4 <prv_check_crc+0xc8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016e6:	3b57      	subs	r3, #87	; 0x57
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	e014      	b.n	800171e <prv_check_crc+0xf2>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d90e      	bls.n	800171c <prv_check_crc+0xf0>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001704:	2b5a      	cmp	r3, #90	; 0x5a
 8001706:	d809      	bhi.n	800171c <prv_check_crc+0xf0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800170e:	3b37      	subs	r3, #55	; 0x37
 8001710:	b2db      	uxtb	r3, r3
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b25b      	sxtb	r3, r3
 800171a:	e000      	b.n	800171e <prv_check_crc+0xf2>
 800171c:	2300      	movs	r3, #0
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	429a      	cmp	r2, r3
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001750:	2b01      	cmp	r3, #1
 8001752:	d136      	bne.n	80017c2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017c0:	e061      	b.n	8001886 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d121      	bne.n	8001810 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	33a1      	adds	r3, #161	; 0xa1
 8001806:	220c      	movs	r2, #12
 8001808:	4619      	mov	r1, r3
 800180a:	f002 fc6d 	bl	80040e8 <memcpy>
 800180e:	e03a      	b.n	8001886 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001816:	2b03      	cmp	r3, #3
 8001818:	d106      	bne.n	8001828 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001826:	e02e      	b.n	8001886 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800182e:	2b04      	cmp	r3, #4
 8001830:	d129      	bne.n	8001886 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001898:	22b0      	movs	r2, #176	; 0xb0
 800189a:	2100      	movs	r1, #0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f002 fc31 	bl	8004104 <memset>
    return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80018bc:	e0ad      	b.n	8001a1a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b24      	cmp	r3, #36	; 0x24
 80018c4:	d128      	bne.n	8001918 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3370      	adds	r3, #112	; 0x70
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fc18 	bl	8004104 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018da:	2b0b      	cmp	r3, #11
 80018dc:	f200 8097 	bhi.w	8001a0e <lwgps_process+0x162>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018e6:	4619      	mov	r1, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001916:	e07a      	b.n	8001a0e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b2c      	cmp	r3, #44	; 0x2c
 800191e:	d11d      	bne.n	800195c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fbd5 	bl	80010d0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4053      	eors	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800195a:	e058      	b.n	8001a0e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b2a      	cmp	r3, #42	; 0x2a
 8001962:	d117      	bne.n	8001994 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fbb3 	bl	80010d0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001988:	3301      	adds	r3, #1
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001992:	e03c      	b.n	8001a0e <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b0d      	cmp	r3, #13
 800199a:	d109      	bne.n	80019b0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fe45 	bl	800162c <prv_check_crc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d032      	beq.n	8001a0e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff feca 	bl	8001742 <prv_copy_from_tmp_memory>
 80019ae:	e02e      	b.n	8001a0e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4053      	eors	r3, r2
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019d4:	2b0b      	cmp	r3, #11
 80019d6:	d81a      	bhi.n	8001a0e <lwgps_process+0x162>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019de:	4619      	mov	r1, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019f2:	3301      	adds	r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f47f af4e 	bne.w	80018be <lwgps_process+0x12>
        }
    }
    return 1;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128];
uint8_t rx_index = 0;
uint8_t rx_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_UART_RxCpltCallback+0x68>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d127      	bne.n	8001a8c <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_UART_RxCpltCallback+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b0a      	cmp	r3, #10
 8001a42:	d010      	beq.n	8001a66 <HAL_UART_RxCpltCallback+0x3a>
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_RxCpltCallback+0x70>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_UART_RxCpltCallback+0x70>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	b2d1      	uxtb	r1, r2
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_UART_RxCpltCallback+0x70>)
 8001a58:	7011      	strb	r1, [r2, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_UART_RxCpltCallback+0x6c>)
 8001a5e:	7819      	ldrb	r1, [r3, #0]
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_UART_RxCpltCallback+0x74>)
 8001a62:	5499      	strb	r1, [r3, r2]
 8001a64:	e00d      	b.n	8001a82 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_UART_RxCpltCallback+0x70>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <HAL_UART_RxCpltCallback+0x74>)
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_UART_RxCpltCallback+0x78>)
 8001a72:	f7ff ff1b 	bl	80018ac <lwgps_process>
			rx_index = 0;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_UART_RxCpltCallback+0x70>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_UART_RxCpltCallback+0x6c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001a82:	2201      	movs	r2, #1
 8001a84:	4904      	ldr	r1, [pc, #16]	; (8001a98 <HAL_UART_RxCpltCallback+0x6c>)
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <HAL_UART_RxCpltCallback+0x68>)
 8001a88:	f001 fbd9 	bl	800323e <HAL_UART_Receive_IT>
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200001fc 	.word	0x200001fc
 8001a98:	20000371 	.word	0x20000371
 8001a9c:	20000370 	.word	0x20000370
 8001aa0:	200002f0 	.word	0x200002f0
 8001aa4:	20000240 	.word	0x20000240

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aac:	f000 fb06 	bl	80020bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab0:	f000 f814 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab4:	f000 f89e 	bl	8001bf4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 f872 	bl	8001ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <main+0x28>)
 8001abe:	f7ff fee7 	bl	8001890 <lwgps_init>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4903      	ldr	r1, [pc, #12]	; (8001ad4 <main+0x2c>)
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <main+0x30>)
 8001ac8:	f001 fbb9 	bl	800323e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <main+0x24>
 8001ace:	bf00      	nop
 8001ad0:	20000240 	.word	0x20000240
 8001ad4:	20000371 	.word	0x20000371
 8001ad8:	200001fc 	.word	0x200001fc

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fb0a 	bl	8004104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <SystemClock_Config+0xbc>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <SystemClock_Config+0xbc>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <SystemClock_Config+0xbc>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <SystemClock_Config+0xc0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <SystemClock_Config+0xc0>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <SystemClock_Config+0xc0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b44:	2310      	movs	r3, #16
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4c:	f107 0320 	add.w	r3, r7, #32
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fe8f 	bl	8002874 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b5c:	f000 f8fa 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 f8f0 	bl	8002d64 <HAL_RCC_ClockConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b8a:	f000 f8e3 	bl	8001d54 <Error_Handler>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3750      	adds	r7, #80	; 0x50
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_USART1_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bd8:	f001 fae4 	bl	80031a4 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f000 f8b7 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200001fc 	.word	0x200001fc
 8001bf0:	40011000 	.word	0x40011000

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a44      	ldr	r2, [pc, #272]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a3d      	ldr	r2, [pc, #244]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_GPIO_Init+0x14c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c9c:	4829      	ldr	r0, [pc, #164]	; (8001d44 <MX_GPIO_Init+0x150>)
 8001c9e:	f000 fdcf 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2140      	movs	r1, #64	; 0x40
 8001ca6:	4828      	ldr	r0, [pc, #160]	; (8001d48 <MX_GPIO_Init+0x154>)
 8001ca8:	f000 fdca 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4822      	ldr	r0, [pc, #136]	; (8001d4c <MX_GPIO_Init+0x158>)
 8001cc4:	f000 fc10 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11;
 8001cc8:	f640 0302 	movw	r3, #2050	; 0x802
 8001ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481c      	ldr	r0, [pc, #112]	; (8001d50 <MX_GPIO_Init+0x15c>)
 8001ce0:	f000 fc02 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ce4:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4811      	ldr	r0, [pc, #68]	; (8001d44 <MX_GPIO_Init+0x150>)
 8001cfe:	f000 fbf3 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <MX_GPIO_Init+0x154>)
 8001d1a:	f000 fbe5 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_GPIO_Init+0x154>)
 8001d32:	f000 fbd9 	bl	80024e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020000 	.word	0x40020000

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <Error_Handler+0x8>
	...

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_MspInit+0x4c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_MspInit+0x4c>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x4c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_UART_MspInit+0x94>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d134      	bne.n	8001e3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_UART_MspInit+0x98>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_UART_MspInit+0x98>)
 8001ddc:	f043 0310 	orr.w	r3, r3, #16
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_UART_MspInit+0x98>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_UART_MspInit+0x98>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <HAL_UART_MspInit+0x98>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_UART_MspInit+0x98>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <HAL_UART_MspInit+0x9c>)
 8001e28:	f000 fb5e 	bl	80024e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2025      	movs	r0, #37	; 0x25
 8001e32:	f000 fa90 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e36:	2025      	movs	r0, #37	; 0x25
 8001e38:	f000 faa9 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9c:	f000 f960 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <USART1_IRQHandler+0x10>)
 8001eaa:	f001 f9f9 	bl	80032a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200001fc 	.word	0x200001fc

08001eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_kill>:

int _kill(int pid, int sig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ed2:	f002 f8df 	bl	8004094 <__errno>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2216      	movs	r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
  return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_exit>:

void _exit (int status)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffe7 	bl	8001ec8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001efa:	e7fe      	b.n	8001efa <_exit+0x12>

08001efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
  }

  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e009      	b.n	8001f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf1      	blt.n	8001f48 <_write+0x12>
  }
  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:

int _close(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f96:	605a      	str	r2, [r3, #4]
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f002 f844 	bl	8004094 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20030000 	.word	0x20030000
 8002038:	00000400 	.word	0x00000400
 800203c:	20000374 	.word	0x20000374
 8002040:	20000390 	.word	0x20000390

08002044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800206e:	490e      	ldr	r1, [pc, #56]	; (80020a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002084:	4c0b      	ldr	r4, [pc, #44]	; (80020b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002092:	f7ff ffd7 	bl	8002044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002096:	f002 f803 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7ff fd05 	bl	8001aa8 <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80020ac:	0800731c 	.word	0x0800731c
  ldr r2, =_sbss
 80020b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80020b4:	2000038c 	.word	0x2000038c

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>
	...

080020bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_Init+0x40>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_Init+0x40>)
 80020d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_Init+0x40>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f92b 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f808 	bl	8002100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff fe36 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_InitTick+0x54>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f943 	bl	80023aa <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f000 f90b 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_InitTick+0x5c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000000 	.word	0x20000000
 8002158:	20000008 	.word	0x20000008
 800215c:	20000004 	.word	0x20000004

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000008 	.word	0x20000008
 8002184:	20000378 	.word	0x20000378

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000378 	.word	0x20000378

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff feda 	bl	8002188 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d008      	beq.n	80023f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e052      	b.n	800249a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0216 	bic.w	r2, r2, #22
 8002402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_DMA_Abort+0x62>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002444:	e013      	b.n	800246e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002446:	f7ff fe9f 	bl	8002188 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d90c      	bls.n	800246e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e015      	b.n	800249a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e4      	bne.n	8002446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	223f      	movs	r2, #63	; 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00c      	b.n	80024da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e177      	b.n	80027f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 8166 	bne.w	80027ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80c0 	beq.w	80027ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b66      	ldr	r3, [pc, #408]	; (800280c <HAL_GPIO_Init+0x324>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_GPIO_Init+0x324>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_GPIO_Init+0x324>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a61      	ldr	r2, [pc, #388]	; (8002810 <HAL_GPIO_Init+0x328>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a58      	ldr	r2, [pc, #352]	; (8002814 <HAL_GPIO_Init+0x32c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d037      	beq.n	8002726 <HAL_GPIO_Init+0x23e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_GPIO_Init+0x330>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_GPIO_Init+0x23a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_GPIO_Init+0x334>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02b      	beq.n	800271e <HAL_GPIO_Init+0x236>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_GPIO_Init+0x338>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x232>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a54      	ldr	r2, [pc, #336]	; (8002824 <HAL_GPIO_Init+0x33c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x22e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a53      	ldr	r2, [pc, #332]	; (8002828 <HAL_GPIO_Init+0x340>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x22a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_GPIO_Init+0x344>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x226>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_GPIO_Init+0x348>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x222>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a50      	ldr	r2, [pc, #320]	; (8002834 <HAL_GPIO_Init+0x34c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x21e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	; (8002838 <HAL_GPIO_Init+0x350>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x21a>
 80026fe:	2309      	movs	r3, #9
 8002700:	e012      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002702:	230a      	movs	r3, #10
 8002704:	e010      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002706:	2308      	movs	r3, #8
 8002708:	e00e      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800270a:	2307      	movs	r3, #7
 800270c:	e00c      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800270e:	2306      	movs	r3, #6
 8002710:	e00a      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002712:	2305      	movs	r3, #5
 8002714:	e008      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002716:	2304      	movs	r3, #4
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002726:	2300      	movs	r3, #0
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002738:	4935      	ldr	r1, [pc, #212]	; (8002810 <HAL_GPIO_Init+0x328>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_GPIO_Init+0x354>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276a:	4a34      	ldr	r2, [pc, #208]	; (800283c <HAL_GPIO_Init+0x354>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002770:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_GPIO_Init+0x354>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002794:	4a29      	ldr	r2, [pc, #164]	; (800283c <HAL_GPIO_Init+0x354>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279a:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_GPIO_Init+0x354>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027be:	4a1f      	ldr	r2, [pc, #124]	; (800283c <HAL_GPIO_Init+0x354>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_GPIO_Init+0x354>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <HAL_GPIO_Init+0x354>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f ae84 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40013800 	.word	0x40013800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40021400 	.word	0x40021400
 800282c:	40021800 	.word	0x40021800
 8002830:	40021c00 	.word	0x40021c00
 8002834:	40022000 	.word	0x40022000
 8002838:	40022400 	.word	0x40022400
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fc2c 	bl	8002188 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fc28 	bl	8002188 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fc18 	bl	8002188 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fc14 	bl	8002188 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fbcd 	bl	8002188 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fbc9 	bl	8002188 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fbac 	bl	8002188 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff fba8 	bl	8002188 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fb8c 	bl	8002188 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fb88 	bl	8002188 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fb75 	bl	8002188 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fb71 	bl	8002188 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb31 	bl	8002188 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7ff fb2d 	bl	8002188 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff faf2 	bl	8002188 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff faee 	bl	8002188 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7ff fadc 	bl	8002188 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7ff fad8 	bl	8002188 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff faac 	bl	8002188 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff faa8 	bl	8002188 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fa81 	bl	8002188 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff fa7d 	bl	8002188 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa6a 	bl	8002188 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fa66 	bl	8002188 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7ff f998 	bl	8002188 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7ff f994 	bl	8002188 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f8f8 	bl	8002100 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08006ec8 	.word	0x08006ec8
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b094      	sub	sp, #80	; 0x50
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b79      	ldr	r3, [pc, #484]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80e1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0db      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f68:	e0db      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f6e:	e0d8      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	6139      	str	r1, [r7, #16]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe8:	4659      	mov	r1, fp
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	462b      	mov	r3, r5
 8003010:	eb49 0303 	adc.w	r3, r9, r3
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003022:	4629      	mov	r1, r5
 8003024:	024b      	lsls	r3, r1, #9
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302c:	4621      	mov	r1, r4
 800302e:	024a      	lsls	r2, r1, #9
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
 800303a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800303c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003040:	f7fd fdcc 	bl	8000bdc <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800304c:	e058      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	4611      	mov	r1, r2
 800305a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	0159      	lsls	r1, r3, #5
 8003076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307a:	0150      	lsls	r0, r2, #5
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4641      	mov	r1, r8
 8003082:	ebb2 0a01 	subs.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb63 0b01 	sbc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800309c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a0:	ebb2 040a 	subs.w	r4, r2, sl
 80030a4:	eb63 050b 	sbc.w	r5, r3, fp
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	61fa      	str	r2, [r7, #28]
 80030f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f4:	f7fd fd72 	bl	8000bdc <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003124:	4618      	mov	r0, r3
 8003126:	3750      	adds	r7, #80	; 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	08006ed8 	.word	0x08006ed8

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	08006ed8 	.word	0x08006ed8

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03f      	b.n	8003236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fdf0 	bl	8001db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fcdf 	bl	8003bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b20      	cmp	r3, #32
 8003256:	d11d      	bne.n	8003294 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_UART_Receive_IT+0x26>
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e016      	b.n	8003296 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_UART_Receive_IT+0x38>
 8003272:	2302      	movs	r3, #2
 8003274:	e00f      	b.n	8003296 <HAL_UART_Receive_IT+0x58>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	461a      	mov	r2, r3
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fab6 	bl	80037fc <UART_Start_Receive_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	e000      	b.n	8003296 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b0ba      	sub	sp, #232	; 0xe8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_UART_IRQHandler+0x66>
 80032f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fb99 	bl	8003a36 <UART_Receive_IT>
      return;
 8003304:	e256      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80de 	beq.w	80034cc <HAL_UART_IRQHandler+0x22c>
 8003310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003320:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80d1 	beq.w	80034cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_UART_IRQHandler+0xae>
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HAL_UART_IRQHandler+0xd2>
 800335a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_UART_IRQHandler+0xf6>
 800337e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <HAL_UART_IRQHandler+0x126>
 80033a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0208 	orr.w	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 81ed 	beq.w	80037aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_UART_IRQHandler+0x14e>
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fb24 	bl	8003a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_UART_IRQHandler+0x17a>
 8003412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04f      	beq.n	80034ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fa2c 	bl	8003878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d141      	bne.n	80034b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800345a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800345e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1d9      	bne.n	800342e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	4a7d      	ldr	r2, [pc, #500]	; (800367c <HAL_UART_IRQHandler+0x3dc>)
 8003488:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f807 	bl	80024a2 <HAL_DMA_Abort_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034a4:	4610      	mov	r0, r2
 80034a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e00e      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f990 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00a      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f98c 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e006      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f988 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034c6:	e170      	b.n	80037aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	bf00      	nop
    return;
 80034ca:	e16e      	b.n	80037aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 814a 	bne.w	800376a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8143 	beq.w	800376a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 813c 	beq.w	800376a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	f040 80b4 	bne.w	8003680 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8140 	beq.w	80037ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003536:	429a      	cmp	r2, r3
 8003538:	f080 8139 	bcs.w	80037ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003542:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	f000 8088 	beq.w	8003662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800356c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800357e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800358a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1d9      	bne.n	8003552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e1      	bne.n	800359e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800360c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003644:	65ba      	str	r2, [r7, #88]	; 0x58
 8003646:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800364a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe feb0 	bl	80023c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800366a:	b29b      	uxth	r3, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8b6 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003678:	e099      	b.n	80037ae <HAL_UART_IRQHandler+0x50e>
 800367a:	bf00      	nop
 800367c:	0800393f 	.word	0x0800393f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003688:	b29b      	uxth	r3, r3
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 808b 	beq.w	80037b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800369c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8086 	beq.w	80037b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036ca:	647a      	str	r2, [r7, #68]	; 0x44
 80036cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e3      	bne.n	80036a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	623b      	str	r3, [r7, #32]
   return(result);
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003702:	633a      	str	r2, [r7, #48]	; 0x30
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e3      	bne.n	80036de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	60fb      	str	r3, [r7, #12]
   return(result);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0310 	bic.w	r3, r3, #16
 800373a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003748:	61fa      	str	r2, [r7, #28]
 800374a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	617b      	str	r3, [r7, #20]
   return(result);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e3      	bne.n	8003724 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800375c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f83e 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003768:	e023      	b.n	80037b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_UART_IRQHandler+0x4ea>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8ef 	bl	8003966 <UART_Transmit_IT>
    return;
 8003788:	e014      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00e      	beq.n	80037b4 <HAL_UART_IRQHandler+0x514>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f92f 	bl	8003a06 <UART_EndTransmit_IT>
    return;
 80037a8:	e004      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
    return;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
      return;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
      return;
 80037b2:	bf00      	nop
  }
}
 80037b4:	37e8      	adds	r7, #232	; 0xe8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	; 0x22
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b095      	sub	sp, #84	; 0x54
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a0:	643a      	str	r2, [r7, #64]	; 0x40
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e5      	bne.n	8003880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d119      	bne.n	8003924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003910:	61ba      	str	r2, [r7, #24]
 8003912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003932:	bf00      	nop
 8003934:	3754      	adds	r7, #84	; 0x54
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ff39 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b21      	cmp	r3, #33	; 0x21
 8003978:	d13e      	bne.n	80039f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d114      	bne.n	80039ae <UART_Transmit_IT+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d110      	bne.n	80039ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	e008      	b.n	80039c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	1c59      	adds	r1, r3, #1
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6211      	str	r1, [r2, #32]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4619      	mov	r1, r3
 80039ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fec8 	bl	80037bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b08c      	sub	sp, #48	; 0x30
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b22      	cmp	r3, #34	; 0x22
 8003a48:	f040 80ab 	bne.w	8003ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d117      	bne.n	8003a86 <UART_Receive_IT+0x50>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e026      	b.n	8003ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d007      	beq.n	8003aaa <UART_Receive_IT+0x74>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <UART_Receive_IT+0x82>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e008      	b.n	8003aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d15a      	bne.n	8003b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0220 	bic.w	r2, r2, #32
 8003af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d135      	bne.n	8003b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f023 0310 	bic.w	r3, r3, #16
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	623a      	str	r2, [r7, #32]
 8003b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	69f9      	ldr	r1, [r7, #28]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d10a      	bne.n	8003b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fe29 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
 8003b92:	e002      	b.n	8003b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fd ff49 	bl	8001a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e002      	b.n	8003ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3730      	adds	r7, #48	; 0x30
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b0c0      	sub	sp, #256	; 0x100
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	ea40 0301 	orr.w	r3, r0, r1
 8003bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c04:	f021 010c 	bic.w	r1, r1, #12
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c12:	430b      	orrs	r3, r1
 8003c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	6999      	ldr	r1, [r3, #24]
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	ea40 0301 	orr.w	r3, r0, r1
 8003c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d005      	beq.n	8003c4c <UART_SetConfig+0xa0>
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <UART_SetConfig+0x2d0>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d104      	bne.n	8003c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7ff fa96 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8003c50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c54:	e003      	b.n	8003c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c56:	f7ff fa7d 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	f040 810c 	bne.w	8003e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	1891      	adds	r1, r2, r2
 8003c84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c86:	415b      	adcs	r3, r3
 8003c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8e:	4621      	mov	r1, r4
 8003c90:	eb12 0801 	adds.w	r8, r2, r1
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb43 0901 	adc.w	r9, r3, r1
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cae:	4690      	mov	r8, r2
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	eb18 0303 	adds.w	r3, r8, r3
 8003cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	eb49 0303 	adc.w	r3, r9, r3
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cda:	460b      	mov	r3, r1
 8003cdc:	18db      	adds	r3, r3, r3
 8003cde:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	eb42 0303 	adc.w	r3, r2, r3
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cf0:	f7fc ff74 	bl	8000bdc <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011c      	lsls	r4, r3, #4
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d24:	4641      	mov	r1, r8
 8003d26:	eb12 0a01 	adds.w	sl, r2, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d44:	4692      	mov	sl, r2
 8003d46:	469b      	mov	fp, r3
 8003d48:	4643      	mov	r3, r8
 8003d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d52:	464b      	mov	r3, r9
 8003d54:	eb4b 0303 	adc.w	r3, fp, r3
 8003d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d70:	460b      	mov	r3, r1
 8003d72:	18db      	adds	r3, r3, r3
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
 8003d76:	4613      	mov	r3, r2
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d86:	f7fc ff29 	bl	8000bdc <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003d92:	fba3 2301 	umull	r2, r3, r3, r1
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	1acb      	subs	r3, r1, r3
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003da8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db4:	441c      	add	r4, r3
 8003db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd8:	4641      	mov	r1, r8
 8003dda:	1851      	adds	r1, r2, r1
 8003ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8003dde:	4649      	mov	r1, r9
 8003de0:	414b      	adcs	r3, r1
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003df0:	4659      	mov	r1, fp
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4651      	mov	r1, sl
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4642      	mov	r2, r8
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	460a      	mov	r2, r1
 8003e10:	eb42 0303 	adc.w	r3, r2, r3
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	18db      	adds	r3, r3, r3
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e32:	4613      	mov	r3, r2
 8003e34:	eb42 0303 	adc.w	r3, r2, r3
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e42:	f7fc fecb 	bl	8000bdc <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	2164      	movs	r1, #100	; 0x64
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	3332      	adds	r3, #50	; 0x32
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	f003 0207 	and.w	r2, r3, #7
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4422      	add	r2, r4
 8003e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e74:	e105      	b.n	8004082 <UART_SetConfig+0x4d6>
 8003e76:	bf00      	nop
 8003e78:	40011000 	.word	0x40011000
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e96:	4642      	mov	r2, r8
 8003e98:	464b      	mov	r3, r9
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	6239      	str	r1, [r7, #32]
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	1854      	adds	r4, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb43 0501 	adc.w	r5, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ecc:	464b      	mov	r3, r9
 8003ece:	eb45 0303 	adc.w	r3, r5, r3
 8003ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	008b      	lsls	r3, r1, #2
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efc:	4621      	mov	r1, r4
 8003efe:	008a      	lsls	r2, r1, #2
 8003f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f04:	f7fc fe6a 	bl	8000bdc <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4b60      	ldr	r3, [pc, #384]	; (8004090 <UART_SetConfig+0x4e4>)
 8003f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	011c      	lsls	r4, r3, #4
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	61b9      	str	r1, [r7, #24]
 8003f30:	415b      	adcs	r3, r3
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6139      	str	r1, [r7, #16]
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f90:	4649      	mov	r1, r9
 8003f92:	008b      	lsls	r3, r1, #2
 8003f94:	4641      	mov	r1, r8
 8003f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	008a      	lsls	r2, r1, #2
 8003f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fa2:	f7fc fe1b 	bl	8000bdc <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <UART_SetConfig+0x4e4>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	3332      	adds	r3, #50	; 0x32
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <UART_SetConfig+0x4e4>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fca:	441c      	add	r4, r3
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd4:	677a      	str	r2, [r7, #116]	; 0x74
 8003fd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fda:	4642      	mov	r2, r8
 8003fdc:	464b      	mov	r3, r9
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fea:	4641      	mov	r1, r8
 8003fec:	1851      	adds	r1, r2, r1
 8003fee:	6039      	str	r1, [r7, #0]
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	414b      	adcs	r3, r1
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004002:	4659      	mov	r1, fp
 8004004:	00cb      	lsls	r3, r1, #3
 8004006:	4651      	mov	r1, sl
 8004008:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800400c:	4651      	mov	r1, sl
 800400e:	00ca      	lsls	r2, r1, #3
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	4603      	mov	r3, r0
 8004016:	4642      	mov	r2, r8
 8004018:	189b      	adds	r3, r3, r2
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
 800401c:	464b      	mov	r3, r9
 800401e:	460a      	mov	r2, r1
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	663b      	str	r3, [r7, #96]	; 0x60
 8004030:	667a      	str	r2, [r7, #100]	; 0x64
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800403e:	4649      	mov	r1, r9
 8004040:	008b      	lsls	r3, r1, #2
 8004042:	4641      	mov	r1, r8
 8004044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004048:	4641      	mov	r1, r8
 800404a:	008a      	lsls	r2, r1, #2
 800404c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004050:	f7fc fdc4 	bl	8000bdc <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <UART_SetConfig+0x4e4>)
 800405a:	fba3 1302 	umull	r1, r3, r3, r2
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2164      	movs	r1, #100	; 0x64
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	3332      	adds	r3, #50	; 0x32
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <UART_SetConfig+0x4e4>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	f003 020f 	and.w	r2, r3, #15
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4422      	add	r2, r4
 8004080:	609a      	str	r2, [r3, #8]
}
 8004082:	bf00      	nop
 8004084:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	51eb851f 	.word	0x51eb851f

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f002 fedc 	bl	8006e70 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08007314 	.word	0x08007314
 80040dc:	08007314 	.word	0x08007314
 80040e0:	08007314 	.word	0x08007314
 80040e4:	08007318 	.word	0x08007318

080040e8 <memcpy>:
 80040e8:	440a      	add	r2, r1
 80040ea:	4291      	cmp	r1, r2
 80040ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80040f0:	d100      	bne.n	80040f4 <memcpy+0xc>
 80040f2:	4770      	bx	lr
 80040f4:	b510      	push	{r4, lr}
 80040f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040fe:	4291      	cmp	r1, r2
 8004100:	d1f9      	bne.n	80040f6 <memcpy+0xe>
 8004102:	bd10      	pop	{r4, pc}

08004104 <memset>:
 8004104:	4402      	add	r2, r0
 8004106:	4603      	mov	r3, r0
 8004108:	4293      	cmp	r3, r2
 800410a:	d100      	bne.n	800410e <memset+0xa>
 800410c:	4770      	bx	lr
 800410e:	f803 1b01 	strb.w	r1, [r3], #1
 8004112:	e7f9      	b.n	8004108 <memset+0x4>

08004114 <strncmp>:
 8004114:	b510      	push	{r4, lr}
 8004116:	b17a      	cbz	r2, 8004138 <strncmp+0x24>
 8004118:	4603      	mov	r3, r0
 800411a:	3901      	subs	r1, #1
 800411c:	1884      	adds	r4, r0, r2
 800411e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004122:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004126:	4290      	cmp	r0, r2
 8004128:	d101      	bne.n	800412e <strncmp+0x1a>
 800412a:	42a3      	cmp	r3, r4
 800412c:	d101      	bne.n	8004132 <strncmp+0x1e>
 800412e:	1a80      	subs	r0, r0, r2
 8004130:	bd10      	pop	{r4, pc}
 8004132:	2800      	cmp	r0, #0
 8004134:	d1f3      	bne.n	800411e <strncmp+0xa>
 8004136:	e7fa      	b.n	800412e <strncmp+0x1a>
 8004138:	4610      	mov	r0, r2
 800413a:	e7f9      	b.n	8004130 <strncmp+0x1c>

0800413c <sulp>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	460d      	mov	r5, r1
 8004142:	ec45 4b10 	vmov	d0, r4, r5
 8004146:	4616      	mov	r6, r2
 8004148:	f001 fd1c 	bl	8005b84 <__ulp>
 800414c:	ec51 0b10 	vmov	r0, r1, d0
 8004150:	b17e      	cbz	r6, 8004172 <sulp+0x36>
 8004152:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004156:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800415a:	2b00      	cmp	r3, #0
 800415c:	dd09      	ble.n	8004172 <sulp+0x36>
 800415e:	051b      	lsls	r3, r3, #20
 8004160:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004164:	2400      	movs	r4, #0
 8004166:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800416a:	4622      	mov	r2, r4
 800416c:	462b      	mov	r3, r5
 800416e:	f7fc fa53 	bl	8000618 <__aeabi_dmul>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	0000      	movs	r0, r0
	...

08004178 <_strtod_l>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	ed2d 8b02 	vpush	{d8}
 8004180:	b09d      	sub	sp, #116	; 0x74
 8004182:	461f      	mov	r7, r3
 8004184:	2300      	movs	r3, #0
 8004186:	9318      	str	r3, [sp, #96]	; 0x60
 8004188:	4ba2      	ldr	r3, [pc, #648]	; (8004414 <_strtod_l+0x29c>)
 800418a:	9213      	str	r2, [sp, #76]	; 0x4c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4604      	mov	r4, r0
 8004192:	4618      	mov	r0, r3
 8004194:	4688      	mov	r8, r1
 8004196:	f7fc f82b 	bl	80001f0 <strlen>
 800419a:	f04f 0a00 	mov.w	sl, #0
 800419e:	4605      	mov	r5, r0
 80041a0:	f04f 0b00 	mov.w	fp, #0
 80041a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80041a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	2a2b      	cmp	r2, #43	; 0x2b
 80041ae:	d04e      	beq.n	800424e <_strtod_l+0xd6>
 80041b0:	d83b      	bhi.n	800422a <_strtod_l+0xb2>
 80041b2:	2a0d      	cmp	r2, #13
 80041b4:	d834      	bhi.n	8004220 <_strtod_l+0xa8>
 80041b6:	2a08      	cmp	r2, #8
 80041b8:	d834      	bhi.n	8004224 <_strtod_l+0xac>
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	d03e      	beq.n	800423c <_strtod_l+0xc4>
 80041be:	2300      	movs	r3, #0
 80041c0:	930a      	str	r3, [sp, #40]	; 0x28
 80041c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80041c4:	7833      	ldrb	r3, [r6, #0]
 80041c6:	2b30      	cmp	r3, #48	; 0x30
 80041c8:	f040 80b0 	bne.w	800432c <_strtod_l+0x1b4>
 80041cc:	7873      	ldrb	r3, [r6, #1]
 80041ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80041d2:	2b58      	cmp	r3, #88	; 0x58
 80041d4:	d168      	bne.n	80042a8 <_strtod_l+0x130>
 80041d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	ab18      	add	r3, sp, #96	; 0x60
 80041dc:	9702      	str	r7, [sp, #8]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4a8d      	ldr	r2, [pc, #564]	; (8004418 <_strtod_l+0x2a0>)
 80041e2:	ab19      	add	r3, sp, #100	; 0x64
 80041e4:	a917      	add	r1, sp, #92	; 0x5c
 80041e6:	4620      	mov	r0, r4
 80041e8:	f000 fe40 	bl	8004e6c <__gethex>
 80041ec:	f010 0707 	ands.w	r7, r0, #7
 80041f0:	4605      	mov	r5, r0
 80041f2:	d005      	beq.n	8004200 <_strtod_l+0x88>
 80041f4:	2f06      	cmp	r7, #6
 80041f6:	d12c      	bne.n	8004252 <_strtod_l+0xda>
 80041f8:	3601      	adds	r6, #1
 80041fa:	2300      	movs	r3, #0
 80041fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80041fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 8590 	bne.w	8004d28 <_strtod_l+0xbb0>
 8004208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800420a:	b1eb      	cbz	r3, 8004248 <_strtod_l+0xd0>
 800420c:	4652      	mov	r2, sl
 800420e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004212:	ec43 2b10 	vmov	d0, r2, r3
 8004216:	b01d      	add	sp, #116	; 0x74
 8004218:	ecbd 8b02 	vpop	{d8}
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	2a20      	cmp	r2, #32
 8004222:	d1cc      	bne.n	80041be <_strtod_l+0x46>
 8004224:	3301      	adds	r3, #1
 8004226:	9317      	str	r3, [sp, #92]	; 0x5c
 8004228:	e7be      	b.n	80041a8 <_strtod_l+0x30>
 800422a:	2a2d      	cmp	r2, #45	; 0x2d
 800422c:	d1c7      	bne.n	80041be <_strtod_l+0x46>
 800422e:	2201      	movs	r2, #1
 8004230:	920a      	str	r2, [sp, #40]	; 0x28
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	9217      	str	r2, [sp, #92]	; 0x5c
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1c2      	bne.n	80041c2 <_strtod_l+0x4a>
 800423c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800423e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 856e 	bne.w	8004d24 <_strtod_l+0xbac>
 8004248:	4652      	mov	r2, sl
 800424a:	465b      	mov	r3, fp
 800424c:	e7e1      	b.n	8004212 <_strtod_l+0x9a>
 800424e:	2200      	movs	r2, #0
 8004250:	e7ee      	b.n	8004230 <_strtod_l+0xb8>
 8004252:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004254:	b13a      	cbz	r2, 8004266 <_strtod_l+0xee>
 8004256:	2135      	movs	r1, #53	; 0x35
 8004258:	a81a      	add	r0, sp, #104	; 0x68
 800425a:	f001 fd9e 	bl	8005d9a <__copybits>
 800425e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004260:	4620      	mov	r0, r4
 8004262:	f001 f95d 	bl	8005520 <_Bfree>
 8004266:	3f01      	subs	r7, #1
 8004268:	2f04      	cmp	r7, #4
 800426a:	d806      	bhi.n	800427a <_strtod_l+0x102>
 800426c:	e8df f007 	tbb	[pc, r7]
 8004270:	1714030a 	.word	0x1714030a
 8004274:	0a          	.byte	0x0a
 8004275:	00          	.byte	0x00
 8004276:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800427a:	0728      	lsls	r0, r5, #28
 800427c:	d5c0      	bpl.n	8004200 <_strtod_l+0x88>
 800427e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004282:	e7bd      	b.n	8004200 <_strtod_l+0x88>
 8004284:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004288:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800428a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800428e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004292:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004296:	e7f0      	b.n	800427a <_strtod_l+0x102>
 8004298:	f8df b180 	ldr.w	fp, [pc, #384]	; 800441c <_strtod_l+0x2a4>
 800429c:	e7ed      	b.n	800427a <_strtod_l+0x102>
 800429e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80042a2:	f04f 3aff 	mov.w	sl, #4294967295
 80042a6:	e7e8      	b.n	800427a <_strtod_l+0x102>
 80042a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80042ae:	785b      	ldrb	r3, [r3, #1]
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d0f9      	beq.n	80042a8 <_strtod_l+0x130>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0a3      	beq.n	8004200 <_strtod_l+0x88>
 80042b8:	2301      	movs	r3, #1
 80042ba:	f04f 0900 	mov.w	r9, #0
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042c2:	9308      	str	r3, [sp, #32]
 80042c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80042c8:	464f      	mov	r7, r9
 80042ca:	220a      	movs	r2, #10
 80042cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80042ce:	7806      	ldrb	r6, [r0, #0]
 80042d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80042d4:	b2d9      	uxtb	r1, r3
 80042d6:	2909      	cmp	r1, #9
 80042d8:	d92a      	bls.n	8004330 <_strtod_l+0x1b8>
 80042da:	9905      	ldr	r1, [sp, #20]
 80042dc:	462a      	mov	r2, r5
 80042de:	f7ff ff19 	bl	8004114 <strncmp>
 80042e2:	b398      	cbz	r0, 800434c <_strtod_l+0x1d4>
 80042e4:	2000      	movs	r0, #0
 80042e6:	4632      	mov	r2, r6
 80042e8:	463d      	mov	r5, r7
 80042ea:	9005      	str	r0, [sp, #20]
 80042ec:	4603      	mov	r3, r0
 80042ee:	2a65      	cmp	r2, #101	; 0x65
 80042f0:	d001      	beq.n	80042f6 <_strtod_l+0x17e>
 80042f2:	2a45      	cmp	r2, #69	; 0x45
 80042f4:	d118      	bne.n	8004328 <_strtod_l+0x1b0>
 80042f6:	b91d      	cbnz	r5, 8004300 <_strtod_l+0x188>
 80042f8:	9a04      	ldr	r2, [sp, #16]
 80042fa:	4302      	orrs	r2, r0
 80042fc:	d09e      	beq.n	800423c <_strtod_l+0xc4>
 80042fe:	2500      	movs	r5, #0
 8004300:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004304:	f108 0201 	add.w	r2, r8, #1
 8004308:	9217      	str	r2, [sp, #92]	; 0x5c
 800430a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800430e:	2a2b      	cmp	r2, #43	; 0x2b
 8004310:	d075      	beq.n	80043fe <_strtod_l+0x286>
 8004312:	2a2d      	cmp	r2, #45	; 0x2d
 8004314:	d07b      	beq.n	800440e <_strtod_l+0x296>
 8004316:	f04f 0c00 	mov.w	ip, #0
 800431a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800431e:	2909      	cmp	r1, #9
 8004320:	f240 8082 	bls.w	8004428 <_strtod_l+0x2b0>
 8004324:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004328:	2600      	movs	r6, #0
 800432a:	e09d      	b.n	8004468 <_strtod_l+0x2f0>
 800432c:	2300      	movs	r3, #0
 800432e:	e7c4      	b.n	80042ba <_strtod_l+0x142>
 8004330:	2f08      	cmp	r7, #8
 8004332:	bfd8      	it	le
 8004334:	9907      	ldrle	r1, [sp, #28]
 8004336:	f100 0001 	add.w	r0, r0, #1
 800433a:	bfda      	itte	le
 800433c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004340:	9307      	strle	r3, [sp, #28]
 8004342:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004346:	3701      	adds	r7, #1
 8004348:	9017      	str	r0, [sp, #92]	; 0x5c
 800434a:	e7bf      	b.n	80042cc <_strtod_l+0x154>
 800434c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800434e:	195a      	adds	r2, r3, r5
 8004350:	9217      	str	r2, [sp, #92]	; 0x5c
 8004352:	5d5a      	ldrb	r2, [r3, r5]
 8004354:	2f00      	cmp	r7, #0
 8004356:	d037      	beq.n	80043c8 <_strtod_l+0x250>
 8004358:	9005      	str	r0, [sp, #20]
 800435a:	463d      	mov	r5, r7
 800435c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004360:	2b09      	cmp	r3, #9
 8004362:	d912      	bls.n	800438a <_strtod_l+0x212>
 8004364:	2301      	movs	r3, #1
 8004366:	e7c2      	b.n	80042ee <_strtod_l+0x176>
 8004368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	9217      	str	r2, [sp, #92]	; 0x5c
 800436e:	785a      	ldrb	r2, [r3, #1]
 8004370:	3001      	adds	r0, #1
 8004372:	2a30      	cmp	r2, #48	; 0x30
 8004374:	d0f8      	beq.n	8004368 <_strtod_l+0x1f0>
 8004376:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800437a:	2b08      	cmp	r3, #8
 800437c:	f200 84d9 	bhi.w	8004d32 <_strtod_l+0xbba>
 8004380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004382:	9005      	str	r0, [sp, #20]
 8004384:	2000      	movs	r0, #0
 8004386:	9308      	str	r3, [sp, #32]
 8004388:	4605      	mov	r5, r0
 800438a:	3a30      	subs	r2, #48	; 0x30
 800438c:	f100 0301 	add.w	r3, r0, #1
 8004390:	d014      	beq.n	80043bc <_strtod_l+0x244>
 8004392:	9905      	ldr	r1, [sp, #20]
 8004394:	4419      	add	r1, r3
 8004396:	9105      	str	r1, [sp, #20]
 8004398:	462b      	mov	r3, r5
 800439a:	eb00 0e05 	add.w	lr, r0, r5
 800439e:	210a      	movs	r1, #10
 80043a0:	4573      	cmp	r3, lr
 80043a2:	d113      	bne.n	80043cc <_strtod_l+0x254>
 80043a4:	182b      	adds	r3, r5, r0
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	f105 0501 	add.w	r5, r5, #1
 80043ac:	4405      	add	r5, r0
 80043ae:	dc1c      	bgt.n	80043ea <_strtod_l+0x272>
 80043b0:	9907      	ldr	r1, [sp, #28]
 80043b2:	230a      	movs	r3, #10
 80043b4:	fb03 2301 	mla	r3, r3, r1, r2
 80043b8:	9307      	str	r3, [sp, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80043be:	1c51      	adds	r1, r2, #1
 80043c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80043c2:	7852      	ldrb	r2, [r2, #1]
 80043c4:	4618      	mov	r0, r3
 80043c6:	e7c9      	b.n	800435c <_strtod_l+0x1e4>
 80043c8:	4638      	mov	r0, r7
 80043ca:	e7d2      	b.n	8004372 <_strtod_l+0x1fa>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	dc04      	bgt.n	80043da <_strtod_l+0x262>
 80043d0:	9e07      	ldr	r6, [sp, #28]
 80043d2:	434e      	muls	r6, r1
 80043d4:	9607      	str	r6, [sp, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	e7e2      	b.n	80043a0 <_strtod_l+0x228>
 80043da:	f103 0c01 	add.w	ip, r3, #1
 80043de:	f1bc 0f10 	cmp.w	ip, #16
 80043e2:	bfd8      	it	le
 80043e4:	fb01 f909 	mulle.w	r9, r1, r9
 80043e8:	e7f5      	b.n	80043d6 <_strtod_l+0x25e>
 80043ea:	2d10      	cmp	r5, #16
 80043ec:	bfdc      	itt	le
 80043ee:	230a      	movle	r3, #10
 80043f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80043f4:	e7e1      	b.n	80043ba <_strtod_l+0x242>
 80043f6:	2300      	movs	r3, #0
 80043f8:	9305      	str	r3, [sp, #20]
 80043fa:	2301      	movs	r3, #1
 80043fc:	e77c      	b.n	80042f8 <_strtod_l+0x180>
 80043fe:	f04f 0c00 	mov.w	ip, #0
 8004402:	f108 0202 	add.w	r2, r8, #2
 8004406:	9217      	str	r2, [sp, #92]	; 0x5c
 8004408:	f898 2002 	ldrb.w	r2, [r8, #2]
 800440c:	e785      	b.n	800431a <_strtod_l+0x1a2>
 800440e:	f04f 0c01 	mov.w	ip, #1
 8004412:	e7f6      	b.n	8004402 <_strtod_l+0x28a>
 8004414:	08006fb8 	.word	0x08006fb8
 8004418:	08006ef0 	.word	0x08006ef0
 800441c:	7ff00000 	.word	0x7ff00000
 8004420:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004422:	1c51      	adds	r1, r2, #1
 8004424:	9117      	str	r1, [sp, #92]	; 0x5c
 8004426:	7852      	ldrb	r2, [r2, #1]
 8004428:	2a30      	cmp	r2, #48	; 0x30
 800442a:	d0f9      	beq.n	8004420 <_strtod_l+0x2a8>
 800442c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004430:	2908      	cmp	r1, #8
 8004432:	f63f af79 	bhi.w	8004328 <_strtod_l+0x1b0>
 8004436:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800443a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800443c:	9206      	str	r2, [sp, #24]
 800443e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004440:	1c51      	adds	r1, r2, #1
 8004442:	9117      	str	r1, [sp, #92]	; 0x5c
 8004444:	7852      	ldrb	r2, [r2, #1]
 8004446:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800444a:	2e09      	cmp	r6, #9
 800444c:	d937      	bls.n	80044be <_strtod_l+0x346>
 800444e:	9e06      	ldr	r6, [sp, #24]
 8004450:	1b89      	subs	r1, r1, r6
 8004452:	2908      	cmp	r1, #8
 8004454:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004458:	dc02      	bgt.n	8004460 <_strtod_l+0x2e8>
 800445a:	4576      	cmp	r6, lr
 800445c:	bfa8      	it	ge
 800445e:	4676      	movge	r6, lr
 8004460:	f1bc 0f00 	cmp.w	ip, #0
 8004464:	d000      	beq.n	8004468 <_strtod_l+0x2f0>
 8004466:	4276      	negs	r6, r6
 8004468:	2d00      	cmp	r5, #0
 800446a:	d14d      	bne.n	8004508 <_strtod_l+0x390>
 800446c:	9904      	ldr	r1, [sp, #16]
 800446e:	4301      	orrs	r1, r0
 8004470:	f47f aec6 	bne.w	8004200 <_strtod_l+0x88>
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f aee1 	bne.w	800423c <_strtod_l+0xc4>
 800447a:	2a69      	cmp	r2, #105	; 0x69
 800447c:	d027      	beq.n	80044ce <_strtod_l+0x356>
 800447e:	dc24      	bgt.n	80044ca <_strtod_l+0x352>
 8004480:	2a49      	cmp	r2, #73	; 0x49
 8004482:	d024      	beq.n	80044ce <_strtod_l+0x356>
 8004484:	2a4e      	cmp	r2, #78	; 0x4e
 8004486:	f47f aed9 	bne.w	800423c <_strtod_l+0xc4>
 800448a:	499f      	ldr	r1, [pc, #636]	; (8004708 <_strtod_l+0x590>)
 800448c:	a817      	add	r0, sp, #92	; 0x5c
 800448e:	f000 ff45 	bl	800531c <__match>
 8004492:	2800      	cmp	r0, #0
 8004494:	f43f aed2 	beq.w	800423c <_strtod_l+0xc4>
 8004498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b28      	cmp	r3, #40	; 0x28
 800449e:	d12d      	bne.n	80044fc <_strtod_l+0x384>
 80044a0:	499a      	ldr	r1, [pc, #616]	; (800470c <_strtod_l+0x594>)
 80044a2:	aa1a      	add	r2, sp, #104	; 0x68
 80044a4:	a817      	add	r0, sp, #92	; 0x5c
 80044a6:	f000 ff4d 	bl	8005344 <__hexnan>
 80044aa:	2805      	cmp	r0, #5
 80044ac:	d126      	bne.n	80044fc <_strtod_l+0x384>
 80044ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80044b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80044b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80044bc:	e6a0      	b.n	8004200 <_strtod_l+0x88>
 80044be:	210a      	movs	r1, #10
 80044c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80044c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80044c8:	e7b9      	b.n	800443e <_strtod_l+0x2c6>
 80044ca:	2a6e      	cmp	r2, #110	; 0x6e
 80044cc:	e7db      	b.n	8004486 <_strtod_l+0x30e>
 80044ce:	4990      	ldr	r1, [pc, #576]	; (8004710 <_strtod_l+0x598>)
 80044d0:	a817      	add	r0, sp, #92	; 0x5c
 80044d2:	f000 ff23 	bl	800531c <__match>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f43f aeb0 	beq.w	800423c <_strtod_l+0xc4>
 80044dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044de:	498d      	ldr	r1, [pc, #564]	; (8004714 <_strtod_l+0x59c>)
 80044e0:	3b01      	subs	r3, #1
 80044e2:	a817      	add	r0, sp, #92	; 0x5c
 80044e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80044e6:	f000 ff19 	bl	800531c <__match>
 80044ea:	b910      	cbnz	r0, 80044f2 <_strtod_l+0x37a>
 80044ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044ee:	3301      	adds	r3, #1
 80044f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80044f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004724 <_strtod_l+0x5ac>
 80044f6:	f04f 0a00 	mov.w	sl, #0
 80044fa:	e681      	b.n	8004200 <_strtod_l+0x88>
 80044fc:	4886      	ldr	r0, [pc, #536]	; (8004718 <_strtod_l+0x5a0>)
 80044fe:	f001 fd3b 	bl	8005f78 <nan>
 8004502:	ec5b ab10 	vmov	sl, fp, d0
 8004506:	e67b      	b.n	8004200 <_strtod_l+0x88>
 8004508:	9b05      	ldr	r3, [sp, #20]
 800450a:	9807      	ldr	r0, [sp, #28]
 800450c:	1af3      	subs	r3, r6, r3
 800450e:	2f00      	cmp	r7, #0
 8004510:	bf08      	it	eq
 8004512:	462f      	moveq	r7, r5
 8004514:	2d10      	cmp	r5, #16
 8004516:	9306      	str	r3, [sp, #24]
 8004518:	46a8      	mov	r8, r5
 800451a:	bfa8      	it	ge
 800451c:	f04f 0810 	movge.w	r8, #16
 8004520:	f7fc f800 	bl	8000524 <__aeabi_ui2d>
 8004524:	2d09      	cmp	r5, #9
 8004526:	4682      	mov	sl, r0
 8004528:	468b      	mov	fp, r1
 800452a:	dd13      	ble.n	8004554 <_strtod_l+0x3dc>
 800452c:	4b7b      	ldr	r3, [pc, #492]	; (800471c <_strtod_l+0x5a4>)
 800452e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004532:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004536:	f7fc f86f 	bl	8000618 <__aeabi_dmul>
 800453a:	4682      	mov	sl, r0
 800453c:	4648      	mov	r0, r9
 800453e:	468b      	mov	fp, r1
 8004540:	f7fb fff0 	bl	8000524 <__aeabi_ui2d>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4650      	mov	r0, sl
 800454a:	4659      	mov	r1, fp
 800454c:	f7fb feae 	bl	80002ac <__adddf3>
 8004550:	4682      	mov	sl, r0
 8004552:	468b      	mov	fp, r1
 8004554:	2d0f      	cmp	r5, #15
 8004556:	dc38      	bgt.n	80045ca <_strtod_l+0x452>
 8004558:	9b06      	ldr	r3, [sp, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f43f ae50 	beq.w	8004200 <_strtod_l+0x88>
 8004560:	dd24      	ble.n	80045ac <_strtod_l+0x434>
 8004562:	2b16      	cmp	r3, #22
 8004564:	dc0b      	bgt.n	800457e <_strtod_l+0x406>
 8004566:	496d      	ldr	r1, [pc, #436]	; (800471c <_strtod_l+0x5a4>)
 8004568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800456c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004570:	4652      	mov	r2, sl
 8004572:	465b      	mov	r3, fp
 8004574:	f7fc f850 	bl	8000618 <__aeabi_dmul>
 8004578:	4682      	mov	sl, r0
 800457a:	468b      	mov	fp, r1
 800457c:	e640      	b.n	8004200 <_strtod_l+0x88>
 800457e:	9a06      	ldr	r2, [sp, #24]
 8004580:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004584:	4293      	cmp	r3, r2
 8004586:	db20      	blt.n	80045ca <_strtod_l+0x452>
 8004588:	4c64      	ldr	r4, [pc, #400]	; (800471c <_strtod_l+0x5a4>)
 800458a:	f1c5 050f 	rsb	r5, r5, #15
 800458e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004592:	4652      	mov	r2, sl
 8004594:	465b      	mov	r3, fp
 8004596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800459a:	f7fc f83d 	bl	8000618 <__aeabi_dmul>
 800459e:	9b06      	ldr	r3, [sp, #24]
 80045a0:	1b5d      	subs	r5, r3, r5
 80045a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80045a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80045aa:	e7e3      	b.n	8004574 <_strtod_l+0x3fc>
 80045ac:	9b06      	ldr	r3, [sp, #24]
 80045ae:	3316      	adds	r3, #22
 80045b0:	db0b      	blt.n	80045ca <_strtod_l+0x452>
 80045b2:	9b05      	ldr	r3, [sp, #20]
 80045b4:	1b9e      	subs	r6, r3, r6
 80045b6:	4b59      	ldr	r3, [pc, #356]	; (800471c <_strtod_l+0x5a4>)
 80045b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80045bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045c0:	4650      	mov	r0, sl
 80045c2:	4659      	mov	r1, fp
 80045c4:	f7fc f952 	bl	800086c <__aeabi_ddiv>
 80045c8:	e7d6      	b.n	8004578 <_strtod_l+0x400>
 80045ca:	9b06      	ldr	r3, [sp, #24]
 80045cc:	eba5 0808 	sub.w	r8, r5, r8
 80045d0:	4498      	add	r8, r3
 80045d2:	f1b8 0f00 	cmp.w	r8, #0
 80045d6:	dd74      	ble.n	80046c2 <_strtod_l+0x54a>
 80045d8:	f018 030f 	ands.w	r3, r8, #15
 80045dc:	d00a      	beq.n	80045f4 <_strtod_l+0x47c>
 80045de:	494f      	ldr	r1, [pc, #316]	; (800471c <_strtod_l+0x5a4>)
 80045e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045e4:	4652      	mov	r2, sl
 80045e6:	465b      	mov	r3, fp
 80045e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045ec:	f7fc f814 	bl	8000618 <__aeabi_dmul>
 80045f0:	4682      	mov	sl, r0
 80045f2:	468b      	mov	fp, r1
 80045f4:	f038 080f 	bics.w	r8, r8, #15
 80045f8:	d04f      	beq.n	800469a <_strtod_l+0x522>
 80045fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80045fe:	dd22      	ble.n	8004646 <_strtod_l+0x4ce>
 8004600:	2500      	movs	r5, #0
 8004602:	462e      	mov	r6, r5
 8004604:	9507      	str	r5, [sp, #28]
 8004606:	9505      	str	r5, [sp, #20]
 8004608:	2322      	movs	r3, #34	; 0x22
 800460a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004724 <_strtod_l+0x5ac>
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	f04f 0a00 	mov.w	sl, #0
 8004614:	9b07      	ldr	r3, [sp, #28]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f43f adf2 	beq.w	8004200 <_strtod_l+0x88>
 800461c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800461e:	4620      	mov	r0, r4
 8004620:	f000 ff7e 	bl	8005520 <_Bfree>
 8004624:	9905      	ldr	r1, [sp, #20]
 8004626:	4620      	mov	r0, r4
 8004628:	f000 ff7a 	bl	8005520 <_Bfree>
 800462c:	4631      	mov	r1, r6
 800462e:	4620      	mov	r0, r4
 8004630:	f000 ff76 	bl	8005520 <_Bfree>
 8004634:	9907      	ldr	r1, [sp, #28]
 8004636:	4620      	mov	r0, r4
 8004638:	f000 ff72 	bl	8005520 <_Bfree>
 800463c:	4629      	mov	r1, r5
 800463e:	4620      	mov	r0, r4
 8004640:	f000 ff6e 	bl	8005520 <_Bfree>
 8004644:	e5dc      	b.n	8004200 <_strtod_l+0x88>
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <_strtod_l+0x5a8>)
 8004648:	9304      	str	r3, [sp, #16]
 800464a:	2300      	movs	r3, #0
 800464c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004650:	4650      	mov	r0, sl
 8004652:	4659      	mov	r1, fp
 8004654:	4699      	mov	r9, r3
 8004656:	f1b8 0f01 	cmp.w	r8, #1
 800465a:	dc21      	bgt.n	80046a0 <_strtod_l+0x528>
 800465c:	b10b      	cbz	r3, 8004662 <_strtod_l+0x4ea>
 800465e:	4682      	mov	sl, r0
 8004660:	468b      	mov	fp, r1
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <_strtod_l+0x5a8>)
 8004664:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004668:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800466c:	4652      	mov	r2, sl
 800466e:	465b      	mov	r3, fp
 8004670:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004674:	f7fb ffd0 	bl	8000618 <__aeabi_dmul>
 8004678:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <_strtod_l+0x5ac>)
 800467a:	460a      	mov	r2, r1
 800467c:	400b      	ands	r3, r1
 800467e:	492a      	ldr	r1, [pc, #168]	; (8004728 <_strtod_l+0x5b0>)
 8004680:	428b      	cmp	r3, r1
 8004682:	4682      	mov	sl, r0
 8004684:	d8bc      	bhi.n	8004600 <_strtod_l+0x488>
 8004686:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800468a:	428b      	cmp	r3, r1
 800468c:	bf86      	itte	hi
 800468e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800472c <_strtod_l+0x5b4>
 8004692:	f04f 3aff 	movhi.w	sl, #4294967295
 8004696:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800469a:	2300      	movs	r3, #0
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	e084      	b.n	80047aa <_strtod_l+0x632>
 80046a0:	f018 0f01 	tst.w	r8, #1
 80046a4:	d005      	beq.n	80046b2 <_strtod_l+0x53a>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb ffb4 	bl	8000618 <__aeabi_dmul>
 80046b0:	2301      	movs	r3, #1
 80046b2:	9a04      	ldr	r2, [sp, #16]
 80046b4:	3208      	adds	r2, #8
 80046b6:	f109 0901 	add.w	r9, r9, #1
 80046ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80046be:	9204      	str	r2, [sp, #16]
 80046c0:	e7c9      	b.n	8004656 <_strtod_l+0x4de>
 80046c2:	d0ea      	beq.n	800469a <_strtod_l+0x522>
 80046c4:	f1c8 0800 	rsb	r8, r8, #0
 80046c8:	f018 020f 	ands.w	r2, r8, #15
 80046cc:	d00a      	beq.n	80046e4 <_strtod_l+0x56c>
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <_strtod_l+0x5a4>)
 80046d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046d4:	4650      	mov	r0, sl
 80046d6:	4659      	mov	r1, fp
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f7fc f8c6 	bl	800086c <__aeabi_ddiv>
 80046e0:	4682      	mov	sl, r0
 80046e2:	468b      	mov	fp, r1
 80046e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80046e8:	d0d7      	beq.n	800469a <_strtod_l+0x522>
 80046ea:	f1b8 0f1f 	cmp.w	r8, #31
 80046ee:	dd1f      	ble.n	8004730 <_strtod_l+0x5b8>
 80046f0:	2500      	movs	r5, #0
 80046f2:	462e      	mov	r6, r5
 80046f4:	9507      	str	r5, [sp, #28]
 80046f6:	9505      	str	r5, [sp, #20]
 80046f8:	2322      	movs	r3, #34	; 0x22
 80046fa:	f04f 0a00 	mov.w	sl, #0
 80046fe:	f04f 0b00 	mov.w	fp, #0
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	e786      	b.n	8004614 <_strtod_l+0x49c>
 8004706:	bf00      	nop
 8004708:	08006eed 	.word	0x08006eed
 800470c:	08006f04 	.word	0x08006f04
 8004710:	08006ee4 	.word	0x08006ee4
 8004714:	08006ee7 	.word	0x08006ee7
 8004718:	08007177 	.word	0x08007177
 800471c:	08007068 	.word	0x08007068
 8004720:	08007040 	.word	0x08007040
 8004724:	7ff00000 	.word	0x7ff00000
 8004728:	7ca00000 	.word	0x7ca00000
 800472c:	7fefffff 	.word	0x7fefffff
 8004730:	f018 0310 	ands.w	r3, r8, #16
 8004734:	bf18      	it	ne
 8004736:	236a      	movne	r3, #106	; 0x6a
 8004738:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004ae8 <_strtod_l+0x970>
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	4650      	mov	r0, sl
 8004740:	4659      	mov	r1, fp
 8004742:	2300      	movs	r3, #0
 8004744:	f018 0f01 	tst.w	r8, #1
 8004748:	d004      	beq.n	8004754 <_strtod_l+0x5dc>
 800474a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800474e:	f7fb ff63 	bl	8000618 <__aeabi_dmul>
 8004752:	2301      	movs	r3, #1
 8004754:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004758:	f109 0908 	add.w	r9, r9, #8
 800475c:	d1f2      	bne.n	8004744 <_strtod_l+0x5cc>
 800475e:	b10b      	cbz	r3, 8004764 <_strtod_l+0x5ec>
 8004760:	4682      	mov	sl, r0
 8004762:	468b      	mov	fp, r1
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	b1c3      	cbz	r3, 800479a <_strtod_l+0x622>
 8004768:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800476c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004770:	2b00      	cmp	r3, #0
 8004772:	4659      	mov	r1, fp
 8004774:	dd11      	ble.n	800479a <_strtod_l+0x622>
 8004776:	2b1f      	cmp	r3, #31
 8004778:	f340 8124 	ble.w	80049c4 <_strtod_l+0x84c>
 800477c:	2b34      	cmp	r3, #52	; 0x34
 800477e:	bfde      	ittt	le
 8004780:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004784:	f04f 33ff 	movle.w	r3, #4294967295
 8004788:	fa03 f202 	lslle.w	r2, r3, r2
 800478c:	f04f 0a00 	mov.w	sl, #0
 8004790:	bfcc      	ite	gt
 8004792:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004796:	ea02 0b01 	andle.w	fp, r2, r1
 800479a:	2200      	movs	r2, #0
 800479c:	2300      	movs	r3, #0
 800479e:	4650      	mov	r0, sl
 80047a0:	4659      	mov	r1, fp
 80047a2:	f7fc f9a1 	bl	8000ae8 <__aeabi_dcmpeq>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d1a2      	bne.n	80046f0 <_strtod_l+0x578>
 80047aa:	9b07      	ldr	r3, [sp, #28]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	9908      	ldr	r1, [sp, #32]
 80047b0:	462b      	mov	r3, r5
 80047b2:	463a      	mov	r2, r7
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 ff1b 	bl	80055f0 <__s2b>
 80047ba:	9007      	str	r0, [sp, #28]
 80047bc:	2800      	cmp	r0, #0
 80047be:	f43f af1f 	beq.w	8004600 <_strtod_l+0x488>
 80047c2:	9b05      	ldr	r3, [sp, #20]
 80047c4:	1b9e      	subs	r6, r3, r6
 80047c6:	9b06      	ldr	r3, [sp, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bfb4      	ite	lt
 80047cc:	4633      	movlt	r3, r6
 80047ce:	2300      	movge	r3, #0
 80047d0:	930c      	str	r3, [sp, #48]	; 0x30
 80047d2:	9b06      	ldr	r3, [sp, #24]
 80047d4:	2500      	movs	r5, #0
 80047d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80047da:	9312      	str	r3, [sp, #72]	; 0x48
 80047dc:	462e      	mov	r6, r5
 80047de:	9b07      	ldr	r3, [sp, #28]
 80047e0:	4620      	mov	r0, r4
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	f000 fe5c 	bl	80054a0 <_Balloc>
 80047e8:	9005      	str	r0, [sp, #20]
 80047ea:	2800      	cmp	r0, #0
 80047ec:	f43f af0c 	beq.w	8004608 <_strtod_l+0x490>
 80047f0:	9b07      	ldr	r3, [sp, #28]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	3202      	adds	r2, #2
 80047f6:	f103 010c 	add.w	r1, r3, #12
 80047fa:	0092      	lsls	r2, r2, #2
 80047fc:	300c      	adds	r0, #12
 80047fe:	f7ff fc73 	bl	80040e8 <memcpy>
 8004802:	ec4b ab10 	vmov	d0, sl, fp
 8004806:	aa1a      	add	r2, sp, #104	; 0x68
 8004808:	a919      	add	r1, sp, #100	; 0x64
 800480a:	4620      	mov	r0, r4
 800480c:	f001 fa36 	bl	8005c7c <__d2b>
 8004810:	ec4b ab18 	vmov	d8, sl, fp
 8004814:	9018      	str	r0, [sp, #96]	; 0x60
 8004816:	2800      	cmp	r0, #0
 8004818:	f43f aef6 	beq.w	8004608 <_strtod_l+0x490>
 800481c:	2101      	movs	r1, #1
 800481e:	4620      	mov	r0, r4
 8004820:	f000 ff80 	bl	8005724 <__i2b>
 8004824:	4606      	mov	r6, r0
 8004826:	2800      	cmp	r0, #0
 8004828:	f43f aeee 	beq.w	8004608 <_strtod_l+0x490>
 800482c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800482e:	9904      	ldr	r1, [sp, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfab      	itete	ge
 8004834:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004836:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004838:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800483a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800483e:	bfac      	ite	ge
 8004840:	eb03 0902 	addge.w	r9, r3, r2
 8004844:	1ad7      	sublt	r7, r2, r3
 8004846:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004848:	eba3 0801 	sub.w	r8, r3, r1
 800484c:	4490      	add	r8, r2
 800484e:	4ba1      	ldr	r3, [pc, #644]	; (8004ad4 <_strtod_l+0x95c>)
 8004850:	f108 38ff 	add.w	r8, r8, #4294967295
 8004854:	4598      	cmp	r8, r3
 8004856:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800485a:	f280 80c7 	bge.w	80049ec <_strtod_l+0x874>
 800485e:	eba3 0308 	sub.w	r3, r3, r8
 8004862:	2b1f      	cmp	r3, #31
 8004864:	eba2 0203 	sub.w	r2, r2, r3
 8004868:	f04f 0101 	mov.w	r1, #1
 800486c:	f300 80b1 	bgt.w	80049d2 <_strtod_l+0x85a>
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	930d      	str	r3, [sp, #52]	; 0x34
 8004876:	2300      	movs	r3, #0
 8004878:	9308      	str	r3, [sp, #32]
 800487a:	eb09 0802 	add.w	r8, r9, r2
 800487e:	9b04      	ldr	r3, [sp, #16]
 8004880:	45c1      	cmp	r9, r8
 8004882:	4417      	add	r7, r2
 8004884:	441f      	add	r7, r3
 8004886:	464b      	mov	r3, r9
 8004888:	bfa8      	it	ge
 800488a:	4643      	movge	r3, r8
 800488c:	42bb      	cmp	r3, r7
 800488e:	bfa8      	it	ge
 8004890:	463b      	movge	r3, r7
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfc2      	ittt	gt
 8004896:	eba8 0803 	subgt.w	r8, r8, r3
 800489a:	1aff      	subgt	r7, r7, r3
 800489c:	eba9 0903 	subgt.w	r9, r9, r3
 80048a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dd17      	ble.n	80048d6 <_strtod_l+0x75e>
 80048a6:	4631      	mov	r1, r6
 80048a8:	461a      	mov	r2, r3
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fffa 	bl	80058a4 <__pow5mult>
 80048b0:	4606      	mov	r6, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f43f aea8 	beq.w	8004608 <_strtod_l+0x490>
 80048b8:	4601      	mov	r1, r0
 80048ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80048bc:	4620      	mov	r0, r4
 80048be:	f000 ff47 	bl	8005750 <__multiply>
 80048c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80048c4:	2800      	cmp	r0, #0
 80048c6:	f43f ae9f 	beq.w	8004608 <_strtod_l+0x490>
 80048ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 fe27 	bl	8005520 <_Bfree>
 80048d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048d4:	9318      	str	r3, [sp, #96]	; 0x60
 80048d6:	f1b8 0f00 	cmp.w	r8, #0
 80048da:	f300 808c 	bgt.w	80049f6 <_strtod_l+0x87e>
 80048de:	9b06      	ldr	r3, [sp, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dd08      	ble.n	80048f6 <_strtod_l+0x77e>
 80048e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048e6:	9905      	ldr	r1, [sp, #20]
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 ffdb 	bl	80058a4 <__pow5mult>
 80048ee:	9005      	str	r0, [sp, #20]
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f43f ae89 	beq.w	8004608 <_strtod_l+0x490>
 80048f6:	2f00      	cmp	r7, #0
 80048f8:	dd08      	ble.n	800490c <_strtod_l+0x794>
 80048fa:	9905      	ldr	r1, [sp, #20]
 80048fc:	463a      	mov	r2, r7
 80048fe:	4620      	mov	r0, r4
 8004900:	f001 f82a 	bl	8005958 <__lshift>
 8004904:	9005      	str	r0, [sp, #20]
 8004906:	2800      	cmp	r0, #0
 8004908:	f43f ae7e 	beq.w	8004608 <_strtod_l+0x490>
 800490c:	f1b9 0f00 	cmp.w	r9, #0
 8004910:	dd08      	ble.n	8004924 <_strtod_l+0x7ac>
 8004912:	4631      	mov	r1, r6
 8004914:	464a      	mov	r2, r9
 8004916:	4620      	mov	r0, r4
 8004918:	f001 f81e 	bl	8005958 <__lshift>
 800491c:	4606      	mov	r6, r0
 800491e:	2800      	cmp	r0, #0
 8004920:	f43f ae72 	beq.w	8004608 <_strtod_l+0x490>
 8004924:	9a05      	ldr	r2, [sp, #20]
 8004926:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004928:	4620      	mov	r0, r4
 800492a:	f001 f8a1 	bl	8005a70 <__mdiff>
 800492e:	4605      	mov	r5, r0
 8004930:	2800      	cmp	r0, #0
 8004932:	f43f ae69 	beq.w	8004608 <_strtod_l+0x490>
 8004936:	68c3      	ldr	r3, [r0, #12]
 8004938:	930b      	str	r3, [sp, #44]	; 0x2c
 800493a:	2300      	movs	r3, #0
 800493c:	60c3      	str	r3, [r0, #12]
 800493e:	4631      	mov	r1, r6
 8004940:	f001 f87a 	bl	8005a38 <__mcmp>
 8004944:	2800      	cmp	r0, #0
 8004946:	da60      	bge.n	8004a0a <_strtod_l+0x892>
 8004948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800494a:	ea53 030a 	orrs.w	r3, r3, sl
 800494e:	f040 8082 	bne.w	8004a56 <_strtod_l+0x8de>
 8004952:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004956:	2b00      	cmp	r3, #0
 8004958:	d17d      	bne.n	8004a56 <_strtod_l+0x8de>
 800495a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800495e:	0d1b      	lsrs	r3, r3, #20
 8004960:	051b      	lsls	r3, r3, #20
 8004962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004966:	d976      	bls.n	8004a56 <_strtod_l+0x8de>
 8004968:	696b      	ldr	r3, [r5, #20]
 800496a:	b913      	cbnz	r3, 8004972 <_strtod_l+0x7fa>
 800496c:	692b      	ldr	r3, [r5, #16]
 800496e:	2b01      	cmp	r3, #1
 8004970:	dd71      	ble.n	8004a56 <_strtod_l+0x8de>
 8004972:	4629      	mov	r1, r5
 8004974:	2201      	movs	r2, #1
 8004976:	4620      	mov	r0, r4
 8004978:	f000 ffee 	bl	8005958 <__lshift>
 800497c:	4631      	mov	r1, r6
 800497e:	4605      	mov	r5, r0
 8004980:	f001 f85a 	bl	8005a38 <__mcmp>
 8004984:	2800      	cmp	r0, #0
 8004986:	dd66      	ble.n	8004a56 <_strtod_l+0x8de>
 8004988:	9904      	ldr	r1, [sp, #16]
 800498a:	4a53      	ldr	r2, [pc, #332]	; (8004ad8 <_strtod_l+0x960>)
 800498c:	465b      	mov	r3, fp
 800498e:	2900      	cmp	r1, #0
 8004990:	f000 8081 	beq.w	8004a96 <_strtod_l+0x91e>
 8004994:	ea02 010b 	and.w	r1, r2, fp
 8004998:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800499c:	dc7b      	bgt.n	8004a96 <_strtod_l+0x91e>
 800499e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80049a2:	f77f aea9 	ble.w	80046f8 <_strtod_l+0x580>
 80049a6:	4b4d      	ldr	r3, [pc, #308]	; (8004adc <_strtod_l+0x964>)
 80049a8:	4650      	mov	r0, sl
 80049aa:	4659      	mov	r1, fp
 80049ac:	2200      	movs	r2, #0
 80049ae:	f7fb fe33 	bl	8000618 <__aeabi_dmul>
 80049b2:	460b      	mov	r3, r1
 80049b4:	4303      	orrs	r3, r0
 80049b6:	bf08      	it	eq
 80049b8:	2322      	moveq	r3, #34	; 0x22
 80049ba:	4682      	mov	sl, r0
 80049bc:	468b      	mov	fp, r1
 80049be:	bf08      	it	eq
 80049c0:	6023      	streq	r3, [r4, #0]
 80049c2:	e62b      	b.n	800461c <_strtod_l+0x4a4>
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	ea03 0a0a 	and.w	sl, r3, sl
 80049d0:	e6e3      	b.n	800479a <_strtod_l+0x622>
 80049d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80049d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80049da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80049de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80049e2:	fa01 f308 	lsl.w	r3, r1, r8
 80049e6:	9308      	str	r3, [sp, #32]
 80049e8:	910d      	str	r1, [sp, #52]	; 0x34
 80049ea:	e746      	b.n	800487a <_strtod_l+0x702>
 80049ec:	2300      	movs	r3, #0
 80049ee:	9308      	str	r3, [sp, #32]
 80049f0:	2301      	movs	r3, #1
 80049f2:	930d      	str	r3, [sp, #52]	; 0x34
 80049f4:	e741      	b.n	800487a <_strtod_l+0x702>
 80049f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049f8:	4642      	mov	r2, r8
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 ffac 	bl	8005958 <__lshift>
 8004a00:	9018      	str	r0, [sp, #96]	; 0x60
 8004a02:	2800      	cmp	r0, #0
 8004a04:	f47f af6b 	bne.w	80048de <_strtod_l+0x766>
 8004a08:	e5fe      	b.n	8004608 <_strtod_l+0x490>
 8004a0a:	465f      	mov	r7, fp
 8004a0c:	d16e      	bne.n	8004aec <_strtod_l+0x974>
 8004a0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a14:	b342      	cbz	r2, 8004a68 <_strtod_l+0x8f0>
 8004a16:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <_strtod_l+0x968>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d128      	bne.n	8004a6e <_strtod_l+0x8f6>
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	4651      	mov	r1, sl
 8004a20:	b1eb      	cbz	r3, 8004a5e <_strtod_l+0x8e6>
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <_strtod_l+0x960>)
 8004a24:	403b      	ands	r3, r7
 8004a26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	d819      	bhi.n	8004a64 <_strtod_l+0x8ec>
 8004a30:	0d1b      	lsrs	r3, r3, #20
 8004a32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	4299      	cmp	r1, r3
 8004a3c:	d117      	bne.n	8004a6e <_strtod_l+0x8f6>
 8004a3e:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <_strtod_l+0x96c>)
 8004a40:	429f      	cmp	r7, r3
 8004a42:	d102      	bne.n	8004a4a <_strtod_l+0x8d2>
 8004a44:	3101      	adds	r1, #1
 8004a46:	f43f addf 	beq.w	8004608 <_strtod_l+0x490>
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <_strtod_l+0x960>)
 8004a4c:	403b      	ands	r3, r7
 8004a4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004a52:	f04f 0a00 	mov.w	sl, #0
 8004a56:	9b04      	ldr	r3, [sp, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1a4      	bne.n	80049a6 <_strtod_l+0x82e>
 8004a5c:	e5de      	b.n	800461c <_strtod_l+0x4a4>
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	e7ea      	b.n	8004a3a <_strtod_l+0x8c2>
 8004a64:	4613      	mov	r3, r2
 8004a66:	e7e8      	b.n	8004a3a <_strtod_l+0x8c2>
 8004a68:	ea53 030a 	orrs.w	r3, r3, sl
 8004a6c:	d08c      	beq.n	8004988 <_strtod_l+0x810>
 8004a6e:	9b08      	ldr	r3, [sp, #32]
 8004a70:	b1db      	cbz	r3, 8004aaa <_strtod_l+0x932>
 8004a72:	423b      	tst	r3, r7
 8004a74:	d0ef      	beq.n	8004a56 <_strtod_l+0x8de>
 8004a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a78:	9a04      	ldr	r2, [sp, #16]
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	b1c3      	cbz	r3, 8004ab2 <_strtod_l+0x93a>
 8004a80:	f7ff fb5c 	bl	800413c <sulp>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	ec51 0b18 	vmov	r0, r1, d8
 8004a8c:	f7fb fc0e 	bl	80002ac <__adddf3>
 8004a90:	4682      	mov	sl, r0
 8004a92:	468b      	mov	fp, r1
 8004a94:	e7df      	b.n	8004a56 <_strtod_l+0x8de>
 8004a96:	4013      	ands	r3, r2
 8004a98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004a9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004aa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004aa4:	f04f 3aff 	mov.w	sl, #4294967295
 8004aa8:	e7d5      	b.n	8004a56 <_strtod_l+0x8de>
 8004aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aac:	ea13 0f0a 	tst.w	r3, sl
 8004ab0:	e7e0      	b.n	8004a74 <_strtod_l+0x8fc>
 8004ab2:	f7ff fb43 	bl	800413c <sulp>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	ec51 0b18 	vmov	r0, r1, d8
 8004abe:	f7fb fbf3 	bl	80002a8 <__aeabi_dsub>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4682      	mov	sl, r0
 8004ac8:	468b      	mov	fp, r1
 8004aca:	f7fc f80d 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0c1      	beq.n	8004a56 <_strtod_l+0x8de>
 8004ad2:	e611      	b.n	80046f8 <_strtod_l+0x580>
 8004ad4:	fffffc02 	.word	0xfffffc02
 8004ad8:	7ff00000 	.word	0x7ff00000
 8004adc:	39500000 	.word	0x39500000
 8004ae0:	000fffff 	.word	0x000fffff
 8004ae4:	7fefffff 	.word	0x7fefffff
 8004ae8:	08006f18 	.word	0x08006f18
 8004aec:	4631      	mov	r1, r6
 8004aee:	4628      	mov	r0, r5
 8004af0:	f001 f920 	bl	8005d34 <__ratio>
 8004af4:	ec59 8b10 	vmov	r8, r9, d0
 8004af8:	ee10 0a10 	vmov	r0, s0
 8004afc:	2200      	movs	r2, #0
 8004afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b02:	4649      	mov	r1, r9
 8004b04:	f7fc f804 	bl	8000b10 <__aeabi_dcmple>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d07a      	beq.n	8004c02 <_strtod_l+0xa8a>
 8004b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04a      	beq.n	8004ba8 <_strtod_l+0xa30>
 8004b12:	4b95      	ldr	r3, [pc, #596]	; (8004d68 <_strtod_l+0xbf0>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004d68 <_strtod_l+0xbf0>
 8004b1e:	f04f 0800 	mov.w	r8, #0
 8004b22:	4b92      	ldr	r3, [pc, #584]	; (8004d6c <_strtod_l+0xbf4>)
 8004b24:	403b      	ands	r3, r7
 8004b26:	930d      	str	r3, [sp, #52]	; 0x34
 8004b28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b2a:	4b91      	ldr	r3, [pc, #580]	; (8004d70 <_strtod_l+0xbf8>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	f040 80b0 	bne.w	8004c92 <_strtod_l+0xb1a>
 8004b32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004b3a:	ec4b ab10 	vmov	d0, sl, fp
 8004b3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b42:	f001 f81f 	bl	8005b84 <__ulp>
 8004b46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b4a:	ec53 2b10 	vmov	r2, r3, d0
 8004b4e:	f7fb fd63 	bl	8000618 <__aeabi_dmul>
 8004b52:	4652      	mov	r2, sl
 8004b54:	465b      	mov	r3, fp
 8004b56:	f7fb fba9 	bl	80002ac <__adddf3>
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4983      	ldr	r1, [pc, #524]	; (8004d6c <_strtod_l+0xbf4>)
 8004b5e:	4a85      	ldr	r2, [pc, #532]	; (8004d74 <_strtod_l+0xbfc>)
 8004b60:	4019      	ands	r1, r3
 8004b62:	4291      	cmp	r1, r2
 8004b64:	4682      	mov	sl, r0
 8004b66:	d960      	bls.n	8004c2a <_strtod_l+0xab2>
 8004b68:	ee18 3a90 	vmov	r3, s17
 8004b6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d104      	bne.n	8004b7e <_strtod_l+0xa06>
 8004b74:	ee18 3a10 	vmov	r3, s16
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f43f ad45 	beq.w	8004608 <_strtod_l+0x490>
 8004b7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004d80 <_strtod_l+0xc08>
 8004b82:	f04f 3aff 	mov.w	sl, #4294967295
 8004b86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f000 fcc9 	bl	8005520 <_Bfree>
 8004b8e:	9905      	ldr	r1, [sp, #20]
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 fcc5 	bl	8005520 <_Bfree>
 8004b96:	4631      	mov	r1, r6
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f000 fcc1 	bl	8005520 <_Bfree>
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 fcbd 	bl	8005520 <_Bfree>
 8004ba6:	e61a      	b.n	80047de <_strtod_l+0x666>
 8004ba8:	f1ba 0f00 	cmp.w	sl, #0
 8004bac:	d11b      	bne.n	8004be6 <_strtod_l+0xa6e>
 8004bae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004bb2:	b9f3      	cbnz	r3, 8004bf2 <_strtod_l+0xa7a>
 8004bb4:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <_strtod_l+0xbf0>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4640      	mov	r0, r8
 8004bba:	4649      	mov	r1, r9
 8004bbc:	f7fb ff9e 	bl	8000afc <__aeabi_dcmplt>
 8004bc0:	b9d0      	cbnz	r0, 8004bf8 <_strtod_l+0xa80>
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4b6c      	ldr	r3, [pc, #432]	; (8004d78 <_strtod_l+0xc00>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f7fb fd25 	bl	8000618 <__aeabi_dmul>
 8004bce:	4680      	mov	r8, r0
 8004bd0:	4689      	mov	r9, r1
 8004bd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004bd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004bda:	9315      	str	r3, [sp, #84]	; 0x54
 8004bdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004be0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004be4:	e79d      	b.n	8004b22 <_strtod_l+0x9aa>
 8004be6:	f1ba 0f01 	cmp.w	sl, #1
 8004bea:	d102      	bne.n	8004bf2 <_strtod_l+0xa7a>
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	f43f ad83 	beq.w	80046f8 <_strtod_l+0x580>
 8004bf2:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <_strtod_l+0xc04>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	e78e      	b.n	8004b16 <_strtod_l+0x99e>
 8004bf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004d78 <_strtod_l+0xc00>
 8004bfc:	f04f 0800 	mov.w	r8, #0
 8004c00:	e7e7      	b.n	8004bd2 <_strtod_l+0xa5a>
 8004c02:	4b5d      	ldr	r3, [pc, #372]	; (8004d78 <_strtod_l+0xc00>)
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f7fb fd05 	bl	8000618 <__aeabi_dmul>
 8004c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c10:	4680      	mov	r8, r0
 8004c12:	4689      	mov	r9, r1
 8004c14:	b933      	cbnz	r3, 8004c24 <_strtod_l+0xaac>
 8004c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c1a:	900e      	str	r0, [sp, #56]	; 0x38
 8004c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c22:	e7dd      	b.n	8004be0 <_strtod_l+0xa68>
 8004c24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004c28:	e7f9      	b.n	8004c1e <_strtod_l+0xaa6>
 8004c2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1a8      	bne.n	8004b86 <_strtod_l+0xa0e>
 8004c34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c3a:	0d1b      	lsrs	r3, r3, #20
 8004c3c:	051b      	lsls	r3, r3, #20
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d1a1      	bne.n	8004b86 <_strtod_l+0xa0e>
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb ffe1 	bl	8000c0c <__aeabi_d2lz>
 8004c4a:	f7fb fcb7 	bl	80005bc <__aeabi_l2d>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	f7fb fb27 	bl	80002a8 <__aeabi_dsub>
 8004c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c60:	ea43 030a 	orr.w	r3, r3, sl
 8004c64:	4313      	orrs	r3, r2
 8004c66:	4680      	mov	r8, r0
 8004c68:	4689      	mov	r9, r1
 8004c6a:	d055      	beq.n	8004d18 <_strtod_l+0xba0>
 8004c6c:	a336      	add	r3, pc, #216	; (adr r3, 8004d48 <_strtod_l+0xbd0>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f7fb ff43 	bl	8000afc <__aeabi_dcmplt>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f47f acd0 	bne.w	800461c <_strtod_l+0x4a4>
 8004c7c:	a334      	add	r3, pc, #208	; (adr r3, 8004d50 <_strtod_l+0xbd8>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	4640      	mov	r0, r8
 8004c84:	4649      	mov	r1, r9
 8004c86:	f7fb ff57 	bl	8000b38 <__aeabi_dcmpgt>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	f43f af7b 	beq.w	8004b86 <_strtod_l+0xa0e>
 8004c90:	e4c4      	b.n	800461c <_strtod_l+0x4a4>
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	b333      	cbz	r3, 8004ce4 <_strtod_l+0xb6c>
 8004c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004c9c:	d822      	bhi.n	8004ce4 <_strtod_l+0xb6c>
 8004c9e:	a32e      	add	r3, pc, #184	; (adr r3, 8004d58 <_strtod_l+0xbe0>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb ff32 	bl	8000b10 <__aeabi_dcmple>
 8004cac:	b1a0      	cbz	r0, 8004cd8 <_strtod_l+0xb60>
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	f7fb ff73 	bl	8000b9c <__aeabi_d2uiz>
 8004cb6:	2801      	cmp	r0, #1
 8004cb8:	bf38      	it	cc
 8004cba:	2001      	movcc	r0, #1
 8004cbc:	f7fb fc32 	bl	8000524 <__aeabi_ui2d>
 8004cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	4689      	mov	r9, r1
 8004cc6:	bb23      	cbnz	r3, 8004d12 <_strtod_l+0xb9a>
 8004cc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ccc:	9010      	str	r0, [sp, #64]	; 0x40
 8004cce:	9311      	str	r3, [sp, #68]	; 0x44
 8004cd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8004cec:	eef0 0a68 	vmov.f32	s1, s17
 8004cf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cf4:	f000 ff46 	bl	8005b84 <__ulp>
 8004cf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004cfc:	ec53 2b10 	vmov	r2, r3, d0
 8004d00:	f7fb fc8a 	bl	8000618 <__aeabi_dmul>
 8004d04:	ec53 2b18 	vmov	r2, r3, d8
 8004d08:	f7fb fad0 	bl	80002ac <__adddf3>
 8004d0c:	4682      	mov	sl, r0
 8004d0e:	468b      	mov	fp, r1
 8004d10:	e78d      	b.n	8004c2e <_strtod_l+0xab6>
 8004d12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004d16:	e7db      	b.n	8004cd0 <_strtod_l+0xb58>
 8004d18:	a311      	add	r3, pc, #68	; (adr r3, 8004d60 <_strtod_l+0xbe8>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb feed 	bl	8000afc <__aeabi_dcmplt>
 8004d22:	e7b2      	b.n	8004c8a <_strtod_l+0xb12>
 8004d24:	2300      	movs	r3, #0
 8004d26:	930a      	str	r3, [sp, #40]	; 0x28
 8004d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	f7ff ba6b 	b.w	8004208 <_strtod_l+0x90>
 8004d32:	2a65      	cmp	r2, #101	; 0x65
 8004d34:	f43f ab5f 	beq.w	80043f6 <_strtod_l+0x27e>
 8004d38:	2a45      	cmp	r2, #69	; 0x45
 8004d3a:	f43f ab5c 	beq.w	80043f6 <_strtod_l+0x27e>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f7ff bb94 	b.w	800446c <_strtod_l+0x2f4>
 8004d44:	f3af 8000 	nop.w
 8004d48:	94a03595 	.word	0x94a03595
 8004d4c:	3fdfffff 	.word	0x3fdfffff
 8004d50:	35afe535 	.word	0x35afe535
 8004d54:	3fe00000 	.word	0x3fe00000
 8004d58:	ffc00000 	.word	0xffc00000
 8004d5c:	41dfffff 	.word	0x41dfffff
 8004d60:	94a03595 	.word	0x94a03595
 8004d64:	3fcfffff 	.word	0x3fcfffff
 8004d68:	3ff00000 	.word	0x3ff00000
 8004d6c:	7ff00000 	.word	0x7ff00000
 8004d70:	7fe00000 	.word	0x7fe00000
 8004d74:	7c9fffff 	.word	0x7c9fffff
 8004d78:	3fe00000 	.word	0x3fe00000
 8004d7c:	bff00000 	.word	0xbff00000
 8004d80:	7fefffff 	.word	0x7fefffff

08004d84 <strtod>:
 8004d84:	460a      	mov	r2, r1
 8004d86:	4601      	mov	r1, r0
 8004d88:	4802      	ldr	r0, [pc, #8]	; (8004d94 <strtod+0x10>)
 8004d8a:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <strtod+0x14>)
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f7ff b9f3 	b.w	8004178 <_strtod_l>
 8004d92:	bf00      	nop
 8004d94:	2000000c 	.word	0x2000000c
 8004d98:	20000074 	.word	0x20000074

08004d9c <rshift>:
 8004d9c:	6903      	ldr	r3, [r0, #16]
 8004d9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004da2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004da6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004daa:	f100 0414 	add.w	r4, r0, #20
 8004dae:	dd45      	ble.n	8004e3c <rshift+0xa0>
 8004db0:	f011 011f 	ands.w	r1, r1, #31
 8004db4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004db8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004dbc:	d10c      	bne.n	8004dd8 <rshift+0x3c>
 8004dbe:	f100 0710 	add.w	r7, r0, #16
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	42b1      	cmp	r1, r6
 8004dc6:	d334      	bcc.n	8004e32 <rshift+0x96>
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	1eea      	subs	r2, r5, #3
 8004dce:	4296      	cmp	r6, r2
 8004dd0:	bf38      	it	cc
 8004dd2:	2300      	movcc	r3, #0
 8004dd4:	4423      	add	r3, r4
 8004dd6:	e015      	b.n	8004e04 <rshift+0x68>
 8004dd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004ddc:	f1c1 0820 	rsb	r8, r1, #32
 8004de0:	40cf      	lsrs	r7, r1
 8004de2:	f105 0e04 	add.w	lr, r5, #4
 8004de6:	46a1      	mov	r9, r4
 8004de8:	4576      	cmp	r6, lr
 8004dea:	46f4      	mov	ip, lr
 8004dec:	d815      	bhi.n	8004e1a <rshift+0x7e>
 8004dee:	1a9a      	subs	r2, r3, r2
 8004df0:	0092      	lsls	r2, r2, #2
 8004df2:	3a04      	subs	r2, #4
 8004df4:	3501      	adds	r5, #1
 8004df6:	42ae      	cmp	r6, r5
 8004df8:	bf38      	it	cc
 8004dfa:	2200      	movcc	r2, #0
 8004dfc:	18a3      	adds	r3, r4, r2
 8004dfe:	50a7      	str	r7, [r4, r2]
 8004e00:	b107      	cbz	r7, 8004e04 <rshift+0x68>
 8004e02:	3304      	adds	r3, #4
 8004e04:	1b1a      	subs	r2, r3, r4
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004e0c:	bf08      	it	eq
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	6102      	str	r2, [r0, #16]
 8004e12:	bf08      	it	eq
 8004e14:	6143      	streq	r3, [r0, #20]
 8004e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e1a:	f8dc c000 	ldr.w	ip, [ip]
 8004e1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8004e22:	ea4c 0707 	orr.w	r7, ip, r7
 8004e26:	f849 7b04 	str.w	r7, [r9], #4
 8004e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004e2e:	40cf      	lsrs	r7, r1
 8004e30:	e7da      	b.n	8004de8 <rshift+0x4c>
 8004e32:	f851 cb04 	ldr.w	ip, [r1], #4
 8004e36:	f847 cf04 	str.w	ip, [r7, #4]!
 8004e3a:	e7c3      	b.n	8004dc4 <rshift+0x28>
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	e7e1      	b.n	8004e04 <rshift+0x68>

08004e40 <__hexdig_fun>:
 8004e40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d802      	bhi.n	8004e4e <__hexdig_fun+0xe>
 8004e48:	3820      	subs	r0, #32
 8004e4a:	b2c0      	uxtb	r0, r0
 8004e4c:	4770      	bx	lr
 8004e4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d801      	bhi.n	8004e5a <__hexdig_fun+0x1a>
 8004e56:	3847      	subs	r0, #71	; 0x47
 8004e58:	e7f7      	b.n	8004e4a <__hexdig_fun+0xa>
 8004e5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d801      	bhi.n	8004e66 <__hexdig_fun+0x26>
 8004e62:	3827      	subs	r0, #39	; 0x27
 8004e64:	e7f1      	b.n	8004e4a <__hexdig_fun+0xa>
 8004e66:	2000      	movs	r0, #0
 8004e68:	4770      	bx	lr
	...

08004e6c <__gethex>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	ed2d 8b02 	vpush	{d8}
 8004e74:	b089      	sub	sp, #36	; 0x24
 8004e76:	ee08 0a10 	vmov	s16, r0
 8004e7a:	9304      	str	r3, [sp, #16]
 8004e7c:	4bb4      	ldr	r3, [pc, #720]	; (8005150 <__gethex+0x2e4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	468b      	mov	fp, r1
 8004e86:	4690      	mov	r8, r2
 8004e88:	f7fb f9b2 	bl	80001f0 <strlen>
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	f8db 2000 	ldr.w	r2, [fp]
 8004e92:	4403      	add	r3, r0
 8004e94:	4682      	mov	sl, r0
 8004e96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	1c93      	adds	r3, r2, #2
 8004e9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004ea2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004ea6:	32fe      	adds	r2, #254	; 0xfe
 8004ea8:	18d1      	adds	r1, r2, r3
 8004eaa:	461f      	mov	r7, r3
 8004eac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004eb0:	9100      	str	r1, [sp, #0]
 8004eb2:	2830      	cmp	r0, #48	; 0x30
 8004eb4:	d0f8      	beq.n	8004ea8 <__gethex+0x3c>
 8004eb6:	f7ff ffc3 	bl	8004e40 <__hexdig_fun>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d13a      	bne.n	8004f36 <__gethex+0xca>
 8004ec0:	9901      	ldr	r1, [sp, #4]
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff f925 	bl	8004114 <strncmp>
 8004eca:	4605      	mov	r5, r0
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d168      	bne.n	8004fa2 <__gethex+0x136>
 8004ed0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004ed4:	eb07 060a 	add.w	r6, r7, sl
 8004ed8:	f7ff ffb2 	bl	8004e40 <__hexdig_fun>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d062      	beq.n	8004fa6 <__gethex+0x13a>
 8004ee0:	4633      	mov	r3, r6
 8004ee2:	7818      	ldrb	r0, [r3, #0]
 8004ee4:	2830      	cmp	r0, #48	; 0x30
 8004ee6:	461f      	mov	r7, r3
 8004ee8:	f103 0301 	add.w	r3, r3, #1
 8004eec:	d0f9      	beq.n	8004ee2 <__gethex+0x76>
 8004eee:	f7ff ffa7 	bl	8004e40 <__hexdig_fun>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	fab0 f480 	clz	r4, r0
 8004ef8:	0964      	lsrs	r4, r4, #5
 8004efa:	4635      	mov	r5, r6
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	463a      	mov	r2, r7
 8004f00:	4616      	mov	r6, r2
 8004f02:	3201      	adds	r2, #1
 8004f04:	7830      	ldrb	r0, [r6, #0]
 8004f06:	f7ff ff9b 	bl	8004e40 <__hexdig_fun>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d1f8      	bne.n	8004f00 <__gethex+0x94>
 8004f0e:	9901      	ldr	r1, [sp, #4]
 8004f10:	4652      	mov	r2, sl
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff f8fe 	bl	8004114 <strncmp>
 8004f18:	b980      	cbnz	r0, 8004f3c <__gethex+0xd0>
 8004f1a:	b94d      	cbnz	r5, 8004f30 <__gethex+0xc4>
 8004f1c:	eb06 050a 	add.w	r5, r6, sl
 8004f20:	462a      	mov	r2, r5
 8004f22:	4616      	mov	r6, r2
 8004f24:	3201      	adds	r2, #1
 8004f26:	7830      	ldrb	r0, [r6, #0]
 8004f28:	f7ff ff8a 	bl	8004e40 <__hexdig_fun>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d1f8      	bne.n	8004f22 <__gethex+0xb6>
 8004f30:	1bad      	subs	r5, r5, r6
 8004f32:	00ad      	lsls	r5, r5, #2
 8004f34:	e004      	b.n	8004f40 <__gethex+0xd4>
 8004f36:	2400      	movs	r4, #0
 8004f38:	4625      	mov	r5, r4
 8004f3a:	e7e0      	b.n	8004efe <__gethex+0x92>
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	d1f7      	bne.n	8004f30 <__gethex+0xc4>
 8004f40:	7833      	ldrb	r3, [r6, #0]
 8004f42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f46:	2b50      	cmp	r3, #80	; 0x50
 8004f48:	d13b      	bne.n	8004fc2 <__gethex+0x156>
 8004f4a:	7873      	ldrb	r3, [r6, #1]
 8004f4c:	2b2b      	cmp	r3, #43	; 0x2b
 8004f4e:	d02c      	beq.n	8004faa <__gethex+0x13e>
 8004f50:	2b2d      	cmp	r3, #45	; 0x2d
 8004f52:	d02e      	beq.n	8004fb2 <__gethex+0x146>
 8004f54:	1c71      	adds	r1, r6, #1
 8004f56:	f04f 0900 	mov.w	r9, #0
 8004f5a:	7808      	ldrb	r0, [r1, #0]
 8004f5c:	f7ff ff70 	bl	8004e40 <__hexdig_fun>
 8004f60:	1e43      	subs	r3, r0, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b18      	cmp	r3, #24
 8004f66:	d82c      	bhi.n	8004fc2 <__gethex+0x156>
 8004f68:	f1a0 0210 	sub.w	r2, r0, #16
 8004f6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004f70:	f7ff ff66 	bl	8004e40 <__hexdig_fun>
 8004f74:	1e43      	subs	r3, r0, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b18      	cmp	r3, #24
 8004f7a:	d91d      	bls.n	8004fb8 <__gethex+0x14c>
 8004f7c:	f1b9 0f00 	cmp.w	r9, #0
 8004f80:	d000      	beq.n	8004f84 <__gethex+0x118>
 8004f82:	4252      	negs	r2, r2
 8004f84:	4415      	add	r5, r2
 8004f86:	f8cb 1000 	str.w	r1, [fp]
 8004f8a:	b1e4      	cbz	r4, 8004fc6 <__gethex+0x15a>
 8004f8c:	9b00      	ldr	r3, [sp, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf14      	ite	ne
 8004f92:	2700      	movne	r7, #0
 8004f94:	2706      	moveq	r7, #6
 8004f96:	4638      	mov	r0, r7
 8004f98:	b009      	add	sp, #36	; 0x24
 8004f9a:	ecbd 8b02 	vpop	{d8}
 8004f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa2:	463e      	mov	r6, r7
 8004fa4:	4625      	mov	r5, r4
 8004fa6:	2401      	movs	r4, #1
 8004fa8:	e7ca      	b.n	8004f40 <__gethex+0xd4>
 8004faa:	f04f 0900 	mov.w	r9, #0
 8004fae:	1cb1      	adds	r1, r6, #2
 8004fb0:	e7d3      	b.n	8004f5a <__gethex+0xee>
 8004fb2:	f04f 0901 	mov.w	r9, #1
 8004fb6:	e7fa      	b.n	8004fae <__gethex+0x142>
 8004fb8:	230a      	movs	r3, #10
 8004fba:	fb03 0202 	mla	r2, r3, r2, r0
 8004fbe:	3a10      	subs	r2, #16
 8004fc0:	e7d4      	b.n	8004f6c <__gethex+0x100>
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	e7df      	b.n	8004f86 <__gethex+0x11a>
 8004fc6:	1bf3      	subs	r3, r6, r7
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	4621      	mov	r1, r4
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	dc0b      	bgt.n	8004fe8 <__gethex+0x17c>
 8004fd0:	ee18 0a10 	vmov	r0, s16
 8004fd4:	f000 fa64 	bl	80054a0 <_Balloc>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	b940      	cbnz	r0, 8004fee <__gethex+0x182>
 8004fdc:	4b5d      	ldr	r3, [pc, #372]	; (8005154 <__gethex+0x2e8>)
 8004fde:	4602      	mov	r2, r0
 8004fe0:	21de      	movs	r1, #222	; 0xde
 8004fe2:	485d      	ldr	r0, [pc, #372]	; (8005158 <__gethex+0x2ec>)
 8004fe4:	f000 ffee 	bl	8005fc4 <__assert_func>
 8004fe8:	3101      	adds	r1, #1
 8004fea:	105b      	asrs	r3, r3, #1
 8004fec:	e7ee      	b.n	8004fcc <__gethex+0x160>
 8004fee:	f100 0914 	add.w	r9, r0, #20
 8004ff2:	f04f 0b00 	mov.w	fp, #0
 8004ff6:	f1ca 0301 	rsb	r3, sl, #1
 8004ffa:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ffe:	f8cd b000 	str.w	fp, [sp]
 8005002:	9306      	str	r3, [sp, #24]
 8005004:	42b7      	cmp	r7, r6
 8005006:	d340      	bcc.n	800508a <__gethex+0x21e>
 8005008:	9802      	ldr	r0, [sp, #8]
 800500a:	9b00      	ldr	r3, [sp, #0]
 800500c:	f840 3b04 	str.w	r3, [r0], #4
 8005010:	eba0 0009 	sub.w	r0, r0, r9
 8005014:	1080      	asrs	r0, r0, #2
 8005016:	0146      	lsls	r6, r0, #5
 8005018:	6120      	str	r0, [r4, #16]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fb32 	bl	8005684 <__hi0bits>
 8005020:	1a30      	subs	r0, r6, r0
 8005022:	f8d8 6000 	ldr.w	r6, [r8]
 8005026:	42b0      	cmp	r0, r6
 8005028:	dd63      	ble.n	80050f2 <__gethex+0x286>
 800502a:	1b87      	subs	r7, r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	4620      	mov	r0, r4
 8005030:	f000 fed6 	bl	8005de0 <__any_on>
 8005034:	4682      	mov	sl, r0
 8005036:	b1a8      	cbz	r0, 8005064 <__gethex+0x1f8>
 8005038:	1e7b      	subs	r3, r7, #1
 800503a:	1159      	asrs	r1, r3, #5
 800503c:	f003 021f 	and.w	r2, r3, #31
 8005040:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005044:	f04f 0a01 	mov.w	sl, #1
 8005048:	fa0a f202 	lsl.w	r2, sl, r2
 800504c:	420a      	tst	r2, r1
 800504e:	d009      	beq.n	8005064 <__gethex+0x1f8>
 8005050:	4553      	cmp	r3, sl
 8005052:	dd05      	ble.n	8005060 <__gethex+0x1f4>
 8005054:	1eb9      	subs	r1, r7, #2
 8005056:	4620      	mov	r0, r4
 8005058:	f000 fec2 	bl	8005de0 <__any_on>
 800505c:	2800      	cmp	r0, #0
 800505e:	d145      	bne.n	80050ec <__gethex+0x280>
 8005060:	f04f 0a02 	mov.w	sl, #2
 8005064:	4639      	mov	r1, r7
 8005066:	4620      	mov	r0, r4
 8005068:	f7ff fe98 	bl	8004d9c <rshift>
 800506c:	443d      	add	r5, r7
 800506e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005072:	42ab      	cmp	r3, r5
 8005074:	da4c      	bge.n	8005110 <__gethex+0x2a4>
 8005076:	ee18 0a10 	vmov	r0, s16
 800507a:	4621      	mov	r1, r4
 800507c:	f000 fa50 	bl	8005520 <_Bfree>
 8005080:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005082:	2300      	movs	r3, #0
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	27a3      	movs	r7, #163	; 0xa3
 8005088:	e785      	b.n	8004f96 <__gethex+0x12a>
 800508a:	1e73      	subs	r3, r6, #1
 800508c:	9a05      	ldr	r2, [sp, #20]
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005094:	4293      	cmp	r3, r2
 8005096:	d019      	beq.n	80050cc <__gethex+0x260>
 8005098:	f1bb 0f20 	cmp.w	fp, #32
 800509c:	d107      	bne.n	80050ae <__gethex+0x242>
 800509e:	9b02      	ldr	r3, [sp, #8]
 80050a0:	9a00      	ldr	r2, [sp, #0]
 80050a2:	f843 2b04 	str.w	r2, [r3], #4
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	2300      	movs	r3, #0
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	469b      	mov	fp, r3
 80050ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80050b2:	f7ff fec5 	bl	8004e40 <__hexdig_fun>
 80050b6:	9b00      	ldr	r3, [sp, #0]
 80050b8:	f000 000f 	and.w	r0, r0, #15
 80050bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80050c0:	4303      	orrs	r3, r0
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	f10b 0b04 	add.w	fp, fp, #4
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	e00d      	b.n	80050e8 <__gethex+0x27c>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	9a06      	ldr	r2, [sp, #24]
 80050d0:	4413      	add	r3, r2
 80050d2:	42bb      	cmp	r3, r7
 80050d4:	d3e0      	bcc.n	8005098 <__gethex+0x22c>
 80050d6:	4618      	mov	r0, r3
 80050d8:	9901      	ldr	r1, [sp, #4]
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	4652      	mov	r2, sl
 80050de:	f7ff f819 	bl	8004114 <strncmp>
 80050e2:	9b07      	ldr	r3, [sp, #28]
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d1d7      	bne.n	8005098 <__gethex+0x22c>
 80050e8:	461e      	mov	r6, r3
 80050ea:	e78b      	b.n	8005004 <__gethex+0x198>
 80050ec:	f04f 0a03 	mov.w	sl, #3
 80050f0:	e7b8      	b.n	8005064 <__gethex+0x1f8>
 80050f2:	da0a      	bge.n	800510a <__gethex+0x29e>
 80050f4:	1a37      	subs	r7, r6, r0
 80050f6:	4621      	mov	r1, r4
 80050f8:	ee18 0a10 	vmov	r0, s16
 80050fc:	463a      	mov	r2, r7
 80050fe:	f000 fc2b 	bl	8005958 <__lshift>
 8005102:	1bed      	subs	r5, r5, r7
 8005104:	4604      	mov	r4, r0
 8005106:	f100 0914 	add.w	r9, r0, #20
 800510a:	f04f 0a00 	mov.w	sl, #0
 800510e:	e7ae      	b.n	800506e <__gethex+0x202>
 8005110:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005114:	42a8      	cmp	r0, r5
 8005116:	dd72      	ble.n	80051fe <__gethex+0x392>
 8005118:	1b45      	subs	r5, r0, r5
 800511a:	42ae      	cmp	r6, r5
 800511c:	dc36      	bgt.n	800518c <__gethex+0x320>
 800511e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d02a      	beq.n	800517c <__gethex+0x310>
 8005126:	2b03      	cmp	r3, #3
 8005128:	d02c      	beq.n	8005184 <__gethex+0x318>
 800512a:	2b01      	cmp	r3, #1
 800512c:	d11c      	bne.n	8005168 <__gethex+0x2fc>
 800512e:	42ae      	cmp	r6, r5
 8005130:	d11a      	bne.n	8005168 <__gethex+0x2fc>
 8005132:	2e01      	cmp	r6, #1
 8005134:	d112      	bne.n	800515c <__gethex+0x2f0>
 8005136:	9a04      	ldr	r2, [sp, #16]
 8005138:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	2301      	movs	r3, #1
 8005140:	6123      	str	r3, [r4, #16]
 8005142:	f8c9 3000 	str.w	r3, [r9]
 8005146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005148:	2762      	movs	r7, #98	; 0x62
 800514a:	601c      	str	r4, [r3, #0]
 800514c:	e723      	b.n	8004f96 <__gethex+0x12a>
 800514e:	bf00      	nop
 8005150:	08006fb8 	.word	0x08006fb8
 8005154:	08006f40 	.word	0x08006f40
 8005158:	08006f51 	.word	0x08006f51
 800515c:	1e71      	subs	r1, r6, #1
 800515e:	4620      	mov	r0, r4
 8005160:	f000 fe3e 	bl	8005de0 <__any_on>
 8005164:	2800      	cmp	r0, #0
 8005166:	d1e6      	bne.n	8005136 <__gethex+0x2ca>
 8005168:	ee18 0a10 	vmov	r0, s16
 800516c:	4621      	mov	r1, r4
 800516e:	f000 f9d7 	bl	8005520 <_Bfree>
 8005172:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005174:	2300      	movs	r3, #0
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	2750      	movs	r7, #80	; 0x50
 800517a:	e70c      	b.n	8004f96 <__gethex+0x12a>
 800517c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f2      	bne.n	8005168 <__gethex+0x2fc>
 8005182:	e7d8      	b.n	8005136 <__gethex+0x2ca>
 8005184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1d5      	bne.n	8005136 <__gethex+0x2ca>
 800518a:	e7ed      	b.n	8005168 <__gethex+0x2fc>
 800518c:	1e6f      	subs	r7, r5, #1
 800518e:	f1ba 0f00 	cmp.w	sl, #0
 8005192:	d131      	bne.n	80051f8 <__gethex+0x38c>
 8005194:	b127      	cbz	r7, 80051a0 <__gethex+0x334>
 8005196:	4639      	mov	r1, r7
 8005198:	4620      	mov	r0, r4
 800519a:	f000 fe21 	bl	8005de0 <__any_on>
 800519e:	4682      	mov	sl, r0
 80051a0:	117b      	asrs	r3, r7, #5
 80051a2:	2101      	movs	r1, #1
 80051a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80051a8:	f007 071f 	and.w	r7, r7, #31
 80051ac:	fa01 f707 	lsl.w	r7, r1, r7
 80051b0:	421f      	tst	r7, r3
 80051b2:	4629      	mov	r1, r5
 80051b4:	4620      	mov	r0, r4
 80051b6:	bf18      	it	ne
 80051b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80051bc:	1b76      	subs	r6, r6, r5
 80051be:	f7ff fded 	bl	8004d9c <rshift>
 80051c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80051c6:	2702      	movs	r7, #2
 80051c8:	f1ba 0f00 	cmp.w	sl, #0
 80051cc:	d048      	beq.n	8005260 <__gethex+0x3f4>
 80051ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d015      	beq.n	8005202 <__gethex+0x396>
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d017      	beq.n	800520a <__gethex+0x39e>
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d109      	bne.n	80051f2 <__gethex+0x386>
 80051de:	f01a 0f02 	tst.w	sl, #2
 80051e2:	d006      	beq.n	80051f2 <__gethex+0x386>
 80051e4:	f8d9 0000 	ldr.w	r0, [r9]
 80051e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80051ec:	f01a 0f01 	tst.w	sl, #1
 80051f0:	d10e      	bne.n	8005210 <__gethex+0x3a4>
 80051f2:	f047 0710 	orr.w	r7, r7, #16
 80051f6:	e033      	b.n	8005260 <__gethex+0x3f4>
 80051f8:	f04f 0a01 	mov.w	sl, #1
 80051fc:	e7d0      	b.n	80051a0 <__gethex+0x334>
 80051fe:	2701      	movs	r7, #1
 8005200:	e7e2      	b.n	80051c8 <__gethex+0x35c>
 8005202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005204:	f1c3 0301 	rsb	r3, r3, #1
 8005208:	9315      	str	r3, [sp, #84]	; 0x54
 800520a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <__gethex+0x386>
 8005210:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005214:	f104 0314 	add.w	r3, r4, #20
 8005218:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800521c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005220:	f04f 0c00 	mov.w	ip, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f853 2b04 	ldr.w	r2, [r3], #4
 800522a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800522e:	d01c      	beq.n	800526a <__gethex+0x3fe>
 8005230:	3201      	adds	r2, #1
 8005232:	6002      	str	r2, [r0, #0]
 8005234:	2f02      	cmp	r7, #2
 8005236:	f104 0314 	add.w	r3, r4, #20
 800523a:	d13f      	bne.n	80052bc <__gethex+0x450>
 800523c:	f8d8 2000 	ldr.w	r2, [r8]
 8005240:	3a01      	subs	r2, #1
 8005242:	42b2      	cmp	r2, r6
 8005244:	d10a      	bne.n	800525c <__gethex+0x3f0>
 8005246:	1171      	asrs	r1, r6, #5
 8005248:	2201      	movs	r2, #1
 800524a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800524e:	f006 061f 	and.w	r6, r6, #31
 8005252:	fa02 f606 	lsl.w	r6, r2, r6
 8005256:	421e      	tst	r6, r3
 8005258:	bf18      	it	ne
 800525a:	4617      	movne	r7, r2
 800525c:	f047 0720 	orr.w	r7, r7, #32
 8005260:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005262:	601c      	str	r4, [r3, #0]
 8005264:	9b04      	ldr	r3, [sp, #16]
 8005266:	601d      	str	r5, [r3, #0]
 8005268:	e695      	b.n	8004f96 <__gethex+0x12a>
 800526a:	4299      	cmp	r1, r3
 800526c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005270:	d8d8      	bhi.n	8005224 <__gethex+0x3b8>
 8005272:	68a3      	ldr	r3, [r4, #8]
 8005274:	459b      	cmp	fp, r3
 8005276:	db19      	blt.n	80052ac <__gethex+0x440>
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	ee18 0a10 	vmov	r0, s16
 800527e:	3101      	adds	r1, #1
 8005280:	f000 f90e 	bl	80054a0 <_Balloc>
 8005284:	4681      	mov	r9, r0
 8005286:	b918      	cbnz	r0, 8005290 <__gethex+0x424>
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <__gethex+0x488>)
 800528a:	4602      	mov	r2, r0
 800528c:	2184      	movs	r1, #132	; 0x84
 800528e:	e6a8      	b.n	8004fe2 <__gethex+0x176>
 8005290:	6922      	ldr	r2, [r4, #16]
 8005292:	3202      	adds	r2, #2
 8005294:	f104 010c 	add.w	r1, r4, #12
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	300c      	adds	r0, #12
 800529c:	f7fe ff24 	bl	80040e8 <memcpy>
 80052a0:	4621      	mov	r1, r4
 80052a2:	ee18 0a10 	vmov	r0, s16
 80052a6:	f000 f93b 	bl	8005520 <_Bfree>
 80052aa:	464c      	mov	r4, r9
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052b4:	6122      	str	r2, [r4, #16]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]
 80052ba:	e7bb      	b.n	8005234 <__gethex+0x3c8>
 80052bc:	6922      	ldr	r2, [r4, #16]
 80052be:	455a      	cmp	r2, fp
 80052c0:	dd0b      	ble.n	80052da <__gethex+0x46e>
 80052c2:	2101      	movs	r1, #1
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7ff fd69 	bl	8004d9c <rshift>
 80052ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052ce:	3501      	adds	r5, #1
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	f6ff aed0 	blt.w	8005076 <__gethex+0x20a>
 80052d6:	2701      	movs	r7, #1
 80052d8:	e7c0      	b.n	800525c <__gethex+0x3f0>
 80052da:	f016 061f 	ands.w	r6, r6, #31
 80052de:	d0fa      	beq.n	80052d6 <__gethex+0x46a>
 80052e0:	4453      	add	r3, sl
 80052e2:	f1c6 0620 	rsb	r6, r6, #32
 80052e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80052ea:	f000 f9cb 	bl	8005684 <__hi0bits>
 80052ee:	42b0      	cmp	r0, r6
 80052f0:	dbe7      	blt.n	80052c2 <__gethex+0x456>
 80052f2:	e7f0      	b.n	80052d6 <__gethex+0x46a>
 80052f4:	08006f40 	.word	0x08006f40

080052f8 <L_shift>:
 80052f8:	f1c2 0208 	rsb	r2, r2, #8
 80052fc:	0092      	lsls	r2, r2, #2
 80052fe:	b570      	push	{r4, r5, r6, lr}
 8005300:	f1c2 0620 	rsb	r6, r2, #32
 8005304:	6843      	ldr	r3, [r0, #4]
 8005306:	6804      	ldr	r4, [r0, #0]
 8005308:	fa03 f506 	lsl.w	r5, r3, r6
 800530c:	432c      	orrs	r4, r5
 800530e:	40d3      	lsrs	r3, r2
 8005310:	6004      	str	r4, [r0, #0]
 8005312:	f840 3f04 	str.w	r3, [r0, #4]!
 8005316:	4288      	cmp	r0, r1
 8005318:	d3f4      	bcc.n	8005304 <L_shift+0xc>
 800531a:	bd70      	pop	{r4, r5, r6, pc}

0800531c <__match>:
 800531c:	b530      	push	{r4, r5, lr}
 800531e:	6803      	ldr	r3, [r0, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005326:	b914      	cbnz	r4, 800532e <__match+0x12>
 8005328:	6003      	str	r3, [r0, #0]
 800532a:	2001      	movs	r0, #1
 800532c:	bd30      	pop	{r4, r5, pc}
 800532e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005332:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005336:	2d19      	cmp	r5, #25
 8005338:	bf98      	it	ls
 800533a:	3220      	addls	r2, #32
 800533c:	42a2      	cmp	r2, r4
 800533e:	d0f0      	beq.n	8005322 <__match+0x6>
 8005340:	2000      	movs	r0, #0
 8005342:	e7f3      	b.n	800532c <__match+0x10>

08005344 <__hexnan>:
 8005344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005348:	680b      	ldr	r3, [r1, #0]
 800534a:	115e      	asrs	r6, r3, #5
 800534c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005350:	f013 031f 	ands.w	r3, r3, #31
 8005354:	b087      	sub	sp, #28
 8005356:	bf18      	it	ne
 8005358:	3604      	addne	r6, #4
 800535a:	2500      	movs	r5, #0
 800535c:	1f37      	subs	r7, r6, #4
 800535e:	4690      	mov	r8, r2
 8005360:	6802      	ldr	r2, [r0, #0]
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	4682      	mov	sl, r0
 8005366:	f846 5c04 	str.w	r5, [r6, #-4]
 800536a:	46b9      	mov	r9, r7
 800536c:	463c      	mov	r4, r7
 800536e:	9502      	str	r5, [sp, #8]
 8005370:	46ab      	mov	fp, r5
 8005372:	7851      	ldrb	r1, [r2, #1]
 8005374:	1c53      	adds	r3, r2, #1
 8005376:	9303      	str	r3, [sp, #12]
 8005378:	b341      	cbz	r1, 80053cc <__hexnan+0x88>
 800537a:	4608      	mov	r0, r1
 800537c:	9205      	str	r2, [sp, #20]
 800537e:	9104      	str	r1, [sp, #16]
 8005380:	f7ff fd5e 	bl	8004e40 <__hexdig_fun>
 8005384:	2800      	cmp	r0, #0
 8005386:	d14f      	bne.n	8005428 <__hexnan+0xe4>
 8005388:	9904      	ldr	r1, [sp, #16]
 800538a:	9a05      	ldr	r2, [sp, #20]
 800538c:	2920      	cmp	r1, #32
 800538e:	d818      	bhi.n	80053c2 <__hexnan+0x7e>
 8005390:	9b02      	ldr	r3, [sp, #8]
 8005392:	459b      	cmp	fp, r3
 8005394:	dd13      	ble.n	80053be <__hexnan+0x7a>
 8005396:	454c      	cmp	r4, r9
 8005398:	d206      	bcs.n	80053a8 <__hexnan+0x64>
 800539a:	2d07      	cmp	r5, #7
 800539c:	dc04      	bgt.n	80053a8 <__hexnan+0x64>
 800539e:	462a      	mov	r2, r5
 80053a0:	4649      	mov	r1, r9
 80053a2:	4620      	mov	r0, r4
 80053a4:	f7ff ffa8 	bl	80052f8 <L_shift>
 80053a8:	4544      	cmp	r4, r8
 80053aa:	d950      	bls.n	800544e <__hexnan+0x10a>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f1a4 0904 	sub.w	r9, r4, #4
 80053b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80053b6:	f8cd b008 	str.w	fp, [sp, #8]
 80053ba:	464c      	mov	r4, r9
 80053bc:	461d      	mov	r5, r3
 80053be:	9a03      	ldr	r2, [sp, #12]
 80053c0:	e7d7      	b.n	8005372 <__hexnan+0x2e>
 80053c2:	2929      	cmp	r1, #41	; 0x29
 80053c4:	d156      	bne.n	8005474 <__hexnan+0x130>
 80053c6:	3202      	adds	r2, #2
 80053c8:	f8ca 2000 	str.w	r2, [sl]
 80053cc:	f1bb 0f00 	cmp.w	fp, #0
 80053d0:	d050      	beq.n	8005474 <__hexnan+0x130>
 80053d2:	454c      	cmp	r4, r9
 80053d4:	d206      	bcs.n	80053e4 <__hexnan+0xa0>
 80053d6:	2d07      	cmp	r5, #7
 80053d8:	dc04      	bgt.n	80053e4 <__hexnan+0xa0>
 80053da:	462a      	mov	r2, r5
 80053dc:	4649      	mov	r1, r9
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff ff8a 	bl	80052f8 <L_shift>
 80053e4:	4544      	cmp	r4, r8
 80053e6:	d934      	bls.n	8005452 <__hexnan+0x10e>
 80053e8:	f1a8 0204 	sub.w	r2, r8, #4
 80053ec:	4623      	mov	r3, r4
 80053ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80053f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80053f6:	429f      	cmp	r7, r3
 80053f8:	d2f9      	bcs.n	80053ee <__hexnan+0xaa>
 80053fa:	1b3b      	subs	r3, r7, r4
 80053fc:	f023 0303 	bic.w	r3, r3, #3
 8005400:	3304      	adds	r3, #4
 8005402:	3401      	adds	r4, #1
 8005404:	3e03      	subs	r6, #3
 8005406:	42b4      	cmp	r4, r6
 8005408:	bf88      	it	hi
 800540a:	2304      	movhi	r3, #4
 800540c:	4443      	add	r3, r8
 800540e:	2200      	movs	r2, #0
 8005410:	f843 2b04 	str.w	r2, [r3], #4
 8005414:	429f      	cmp	r7, r3
 8005416:	d2fb      	bcs.n	8005410 <__hexnan+0xcc>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b91b      	cbnz	r3, 8005424 <__hexnan+0xe0>
 800541c:	4547      	cmp	r7, r8
 800541e:	d127      	bne.n	8005470 <__hexnan+0x12c>
 8005420:	2301      	movs	r3, #1
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	2005      	movs	r0, #5
 8005426:	e026      	b.n	8005476 <__hexnan+0x132>
 8005428:	3501      	adds	r5, #1
 800542a:	2d08      	cmp	r5, #8
 800542c:	f10b 0b01 	add.w	fp, fp, #1
 8005430:	dd06      	ble.n	8005440 <__hexnan+0xfc>
 8005432:	4544      	cmp	r4, r8
 8005434:	d9c3      	bls.n	80053be <__hexnan+0x7a>
 8005436:	2300      	movs	r3, #0
 8005438:	f844 3c04 	str.w	r3, [r4, #-4]
 800543c:	2501      	movs	r5, #1
 800543e:	3c04      	subs	r4, #4
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	f000 000f 	and.w	r0, r0, #15
 8005446:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800544a:	6022      	str	r2, [r4, #0]
 800544c:	e7b7      	b.n	80053be <__hexnan+0x7a>
 800544e:	2508      	movs	r5, #8
 8005450:	e7b5      	b.n	80053be <__hexnan+0x7a>
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0df      	beq.n	8005418 <__hexnan+0xd4>
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	f1c3 0320 	rsb	r3, r3, #32
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005468:	401a      	ands	r2, r3
 800546a:	f846 2c04 	str.w	r2, [r6, #-4]
 800546e:	e7d3      	b.n	8005418 <__hexnan+0xd4>
 8005470:	3f04      	subs	r7, #4
 8005472:	e7d1      	b.n	8005418 <__hexnan+0xd4>
 8005474:	2004      	movs	r0, #4
 8005476:	b007      	add	sp, #28
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800547c <__ascii_mbtowc>:
 800547c:	b082      	sub	sp, #8
 800547e:	b901      	cbnz	r1, 8005482 <__ascii_mbtowc+0x6>
 8005480:	a901      	add	r1, sp, #4
 8005482:	b142      	cbz	r2, 8005496 <__ascii_mbtowc+0x1a>
 8005484:	b14b      	cbz	r3, 800549a <__ascii_mbtowc+0x1e>
 8005486:	7813      	ldrb	r3, [r2, #0]
 8005488:	600b      	str	r3, [r1, #0]
 800548a:	7812      	ldrb	r2, [r2, #0]
 800548c:	1e10      	subs	r0, r2, #0
 800548e:	bf18      	it	ne
 8005490:	2001      	movne	r0, #1
 8005492:	b002      	add	sp, #8
 8005494:	4770      	bx	lr
 8005496:	4610      	mov	r0, r2
 8005498:	e7fb      	b.n	8005492 <__ascii_mbtowc+0x16>
 800549a:	f06f 0001 	mvn.w	r0, #1
 800549e:	e7f8      	b.n	8005492 <__ascii_mbtowc+0x16>

080054a0 <_Balloc>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054a4:	4604      	mov	r4, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	b976      	cbnz	r6, 80054c8 <_Balloc+0x28>
 80054aa:	2010      	movs	r0, #16
 80054ac:	f000 fdba 	bl	8006024 <malloc>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6260      	str	r0, [r4, #36]	; 0x24
 80054b4:	b920      	cbnz	r0, 80054c0 <_Balloc+0x20>
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <_Balloc+0x78>)
 80054b8:	4818      	ldr	r0, [pc, #96]	; (800551c <_Balloc+0x7c>)
 80054ba:	2166      	movs	r1, #102	; 0x66
 80054bc:	f000 fd82 	bl	8005fc4 <__assert_func>
 80054c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054c4:	6006      	str	r6, [r0, #0]
 80054c6:	60c6      	str	r6, [r0, #12]
 80054c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054ca:	68f3      	ldr	r3, [r6, #12]
 80054cc:	b183      	cbz	r3, 80054f0 <_Balloc+0x50>
 80054ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054d6:	b9b8      	cbnz	r0, 8005508 <_Balloc+0x68>
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f605 	lsl.w	r6, r1, r5
 80054de:	1d72      	adds	r2, r6, #5
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fc9d 	bl	8005e22 <_calloc_r>
 80054e8:	b160      	cbz	r0, 8005504 <_Balloc+0x64>
 80054ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054ee:	e00e      	b.n	800550e <_Balloc+0x6e>
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	2104      	movs	r1, #4
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fc94 	bl	8005e22 <_calloc_r>
 80054fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054fc:	60f0      	str	r0, [r6, #12]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e4      	bne.n	80054ce <_Balloc+0x2e>
 8005504:	2000      	movs	r0, #0
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	6802      	ldr	r2, [r0, #0]
 800550a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800550e:	2300      	movs	r3, #0
 8005510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005514:	e7f7      	b.n	8005506 <_Balloc+0x66>
 8005516:	bf00      	nop
 8005518:	08006fcc 	.word	0x08006fcc
 800551c:	08006fe3 	.word	0x08006fe3

08005520 <_Bfree>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005524:	4605      	mov	r5, r0
 8005526:	460c      	mov	r4, r1
 8005528:	b976      	cbnz	r6, 8005548 <_Bfree+0x28>
 800552a:	2010      	movs	r0, #16
 800552c:	f000 fd7a 	bl	8006024 <malloc>
 8005530:	4602      	mov	r2, r0
 8005532:	6268      	str	r0, [r5, #36]	; 0x24
 8005534:	b920      	cbnz	r0, 8005540 <_Bfree+0x20>
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <_Bfree+0x3c>)
 8005538:	4809      	ldr	r0, [pc, #36]	; (8005560 <_Bfree+0x40>)
 800553a:	218a      	movs	r1, #138	; 0x8a
 800553c:	f000 fd42 	bl	8005fc4 <__assert_func>
 8005540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005544:	6006      	str	r6, [r0, #0]
 8005546:	60c6      	str	r6, [r0, #12]
 8005548:	b13c      	cbz	r4, 800555a <_Bfree+0x3a>
 800554a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800554c:	6862      	ldr	r2, [r4, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005554:	6021      	str	r1, [r4, #0]
 8005556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	08006fcc 	.word	0x08006fcc
 8005560:	08006fe3 	.word	0x08006fe3

08005564 <__multadd>:
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005568:	690d      	ldr	r5, [r1, #16]
 800556a:	4607      	mov	r7, r0
 800556c:	460c      	mov	r4, r1
 800556e:	461e      	mov	r6, r3
 8005570:	f101 0c14 	add.w	ip, r1, #20
 8005574:	2000      	movs	r0, #0
 8005576:	f8dc 3000 	ldr.w	r3, [ip]
 800557a:	b299      	uxth	r1, r3
 800557c:	fb02 6101 	mla	r1, r2, r1, r6
 8005580:	0c1e      	lsrs	r6, r3, #16
 8005582:	0c0b      	lsrs	r3, r1, #16
 8005584:	fb02 3306 	mla	r3, r2, r6, r3
 8005588:	b289      	uxth	r1, r1
 800558a:	3001      	adds	r0, #1
 800558c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005590:	4285      	cmp	r5, r0
 8005592:	f84c 1b04 	str.w	r1, [ip], #4
 8005596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800559a:	dcec      	bgt.n	8005576 <__multadd+0x12>
 800559c:	b30e      	cbz	r6, 80055e2 <__multadd+0x7e>
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	42ab      	cmp	r3, r5
 80055a2:	dc19      	bgt.n	80055d8 <__multadd+0x74>
 80055a4:	6861      	ldr	r1, [r4, #4]
 80055a6:	4638      	mov	r0, r7
 80055a8:	3101      	adds	r1, #1
 80055aa:	f7ff ff79 	bl	80054a0 <_Balloc>
 80055ae:	4680      	mov	r8, r0
 80055b0:	b928      	cbnz	r0, 80055be <__multadd+0x5a>
 80055b2:	4602      	mov	r2, r0
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <__multadd+0x84>)
 80055b6:	480d      	ldr	r0, [pc, #52]	; (80055ec <__multadd+0x88>)
 80055b8:	21b5      	movs	r1, #181	; 0xb5
 80055ba:	f000 fd03 	bl	8005fc4 <__assert_func>
 80055be:	6922      	ldr	r2, [r4, #16]
 80055c0:	3202      	adds	r2, #2
 80055c2:	f104 010c 	add.w	r1, r4, #12
 80055c6:	0092      	lsls	r2, r2, #2
 80055c8:	300c      	adds	r0, #12
 80055ca:	f7fe fd8d 	bl	80040e8 <memcpy>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff ffa5 	bl	8005520 <_Bfree>
 80055d6:	4644      	mov	r4, r8
 80055d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055dc:	3501      	adds	r5, #1
 80055de:	615e      	str	r6, [r3, #20]
 80055e0:	6125      	str	r5, [r4, #16]
 80055e2:	4620      	mov	r0, r4
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e8:	08006f40 	.word	0x08006f40
 80055ec:	08006fe3 	.word	0x08006fe3

080055f0 <__s2b>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	460c      	mov	r4, r1
 80055f6:	4615      	mov	r5, r2
 80055f8:	461f      	mov	r7, r3
 80055fa:	2209      	movs	r2, #9
 80055fc:	3308      	adds	r3, #8
 80055fe:	4606      	mov	r6, r0
 8005600:	fb93 f3f2 	sdiv	r3, r3, r2
 8005604:	2100      	movs	r1, #0
 8005606:	2201      	movs	r2, #1
 8005608:	429a      	cmp	r2, r3
 800560a:	db09      	blt.n	8005620 <__s2b+0x30>
 800560c:	4630      	mov	r0, r6
 800560e:	f7ff ff47 	bl	80054a0 <_Balloc>
 8005612:	b940      	cbnz	r0, 8005626 <__s2b+0x36>
 8005614:	4602      	mov	r2, r0
 8005616:	4b19      	ldr	r3, [pc, #100]	; (800567c <__s2b+0x8c>)
 8005618:	4819      	ldr	r0, [pc, #100]	; (8005680 <__s2b+0x90>)
 800561a:	21ce      	movs	r1, #206	; 0xce
 800561c:	f000 fcd2 	bl	8005fc4 <__assert_func>
 8005620:	0052      	lsls	r2, r2, #1
 8005622:	3101      	adds	r1, #1
 8005624:	e7f0      	b.n	8005608 <__s2b+0x18>
 8005626:	9b08      	ldr	r3, [sp, #32]
 8005628:	6143      	str	r3, [r0, #20]
 800562a:	2d09      	cmp	r5, #9
 800562c:	f04f 0301 	mov.w	r3, #1
 8005630:	6103      	str	r3, [r0, #16]
 8005632:	dd16      	ble.n	8005662 <__s2b+0x72>
 8005634:	f104 0909 	add.w	r9, r4, #9
 8005638:	46c8      	mov	r8, r9
 800563a:	442c      	add	r4, r5
 800563c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005640:	4601      	mov	r1, r0
 8005642:	3b30      	subs	r3, #48	; 0x30
 8005644:	220a      	movs	r2, #10
 8005646:	4630      	mov	r0, r6
 8005648:	f7ff ff8c 	bl	8005564 <__multadd>
 800564c:	45a0      	cmp	r8, r4
 800564e:	d1f5      	bne.n	800563c <__s2b+0x4c>
 8005650:	f1a5 0408 	sub.w	r4, r5, #8
 8005654:	444c      	add	r4, r9
 8005656:	1b2d      	subs	r5, r5, r4
 8005658:	1963      	adds	r3, r4, r5
 800565a:	42bb      	cmp	r3, r7
 800565c:	db04      	blt.n	8005668 <__s2b+0x78>
 800565e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005662:	340a      	adds	r4, #10
 8005664:	2509      	movs	r5, #9
 8005666:	e7f6      	b.n	8005656 <__s2b+0x66>
 8005668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800566c:	4601      	mov	r1, r0
 800566e:	3b30      	subs	r3, #48	; 0x30
 8005670:	220a      	movs	r2, #10
 8005672:	4630      	mov	r0, r6
 8005674:	f7ff ff76 	bl	8005564 <__multadd>
 8005678:	e7ee      	b.n	8005658 <__s2b+0x68>
 800567a:	bf00      	nop
 800567c:	08006f40 	.word	0x08006f40
 8005680:	08006fe3 	.word	0x08006fe3

08005684 <__hi0bits>:
 8005684:	0c03      	lsrs	r3, r0, #16
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	b9d3      	cbnz	r3, 80056c0 <__hi0bits+0x3c>
 800568a:	0400      	lsls	r0, r0, #16
 800568c:	2310      	movs	r3, #16
 800568e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005692:	bf04      	itt	eq
 8005694:	0200      	lsleq	r0, r0, #8
 8005696:	3308      	addeq	r3, #8
 8005698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800569c:	bf04      	itt	eq
 800569e:	0100      	lsleq	r0, r0, #4
 80056a0:	3304      	addeq	r3, #4
 80056a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80056a6:	bf04      	itt	eq
 80056a8:	0080      	lsleq	r0, r0, #2
 80056aa:	3302      	addeq	r3, #2
 80056ac:	2800      	cmp	r0, #0
 80056ae:	db05      	blt.n	80056bc <__hi0bits+0x38>
 80056b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80056b4:	f103 0301 	add.w	r3, r3, #1
 80056b8:	bf08      	it	eq
 80056ba:	2320      	moveq	r3, #32
 80056bc:	4618      	mov	r0, r3
 80056be:	4770      	bx	lr
 80056c0:	2300      	movs	r3, #0
 80056c2:	e7e4      	b.n	800568e <__hi0bits+0xa>

080056c4 <__lo0bits>:
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	f013 0207 	ands.w	r2, r3, #7
 80056ca:	4601      	mov	r1, r0
 80056cc:	d00b      	beq.n	80056e6 <__lo0bits+0x22>
 80056ce:	07da      	lsls	r2, r3, #31
 80056d0:	d423      	bmi.n	800571a <__lo0bits+0x56>
 80056d2:	0798      	lsls	r0, r3, #30
 80056d4:	bf49      	itett	mi
 80056d6:	085b      	lsrmi	r3, r3, #1
 80056d8:	089b      	lsrpl	r3, r3, #2
 80056da:	2001      	movmi	r0, #1
 80056dc:	600b      	strmi	r3, [r1, #0]
 80056de:	bf5c      	itt	pl
 80056e0:	600b      	strpl	r3, [r1, #0]
 80056e2:	2002      	movpl	r0, #2
 80056e4:	4770      	bx	lr
 80056e6:	b298      	uxth	r0, r3
 80056e8:	b9a8      	cbnz	r0, 8005716 <__lo0bits+0x52>
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	2010      	movs	r0, #16
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	b90a      	cbnz	r2, 80056f6 <__lo0bits+0x32>
 80056f2:	3008      	adds	r0, #8
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	071a      	lsls	r2, r3, #28
 80056f8:	bf04      	itt	eq
 80056fa:	091b      	lsreq	r3, r3, #4
 80056fc:	3004      	addeq	r0, #4
 80056fe:	079a      	lsls	r2, r3, #30
 8005700:	bf04      	itt	eq
 8005702:	089b      	lsreq	r3, r3, #2
 8005704:	3002      	addeq	r0, #2
 8005706:	07da      	lsls	r2, r3, #31
 8005708:	d403      	bmi.n	8005712 <__lo0bits+0x4e>
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	f100 0001 	add.w	r0, r0, #1
 8005710:	d005      	beq.n	800571e <__lo0bits+0x5a>
 8005712:	600b      	str	r3, [r1, #0]
 8005714:	4770      	bx	lr
 8005716:	4610      	mov	r0, r2
 8005718:	e7e9      	b.n	80056ee <__lo0bits+0x2a>
 800571a:	2000      	movs	r0, #0
 800571c:	4770      	bx	lr
 800571e:	2020      	movs	r0, #32
 8005720:	4770      	bx	lr
	...

08005724 <__i2b>:
 8005724:	b510      	push	{r4, lr}
 8005726:	460c      	mov	r4, r1
 8005728:	2101      	movs	r1, #1
 800572a:	f7ff feb9 	bl	80054a0 <_Balloc>
 800572e:	4602      	mov	r2, r0
 8005730:	b928      	cbnz	r0, 800573e <__i2b+0x1a>
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <__i2b+0x24>)
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <__i2b+0x28>)
 8005736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800573a:	f000 fc43 	bl	8005fc4 <__assert_func>
 800573e:	2301      	movs	r3, #1
 8005740:	6144      	str	r4, [r0, #20]
 8005742:	6103      	str	r3, [r0, #16]
 8005744:	bd10      	pop	{r4, pc}
 8005746:	bf00      	nop
 8005748:	08006f40 	.word	0x08006f40
 800574c:	08006fe3 	.word	0x08006fe3

08005750 <__multiply>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	4691      	mov	r9, r2
 8005756:	690a      	ldr	r2, [r1, #16]
 8005758:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	bfb8      	it	lt
 8005760:	460b      	movlt	r3, r1
 8005762:	460c      	mov	r4, r1
 8005764:	bfbc      	itt	lt
 8005766:	464c      	movlt	r4, r9
 8005768:	4699      	movlt	r9, r3
 800576a:	6927      	ldr	r7, [r4, #16]
 800576c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	6861      	ldr	r1, [r4, #4]
 8005774:	eb07 060a 	add.w	r6, r7, sl
 8005778:	42b3      	cmp	r3, r6
 800577a:	b085      	sub	sp, #20
 800577c:	bfb8      	it	lt
 800577e:	3101      	addlt	r1, #1
 8005780:	f7ff fe8e 	bl	80054a0 <_Balloc>
 8005784:	b930      	cbnz	r0, 8005794 <__multiply+0x44>
 8005786:	4602      	mov	r2, r0
 8005788:	4b44      	ldr	r3, [pc, #272]	; (800589c <__multiply+0x14c>)
 800578a:	4845      	ldr	r0, [pc, #276]	; (80058a0 <__multiply+0x150>)
 800578c:	f240 115d 	movw	r1, #349	; 0x15d
 8005790:	f000 fc18 	bl	8005fc4 <__assert_func>
 8005794:	f100 0514 	add.w	r5, r0, #20
 8005798:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800579c:	462b      	mov	r3, r5
 800579e:	2200      	movs	r2, #0
 80057a0:	4543      	cmp	r3, r8
 80057a2:	d321      	bcc.n	80057e8 <__multiply+0x98>
 80057a4:	f104 0314 	add.w	r3, r4, #20
 80057a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057ac:	f109 0314 	add.w	r3, r9, #20
 80057b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80057b4:	9202      	str	r2, [sp, #8]
 80057b6:	1b3a      	subs	r2, r7, r4
 80057b8:	3a15      	subs	r2, #21
 80057ba:	f022 0203 	bic.w	r2, r2, #3
 80057be:	3204      	adds	r2, #4
 80057c0:	f104 0115 	add.w	r1, r4, #21
 80057c4:	428f      	cmp	r7, r1
 80057c6:	bf38      	it	cc
 80057c8:	2204      	movcc	r2, #4
 80057ca:	9201      	str	r2, [sp, #4]
 80057cc:	9a02      	ldr	r2, [sp, #8]
 80057ce:	9303      	str	r3, [sp, #12]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d80c      	bhi.n	80057ee <__multiply+0x9e>
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	dd03      	ble.n	80057e0 <__multiply+0x90>
 80057d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d05a      	beq.n	8005896 <__multiply+0x146>
 80057e0:	6106      	str	r6, [r0, #16]
 80057e2:	b005      	add	sp, #20
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	f843 2b04 	str.w	r2, [r3], #4
 80057ec:	e7d8      	b.n	80057a0 <__multiply+0x50>
 80057ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80057f2:	f1ba 0f00 	cmp.w	sl, #0
 80057f6:	d024      	beq.n	8005842 <__multiply+0xf2>
 80057f8:	f104 0e14 	add.w	lr, r4, #20
 80057fc:	46a9      	mov	r9, r5
 80057fe:	f04f 0c00 	mov.w	ip, #0
 8005802:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005806:	f8d9 1000 	ldr.w	r1, [r9]
 800580a:	fa1f fb82 	uxth.w	fp, r2
 800580e:	b289      	uxth	r1, r1
 8005810:	fb0a 110b 	mla	r1, sl, fp, r1
 8005814:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005818:	f8d9 2000 	ldr.w	r2, [r9]
 800581c:	4461      	add	r1, ip
 800581e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005822:	fb0a c20b 	mla	r2, sl, fp, ip
 8005826:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800582a:	b289      	uxth	r1, r1
 800582c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005830:	4577      	cmp	r7, lr
 8005832:	f849 1b04 	str.w	r1, [r9], #4
 8005836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800583a:	d8e2      	bhi.n	8005802 <__multiply+0xb2>
 800583c:	9a01      	ldr	r2, [sp, #4]
 800583e:	f845 c002 	str.w	ip, [r5, r2]
 8005842:	9a03      	ldr	r2, [sp, #12]
 8005844:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005848:	3304      	adds	r3, #4
 800584a:	f1b9 0f00 	cmp.w	r9, #0
 800584e:	d020      	beq.n	8005892 <__multiply+0x142>
 8005850:	6829      	ldr	r1, [r5, #0]
 8005852:	f104 0c14 	add.w	ip, r4, #20
 8005856:	46ae      	mov	lr, r5
 8005858:	f04f 0a00 	mov.w	sl, #0
 800585c:	f8bc b000 	ldrh.w	fp, [ip]
 8005860:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005864:	fb09 220b 	mla	r2, r9, fp, r2
 8005868:	4492      	add	sl, r2
 800586a:	b289      	uxth	r1, r1
 800586c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005870:	f84e 1b04 	str.w	r1, [lr], #4
 8005874:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005878:	f8be 1000 	ldrh.w	r1, [lr]
 800587c:	0c12      	lsrs	r2, r2, #16
 800587e:	fb09 1102 	mla	r1, r9, r2, r1
 8005882:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005886:	4567      	cmp	r7, ip
 8005888:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800588c:	d8e6      	bhi.n	800585c <__multiply+0x10c>
 800588e:	9a01      	ldr	r2, [sp, #4]
 8005890:	50a9      	str	r1, [r5, r2]
 8005892:	3504      	adds	r5, #4
 8005894:	e79a      	b.n	80057cc <__multiply+0x7c>
 8005896:	3e01      	subs	r6, #1
 8005898:	e79c      	b.n	80057d4 <__multiply+0x84>
 800589a:	bf00      	nop
 800589c:	08006f40 	.word	0x08006f40
 80058a0:	08006fe3 	.word	0x08006fe3

080058a4 <__pow5mult>:
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4615      	mov	r5, r2
 80058aa:	f012 0203 	ands.w	r2, r2, #3
 80058ae:	4606      	mov	r6, r0
 80058b0:	460f      	mov	r7, r1
 80058b2:	d007      	beq.n	80058c4 <__pow5mult+0x20>
 80058b4:	4c25      	ldr	r4, [pc, #148]	; (800594c <__pow5mult+0xa8>)
 80058b6:	3a01      	subs	r2, #1
 80058b8:	2300      	movs	r3, #0
 80058ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058be:	f7ff fe51 	bl	8005564 <__multadd>
 80058c2:	4607      	mov	r7, r0
 80058c4:	10ad      	asrs	r5, r5, #2
 80058c6:	d03d      	beq.n	8005944 <__pow5mult+0xa0>
 80058c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058ca:	b97c      	cbnz	r4, 80058ec <__pow5mult+0x48>
 80058cc:	2010      	movs	r0, #16
 80058ce:	f000 fba9 	bl	8006024 <malloc>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6270      	str	r0, [r6, #36]	; 0x24
 80058d6:	b928      	cbnz	r0, 80058e4 <__pow5mult+0x40>
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <__pow5mult+0xac>)
 80058da:	481e      	ldr	r0, [pc, #120]	; (8005954 <__pow5mult+0xb0>)
 80058dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80058e0:	f000 fb70 	bl	8005fc4 <__assert_func>
 80058e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058e8:	6004      	str	r4, [r0, #0]
 80058ea:	60c4      	str	r4, [r0, #12]
 80058ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80058f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058f4:	b94c      	cbnz	r4, 800590a <__pow5mult+0x66>
 80058f6:	f240 2171 	movw	r1, #625	; 0x271
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff ff12 	bl	8005724 <__i2b>
 8005900:	2300      	movs	r3, #0
 8005902:	f8c8 0008 	str.w	r0, [r8, #8]
 8005906:	4604      	mov	r4, r0
 8005908:	6003      	str	r3, [r0, #0]
 800590a:	f04f 0900 	mov.w	r9, #0
 800590e:	07eb      	lsls	r3, r5, #31
 8005910:	d50a      	bpl.n	8005928 <__pow5mult+0x84>
 8005912:	4639      	mov	r1, r7
 8005914:	4622      	mov	r2, r4
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ff1a 	bl	8005750 <__multiply>
 800591c:	4639      	mov	r1, r7
 800591e:	4680      	mov	r8, r0
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff fdfd 	bl	8005520 <_Bfree>
 8005926:	4647      	mov	r7, r8
 8005928:	106d      	asrs	r5, r5, #1
 800592a:	d00b      	beq.n	8005944 <__pow5mult+0xa0>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	b938      	cbnz	r0, 8005940 <__pow5mult+0x9c>
 8005930:	4622      	mov	r2, r4
 8005932:	4621      	mov	r1, r4
 8005934:	4630      	mov	r0, r6
 8005936:	f7ff ff0b 	bl	8005750 <__multiply>
 800593a:	6020      	str	r0, [r4, #0]
 800593c:	f8c0 9000 	str.w	r9, [r0]
 8005940:	4604      	mov	r4, r0
 8005942:	e7e4      	b.n	800590e <__pow5mult+0x6a>
 8005944:	4638      	mov	r0, r7
 8005946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594a:	bf00      	nop
 800594c:	08007130 	.word	0x08007130
 8005950:	08006fcc 	.word	0x08006fcc
 8005954:	08006fe3 	.word	0x08006fe3

08005958 <__lshift>:
 8005958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	460c      	mov	r4, r1
 800595e:	6849      	ldr	r1, [r1, #4]
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	4607      	mov	r7, r0
 800596a:	4691      	mov	r9, r2
 800596c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005970:	f108 0601 	add.w	r6, r8, #1
 8005974:	42b3      	cmp	r3, r6
 8005976:	db0b      	blt.n	8005990 <__lshift+0x38>
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff fd91 	bl	80054a0 <_Balloc>
 800597e:	4605      	mov	r5, r0
 8005980:	b948      	cbnz	r0, 8005996 <__lshift+0x3e>
 8005982:	4602      	mov	r2, r0
 8005984:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <__lshift+0xd8>)
 8005986:	482b      	ldr	r0, [pc, #172]	; (8005a34 <__lshift+0xdc>)
 8005988:	f240 11d9 	movw	r1, #473	; 0x1d9
 800598c:	f000 fb1a 	bl	8005fc4 <__assert_func>
 8005990:	3101      	adds	r1, #1
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	e7ee      	b.n	8005974 <__lshift+0x1c>
 8005996:	2300      	movs	r3, #0
 8005998:	f100 0114 	add.w	r1, r0, #20
 800599c:	f100 0210 	add.w	r2, r0, #16
 80059a0:	4618      	mov	r0, r3
 80059a2:	4553      	cmp	r3, sl
 80059a4:	db37      	blt.n	8005a16 <__lshift+0xbe>
 80059a6:	6920      	ldr	r0, [r4, #16]
 80059a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059ac:	f104 0314 	add.w	r3, r4, #20
 80059b0:	f019 091f 	ands.w	r9, r9, #31
 80059b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80059bc:	d02f      	beq.n	8005a1e <__lshift+0xc6>
 80059be:	f1c9 0e20 	rsb	lr, r9, #32
 80059c2:	468a      	mov	sl, r1
 80059c4:	f04f 0c00 	mov.w	ip, #0
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	fa02 f209 	lsl.w	r2, r2, r9
 80059ce:	ea42 020c 	orr.w	r2, r2, ip
 80059d2:	f84a 2b04 	str.w	r2, [sl], #4
 80059d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059da:	4298      	cmp	r0, r3
 80059dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80059e0:	d8f2      	bhi.n	80059c8 <__lshift+0x70>
 80059e2:	1b03      	subs	r3, r0, r4
 80059e4:	3b15      	subs	r3, #21
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	3304      	adds	r3, #4
 80059ec:	f104 0215 	add.w	r2, r4, #21
 80059f0:	4290      	cmp	r0, r2
 80059f2:	bf38      	it	cc
 80059f4:	2304      	movcc	r3, #4
 80059f6:	f841 c003 	str.w	ip, [r1, r3]
 80059fa:	f1bc 0f00 	cmp.w	ip, #0
 80059fe:	d001      	beq.n	8005a04 <__lshift+0xac>
 8005a00:	f108 0602 	add.w	r6, r8, #2
 8005a04:	3e01      	subs	r6, #1
 8005a06:	4638      	mov	r0, r7
 8005a08:	612e      	str	r6, [r5, #16]
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	f7ff fd88 	bl	8005520 <_Bfree>
 8005a10:	4628      	mov	r0, r5
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a16:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	e7c1      	b.n	80059a2 <__lshift+0x4a>
 8005a1e:	3904      	subs	r1, #4
 8005a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a24:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a28:	4298      	cmp	r0, r3
 8005a2a:	d8f9      	bhi.n	8005a20 <__lshift+0xc8>
 8005a2c:	e7ea      	b.n	8005a04 <__lshift+0xac>
 8005a2e:	bf00      	nop
 8005a30:	08006f40 	.word	0x08006f40
 8005a34:	08006fe3 	.word	0x08006fe3

08005a38 <__mcmp>:
 8005a38:	b530      	push	{r4, r5, lr}
 8005a3a:	6902      	ldr	r2, [r0, #16]
 8005a3c:	690c      	ldr	r4, [r1, #16]
 8005a3e:	1b12      	subs	r2, r2, r4
 8005a40:	d10e      	bne.n	8005a60 <__mcmp+0x28>
 8005a42:	f100 0314 	add.w	r3, r0, #20
 8005a46:	3114      	adds	r1, #20
 8005a48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005a54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005a58:	42a5      	cmp	r5, r4
 8005a5a:	d003      	beq.n	8005a64 <__mcmp+0x2c>
 8005a5c:	d305      	bcc.n	8005a6a <__mcmp+0x32>
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4610      	mov	r0, r2
 8005a62:	bd30      	pop	{r4, r5, pc}
 8005a64:	4283      	cmp	r3, r0
 8005a66:	d3f3      	bcc.n	8005a50 <__mcmp+0x18>
 8005a68:	e7fa      	b.n	8005a60 <__mcmp+0x28>
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	e7f7      	b.n	8005a60 <__mcmp+0x28>

08005a70 <__mdiff>:
 8005a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	460c      	mov	r4, r1
 8005a76:	4606      	mov	r6, r0
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4690      	mov	r8, r2
 8005a7e:	f7ff ffdb 	bl	8005a38 <__mcmp>
 8005a82:	1e05      	subs	r5, r0, #0
 8005a84:	d110      	bne.n	8005aa8 <__mdiff+0x38>
 8005a86:	4629      	mov	r1, r5
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff fd09 	bl	80054a0 <_Balloc>
 8005a8e:	b930      	cbnz	r0, 8005a9e <__mdiff+0x2e>
 8005a90:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <__mdiff+0x10c>)
 8005a92:	4602      	mov	r2, r0
 8005a94:	f240 2132 	movw	r1, #562	; 0x232
 8005a98:	4839      	ldr	r0, [pc, #228]	; (8005b80 <__mdiff+0x110>)
 8005a9a:	f000 fa93 	bl	8005fc4 <__assert_func>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	bfa4      	itt	ge
 8005aaa:	4643      	movge	r3, r8
 8005aac:	46a0      	movge	r8, r4
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ab4:	bfa6      	itte	ge
 8005ab6:	461c      	movge	r4, r3
 8005ab8:	2500      	movge	r5, #0
 8005aba:	2501      	movlt	r5, #1
 8005abc:	f7ff fcf0 	bl	80054a0 <_Balloc>
 8005ac0:	b920      	cbnz	r0, 8005acc <__mdiff+0x5c>
 8005ac2:	4b2e      	ldr	r3, [pc, #184]	; (8005b7c <__mdiff+0x10c>)
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005aca:	e7e5      	b.n	8005a98 <__mdiff+0x28>
 8005acc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ad0:	6926      	ldr	r6, [r4, #16]
 8005ad2:	60c5      	str	r5, [r0, #12]
 8005ad4:	f104 0914 	add.w	r9, r4, #20
 8005ad8:	f108 0514 	add.w	r5, r8, #20
 8005adc:	f100 0e14 	add.w	lr, r0, #20
 8005ae0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ae4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ae8:	f108 0210 	add.w	r2, r8, #16
 8005aec:	46f2      	mov	sl, lr
 8005aee:	2100      	movs	r1, #0
 8005af0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005af4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005af8:	fa1f f883 	uxth.w	r8, r3
 8005afc:	fa11 f18b 	uxtah	r1, r1, fp
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	eba1 0808 	sub.w	r8, r1, r8
 8005b06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b0e:	fa1f f888 	uxth.w	r8, r8
 8005b12:	1419      	asrs	r1, r3, #16
 8005b14:	454e      	cmp	r6, r9
 8005b16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b1a:	f84a 3b04 	str.w	r3, [sl], #4
 8005b1e:	d8e7      	bhi.n	8005af0 <__mdiff+0x80>
 8005b20:	1b33      	subs	r3, r6, r4
 8005b22:	3b15      	subs	r3, #21
 8005b24:	f023 0303 	bic.w	r3, r3, #3
 8005b28:	3304      	adds	r3, #4
 8005b2a:	3415      	adds	r4, #21
 8005b2c:	42a6      	cmp	r6, r4
 8005b2e:	bf38      	it	cc
 8005b30:	2304      	movcc	r3, #4
 8005b32:	441d      	add	r5, r3
 8005b34:	4473      	add	r3, lr
 8005b36:	469e      	mov	lr, r3
 8005b38:	462e      	mov	r6, r5
 8005b3a:	4566      	cmp	r6, ip
 8005b3c:	d30e      	bcc.n	8005b5c <__mdiff+0xec>
 8005b3e:	f10c 0203 	add.w	r2, ip, #3
 8005b42:	1b52      	subs	r2, r2, r5
 8005b44:	f022 0203 	bic.w	r2, r2, #3
 8005b48:	3d03      	subs	r5, #3
 8005b4a:	45ac      	cmp	ip, r5
 8005b4c:	bf38      	it	cc
 8005b4e:	2200      	movcc	r2, #0
 8005b50:	441a      	add	r2, r3
 8005b52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005b56:	b17b      	cbz	r3, 8005b78 <__mdiff+0x108>
 8005b58:	6107      	str	r7, [r0, #16]
 8005b5a:	e7a3      	b.n	8005aa4 <__mdiff+0x34>
 8005b5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005b60:	fa11 f288 	uxtah	r2, r1, r8
 8005b64:	1414      	asrs	r4, r2, #16
 8005b66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b70:	f84e 2b04 	str.w	r2, [lr], #4
 8005b74:	1421      	asrs	r1, r4, #16
 8005b76:	e7e0      	b.n	8005b3a <__mdiff+0xca>
 8005b78:	3f01      	subs	r7, #1
 8005b7a:	e7ea      	b.n	8005b52 <__mdiff+0xe2>
 8005b7c:	08006f40 	.word	0x08006f40
 8005b80:	08006fe3 	.word	0x08006fe3

08005b84 <__ulp>:
 8005b84:	b082      	sub	sp, #8
 8005b86:	ed8d 0b00 	vstr	d0, [sp]
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	4912      	ldr	r1, [pc, #72]	; (8005bd8 <__ulp+0x54>)
 8005b8e:	4019      	ands	r1, r3
 8005b90:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005b94:	2900      	cmp	r1, #0
 8005b96:	dd05      	ble.n	8005ba4 <__ulp+0x20>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	ec43 2b10 	vmov	d0, r2, r3
 8005ba0:	b002      	add	sp, #8
 8005ba2:	4770      	bx	lr
 8005ba4:	4249      	negs	r1, r1
 8005ba6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005baa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	da04      	bge.n	8005bc2 <__ulp+0x3e>
 8005bb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005bbc:	fa41 f300 	asr.w	r3, r1, r0
 8005bc0:	e7ec      	b.n	8005b9c <__ulp+0x18>
 8005bc2:	f1a0 0114 	sub.w	r1, r0, #20
 8005bc6:	291e      	cmp	r1, #30
 8005bc8:	bfda      	itte	le
 8005bca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005bce:	fa20 f101 	lsrle.w	r1, r0, r1
 8005bd2:	2101      	movgt	r1, #1
 8005bd4:	460a      	mov	r2, r1
 8005bd6:	e7e1      	b.n	8005b9c <__ulp+0x18>
 8005bd8:	7ff00000 	.word	0x7ff00000

08005bdc <__b2d>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	6905      	ldr	r5, [r0, #16]
 8005be0:	f100 0714 	add.w	r7, r0, #20
 8005be4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005be8:	1f2e      	subs	r6, r5, #4
 8005bea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff fd48 	bl	8005684 <__hi0bits>
 8005bf4:	f1c0 0320 	rsb	r3, r0, #32
 8005bf8:	280a      	cmp	r0, #10
 8005bfa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005c78 <__b2d+0x9c>
 8005bfe:	600b      	str	r3, [r1, #0]
 8005c00:	dc14      	bgt.n	8005c2c <__b2d+0x50>
 8005c02:	f1c0 0e0b 	rsb	lr, r0, #11
 8005c06:	fa24 f10e 	lsr.w	r1, r4, lr
 8005c0a:	42b7      	cmp	r7, r6
 8005c0c:	ea41 030c 	orr.w	r3, r1, ip
 8005c10:	bf34      	ite	cc
 8005c12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005c16:	2100      	movcs	r1, #0
 8005c18:	3015      	adds	r0, #21
 8005c1a:	fa04 f000 	lsl.w	r0, r4, r0
 8005c1e:	fa21 f10e 	lsr.w	r1, r1, lr
 8005c22:	ea40 0201 	orr.w	r2, r0, r1
 8005c26:	ec43 2b10 	vmov	d0, r2, r3
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2c:	42b7      	cmp	r7, r6
 8005c2e:	bf3a      	itte	cc
 8005c30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005c34:	f1a5 0608 	subcc.w	r6, r5, #8
 8005c38:	2100      	movcs	r1, #0
 8005c3a:	380b      	subs	r0, #11
 8005c3c:	d017      	beq.n	8005c6e <__b2d+0x92>
 8005c3e:	f1c0 0c20 	rsb	ip, r0, #32
 8005c42:	fa04 f500 	lsl.w	r5, r4, r0
 8005c46:	42be      	cmp	r6, r7
 8005c48:	fa21 f40c 	lsr.w	r4, r1, ip
 8005c4c:	ea45 0504 	orr.w	r5, r5, r4
 8005c50:	bf8c      	ite	hi
 8005c52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005c56:	2400      	movls	r4, #0
 8005c58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005c5c:	fa01 f000 	lsl.w	r0, r1, r0
 8005c60:	fa24 f40c 	lsr.w	r4, r4, ip
 8005c64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c68:	ea40 0204 	orr.w	r2, r0, r4
 8005c6c:	e7db      	b.n	8005c26 <__b2d+0x4a>
 8005c6e:	ea44 030c 	orr.w	r3, r4, ip
 8005c72:	460a      	mov	r2, r1
 8005c74:	e7d7      	b.n	8005c26 <__b2d+0x4a>
 8005c76:	bf00      	nop
 8005c78:	3ff00000 	.word	0x3ff00000

08005c7c <__d2b>:
 8005c7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	4689      	mov	r9, r1
 8005c82:	2101      	movs	r1, #1
 8005c84:	ec57 6b10 	vmov	r6, r7, d0
 8005c88:	4690      	mov	r8, r2
 8005c8a:	f7ff fc09 	bl	80054a0 <_Balloc>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	b930      	cbnz	r0, 8005ca0 <__d2b+0x24>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <__d2b+0xb0>)
 8005c96:	4826      	ldr	r0, [pc, #152]	; (8005d30 <__d2b+0xb4>)
 8005c98:	f240 310a 	movw	r1, #778	; 0x30a
 8005c9c:	f000 f992 	bl	8005fc4 <__assert_func>
 8005ca0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ca4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ca8:	bb35      	cbnz	r5, 8005cf8 <__d2b+0x7c>
 8005caa:	2e00      	cmp	r6, #0
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	d028      	beq.n	8005d02 <__d2b+0x86>
 8005cb0:	4668      	mov	r0, sp
 8005cb2:	9600      	str	r6, [sp, #0]
 8005cb4:	f7ff fd06 	bl	80056c4 <__lo0bits>
 8005cb8:	9900      	ldr	r1, [sp, #0]
 8005cba:	b300      	cbz	r0, 8005cfe <__d2b+0x82>
 8005cbc:	9a01      	ldr	r2, [sp, #4]
 8005cbe:	f1c0 0320 	rsb	r3, r0, #32
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	40c2      	lsrs	r2, r0
 8005cca:	6163      	str	r3, [r4, #20]
 8005ccc:	9201      	str	r2, [sp, #4]
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	61a3      	str	r3, [r4, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf14      	ite	ne
 8005cd6:	2202      	movne	r2, #2
 8005cd8:	2201      	moveq	r2, #1
 8005cda:	6122      	str	r2, [r4, #16]
 8005cdc:	b1d5      	cbz	r5, 8005d14 <__d2b+0x98>
 8005cde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ce2:	4405      	add	r5, r0
 8005ce4:	f8c9 5000 	str.w	r5, [r9]
 8005ce8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cec:	f8c8 0000 	str.w	r0, [r8]
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	b003      	add	sp, #12
 8005cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cfc:	e7d5      	b.n	8005caa <__d2b+0x2e>
 8005cfe:	6161      	str	r1, [r4, #20]
 8005d00:	e7e5      	b.n	8005cce <__d2b+0x52>
 8005d02:	a801      	add	r0, sp, #4
 8005d04:	f7ff fcde 	bl	80056c4 <__lo0bits>
 8005d08:	9b01      	ldr	r3, [sp, #4]
 8005d0a:	6163      	str	r3, [r4, #20]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	6122      	str	r2, [r4, #16]
 8005d10:	3020      	adds	r0, #32
 8005d12:	e7e3      	b.n	8005cdc <__d2b+0x60>
 8005d14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d1c:	f8c9 0000 	str.w	r0, [r9]
 8005d20:	6918      	ldr	r0, [r3, #16]
 8005d22:	f7ff fcaf 	bl	8005684 <__hi0bits>
 8005d26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d2a:	e7df      	b.n	8005cec <__d2b+0x70>
 8005d2c:	08006f40 	.word	0x08006f40
 8005d30:	08006fe3 	.word	0x08006fe3

08005d34 <__ratio>:
 8005d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4688      	mov	r8, r1
 8005d3a:	4669      	mov	r1, sp
 8005d3c:	4681      	mov	r9, r0
 8005d3e:	f7ff ff4d 	bl	8005bdc <__b2d>
 8005d42:	a901      	add	r1, sp, #4
 8005d44:	4640      	mov	r0, r8
 8005d46:	ec55 4b10 	vmov	r4, r5, d0
 8005d4a:	f7ff ff47 	bl	8005bdc <__b2d>
 8005d4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005d56:	eba3 0c02 	sub.w	ip, r3, r2
 8005d5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005d64:	ec51 0b10 	vmov	r0, r1, d0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfd6      	itet	le
 8005d6c:	460a      	movle	r2, r1
 8005d6e:	462a      	movgt	r2, r5
 8005d70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005d74:	468b      	mov	fp, r1
 8005d76:	462f      	mov	r7, r5
 8005d78:	bfd4      	ite	le
 8005d7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005d7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005d82:	4620      	mov	r0, r4
 8005d84:	ee10 2a10 	vmov	r2, s0
 8005d88:	465b      	mov	r3, fp
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	f7fa fd6e 	bl	800086c <__aeabi_ddiv>
 8005d90:	ec41 0b10 	vmov	d0, r0, r1
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d9a <__copybits>:
 8005d9a:	3901      	subs	r1, #1
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	1149      	asrs	r1, r1, #5
 8005da0:	6914      	ldr	r4, [r2, #16]
 8005da2:	3101      	adds	r1, #1
 8005da4:	f102 0314 	add.w	r3, r2, #20
 8005da8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005dac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005db0:	1f05      	subs	r5, r0, #4
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	d30c      	bcc.n	8005dd0 <__copybits+0x36>
 8005db6:	1aa3      	subs	r3, r4, r2
 8005db8:	3b11      	subs	r3, #17
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	3211      	adds	r2, #17
 8005dc0:	42a2      	cmp	r2, r4
 8005dc2:	bf88      	it	hi
 8005dc4:	2300      	movhi	r3, #0
 8005dc6:	4418      	add	r0, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4288      	cmp	r0, r1
 8005dcc:	d305      	bcc.n	8005dda <__copybits+0x40>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	f853 6b04 	ldr.w	r6, [r3], #4
 8005dd4:	f845 6f04 	str.w	r6, [r5, #4]!
 8005dd8:	e7eb      	b.n	8005db2 <__copybits+0x18>
 8005dda:	f840 3b04 	str.w	r3, [r0], #4
 8005dde:	e7f4      	b.n	8005dca <__copybits+0x30>

08005de0 <__any_on>:
 8005de0:	f100 0214 	add.w	r2, r0, #20
 8005de4:	6900      	ldr	r0, [r0, #16]
 8005de6:	114b      	asrs	r3, r1, #5
 8005de8:	4298      	cmp	r0, r3
 8005dea:	b510      	push	{r4, lr}
 8005dec:	db11      	blt.n	8005e12 <__any_on+0x32>
 8005dee:	dd0a      	ble.n	8005e06 <__any_on+0x26>
 8005df0:	f011 011f 	ands.w	r1, r1, #31
 8005df4:	d007      	beq.n	8005e06 <__any_on+0x26>
 8005df6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005dfa:	fa24 f001 	lsr.w	r0, r4, r1
 8005dfe:	fa00 f101 	lsl.w	r1, r0, r1
 8005e02:	428c      	cmp	r4, r1
 8005e04:	d10b      	bne.n	8005e1e <__any_on+0x3e>
 8005e06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d803      	bhi.n	8005e16 <__any_on+0x36>
 8005e0e:	2000      	movs	r0, #0
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	4603      	mov	r3, r0
 8005e14:	e7f7      	b.n	8005e06 <__any_on+0x26>
 8005e16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	d0f5      	beq.n	8005e0a <__any_on+0x2a>
 8005e1e:	2001      	movs	r0, #1
 8005e20:	e7f6      	b.n	8005e10 <__any_on+0x30>

08005e22 <_calloc_r>:
 8005e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e24:	fba1 2402 	umull	r2, r4, r1, r2
 8005e28:	b94c      	cbnz	r4, 8005e3e <_calloc_r+0x1c>
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	9201      	str	r2, [sp, #4]
 8005e2e:	f000 f82f 	bl	8005e90 <_malloc_r>
 8005e32:	9a01      	ldr	r2, [sp, #4]
 8005e34:	4605      	mov	r5, r0
 8005e36:	b930      	cbnz	r0, 8005e46 <_calloc_r+0x24>
 8005e38:	4628      	mov	r0, r5
 8005e3a:	b003      	add	sp, #12
 8005e3c:	bd30      	pop	{r4, r5, pc}
 8005e3e:	220c      	movs	r2, #12
 8005e40:	6002      	str	r2, [r0, #0]
 8005e42:	2500      	movs	r5, #0
 8005e44:	e7f8      	b.n	8005e38 <_calloc_r+0x16>
 8005e46:	4621      	mov	r1, r4
 8005e48:	f7fe f95c 	bl	8004104 <memset>
 8005e4c:	e7f4      	b.n	8005e38 <_calloc_r+0x16>
	...

08005e50 <sbrk_aligned>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	4e0e      	ldr	r6, [pc, #56]	; (8005e8c <sbrk_aligned+0x3c>)
 8005e54:	460c      	mov	r4, r1
 8005e56:	6831      	ldr	r1, [r6, #0]
 8005e58:	4605      	mov	r5, r0
 8005e5a:	b911      	cbnz	r1, 8005e62 <sbrk_aligned+0x12>
 8005e5c:	f000 f894 	bl	8005f88 <_sbrk_r>
 8005e60:	6030      	str	r0, [r6, #0]
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 f88f 	bl	8005f88 <_sbrk_r>
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	d00a      	beq.n	8005e84 <sbrk_aligned+0x34>
 8005e6e:	1cc4      	adds	r4, r0, #3
 8005e70:	f024 0403 	bic.w	r4, r4, #3
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d007      	beq.n	8005e88 <sbrk_aligned+0x38>
 8005e78:	1a21      	subs	r1, r4, r0
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 f884 	bl	8005f88 <_sbrk_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d101      	bne.n	8005e88 <sbrk_aligned+0x38>
 8005e84:	f04f 34ff 	mov.w	r4, #4294967295
 8005e88:	4620      	mov	r0, r4
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	20000380 	.word	0x20000380

08005e90 <_malloc_r>:
 8005e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e94:	1ccd      	adds	r5, r1, #3
 8005e96:	f025 0503 	bic.w	r5, r5, #3
 8005e9a:	3508      	adds	r5, #8
 8005e9c:	2d0c      	cmp	r5, #12
 8005e9e:	bf38      	it	cc
 8005ea0:	250c      	movcc	r5, #12
 8005ea2:	2d00      	cmp	r5, #0
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	db01      	blt.n	8005eac <_malloc_r+0x1c>
 8005ea8:	42a9      	cmp	r1, r5
 8005eaa:	d905      	bls.n	8005eb8 <_malloc_r+0x28>
 8005eac:	230c      	movs	r3, #12
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb8:	4e2e      	ldr	r6, [pc, #184]	; (8005f74 <_malloc_r+0xe4>)
 8005eba:	f000 f8bb 	bl	8006034 <__malloc_lock>
 8005ebe:	6833      	ldr	r3, [r6, #0]
 8005ec0:	461c      	mov	r4, r3
 8005ec2:	bb34      	cbnz	r4, 8005f12 <_malloc_r+0x82>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7ff ffc2 	bl	8005e50 <sbrk_aligned>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	4604      	mov	r4, r0
 8005ed0:	d14d      	bne.n	8005f6e <_malloc_r+0xde>
 8005ed2:	6834      	ldr	r4, [r6, #0]
 8005ed4:	4626      	mov	r6, r4
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	d140      	bne.n	8005f5c <_malloc_r+0xcc>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	4631      	mov	r1, r6
 8005ede:	4638      	mov	r0, r7
 8005ee0:	eb04 0803 	add.w	r8, r4, r3
 8005ee4:	f000 f850 	bl	8005f88 <_sbrk_r>
 8005ee8:	4580      	cmp	r8, r0
 8005eea:	d13a      	bne.n	8005f62 <_malloc_r+0xd2>
 8005eec:	6821      	ldr	r1, [r4, #0]
 8005eee:	3503      	adds	r5, #3
 8005ef0:	1a6d      	subs	r5, r5, r1
 8005ef2:	f025 0503 	bic.w	r5, r5, #3
 8005ef6:	3508      	adds	r5, #8
 8005ef8:	2d0c      	cmp	r5, #12
 8005efa:	bf38      	it	cc
 8005efc:	250c      	movcc	r5, #12
 8005efe:	4629      	mov	r1, r5
 8005f00:	4638      	mov	r0, r7
 8005f02:	f7ff ffa5 	bl	8005e50 <sbrk_aligned>
 8005f06:	3001      	adds	r0, #1
 8005f08:	d02b      	beq.n	8005f62 <_malloc_r+0xd2>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	442b      	add	r3, r5
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	e00e      	b.n	8005f30 <_malloc_r+0xa0>
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	1b52      	subs	r2, r2, r5
 8005f16:	d41e      	bmi.n	8005f56 <_malloc_r+0xc6>
 8005f18:	2a0b      	cmp	r2, #11
 8005f1a:	d916      	bls.n	8005f4a <_malloc_r+0xba>
 8005f1c:	1961      	adds	r1, r4, r5
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	6025      	str	r5, [r4, #0]
 8005f22:	bf18      	it	ne
 8005f24:	6059      	strne	r1, [r3, #4]
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	bf08      	it	eq
 8005f2a:	6031      	streq	r1, [r6, #0]
 8005f2c:	5162      	str	r2, [r4, r5]
 8005f2e:	604b      	str	r3, [r1, #4]
 8005f30:	4638      	mov	r0, r7
 8005f32:	f104 060b 	add.w	r6, r4, #11
 8005f36:	f000 f883 	bl	8006040 <__malloc_unlock>
 8005f3a:	f026 0607 	bic.w	r6, r6, #7
 8005f3e:	1d23      	adds	r3, r4, #4
 8005f40:	1af2      	subs	r2, r6, r3
 8005f42:	d0b6      	beq.n	8005eb2 <_malloc_r+0x22>
 8005f44:	1b9b      	subs	r3, r3, r6
 8005f46:	50a3      	str	r3, [r4, r2]
 8005f48:	e7b3      	b.n	8005eb2 <_malloc_r+0x22>
 8005f4a:	6862      	ldr	r2, [r4, #4]
 8005f4c:	42a3      	cmp	r3, r4
 8005f4e:	bf0c      	ite	eq
 8005f50:	6032      	streq	r2, [r6, #0]
 8005f52:	605a      	strne	r2, [r3, #4]
 8005f54:	e7ec      	b.n	8005f30 <_malloc_r+0xa0>
 8005f56:	4623      	mov	r3, r4
 8005f58:	6864      	ldr	r4, [r4, #4]
 8005f5a:	e7b2      	b.n	8005ec2 <_malloc_r+0x32>
 8005f5c:	4634      	mov	r4, r6
 8005f5e:	6876      	ldr	r6, [r6, #4]
 8005f60:	e7b9      	b.n	8005ed6 <_malloc_r+0x46>
 8005f62:	230c      	movs	r3, #12
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	4638      	mov	r0, r7
 8005f68:	f000 f86a 	bl	8006040 <__malloc_unlock>
 8005f6c:	e7a1      	b.n	8005eb2 <_malloc_r+0x22>
 8005f6e:	6025      	str	r5, [r4, #0]
 8005f70:	e7de      	b.n	8005f30 <_malloc_r+0xa0>
 8005f72:	bf00      	nop
 8005f74:	2000037c 	.word	0x2000037c

08005f78 <nan>:
 8005f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005f80 <nan+0x8>
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	00000000 	.word	0x00000000
 8005f84:	7ff80000 	.word	0x7ff80000

08005f88 <_sbrk_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d06      	ldr	r5, [pc, #24]	; (8005fa4 <_sbrk_r+0x1c>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	f7fc f820 	bl	8001fd8 <_sbrk>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_sbrk_r+0x1a>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_sbrk_r+0x1a>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	20000384 	.word	0x20000384

08005fa8 <__ascii_wctomb>:
 8005fa8:	b149      	cbz	r1, 8005fbe <__ascii_wctomb+0x16>
 8005faa:	2aff      	cmp	r2, #255	; 0xff
 8005fac:	bf85      	ittet	hi
 8005fae:	238a      	movhi	r3, #138	; 0x8a
 8005fb0:	6003      	strhi	r3, [r0, #0]
 8005fb2:	700a      	strbls	r2, [r1, #0]
 8005fb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005fb8:	bf98      	it	ls
 8005fba:	2001      	movls	r0, #1
 8005fbc:	4770      	bx	lr
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	4770      	bx	lr
	...

08005fc4 <__assert_func>:
 8005fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <__assert_func+0x2c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4605      	mov	r5, r0
 8005fd0:	68d8      	ldr	r0, [r3, #12]
 8005fd2:	b14c      	cbz	r4, 8005fe8 <__assert_func+0x24>
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <__assert_func+0x30>)
 8005fd6:	9100      	str	r1, [sp, #0]
 8005fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fdc:	4906      	ldr	r1, [pc, #24]	; (8005ff8 <__assert_func+0x34>)
 8005fde:	462b      	mov	r3, r5
 8005fe0:	f000 f80e 	bl	8006000 <fiprintf>
 8005fe4:	f000 fc2c 	bl	8006840 <abort>
 8005fe8:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <__assert_func+0x38>)
 8005fea:	461c      	mov	r4, r3
 8005fec:	e7f3      	b.n	8005fd6 <__assert_func+0x12>
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	0800713c 	.word	0x0800713c
 8005ff8:	08007149 	.word	0x08007149
 8005ffc:	08007177 	.word	0x08007177

08006000 <fiprintf>:
 8006000:	b40e      	push	{r1, r2, r3}
 8006002:	b503      	push	{r0, r1, lr}
 8006004:	4601      	mov	r1, r0
 8006006:	ab03      	add	r3, sp, #12
 8006008:	4805      	ldr	r0, [pc, #20]	; (8006020 <fiprintf+0x20>)
 800600a:	f853 2b04 	ldr.w	r2, [r3], #4
 800600e:	6800      	ldr	r0, [r0, #0]
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	f000 f891 	bl	8006138 <_vfiprintf_r>
 8006016:	b002      	add	sp, #8
 8006018:	f85d eb04 	ldr.w	lr, [sp], #4
 800601c:	b003      	add	sp, #12
 800601e:	4770      	bx	lr
 8006020:	2000000c 	.word	0x2000000c

08006024 <malloc>:
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <malloc+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7ff bf31 	b.w	8005e90 <_malloc_r>
 800602e:	bf00      	nop
 8006030:	2000000c 	.word	0x2000000c

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f000 bdc3 	b.w	8006bc0 <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	20000388 	.word	0x20000388

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f000 bdbe 	b.w	8006bc2 <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	20000388 	.word	0x20000388

0800604c <_free_r>:
 800604c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604e:	2900      	cmp	r1, #0
 8006050:	d044      	beq.n	80060dc <_free_r+0x90>
 8006052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f1a1 0404 	sub.w	r4, r1, #4
 800605e:	bfb8      	it	lt
 8006060:	18e4      	addlt	r4, r4, r3
 8006062:	f7ff ffe7 	bl	8006034 <__malloc_lock>
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <_free_r+0x94>)
 8006068:	9801      	ldr	r0, [sp, #4]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	b933      	cbnz	r3, 800607c <_free_r+0x30>
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	6014      	str	r4, [r2, #0]
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006078:	f7ff bfe2 	b.w	8006040 <__malloc_unlock>
 800607c:	42a3      	cmp	r3, r4
 800607e:	d908      	bls.n	8006092 <_free_r+0x46>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	1961      	adds	r1, r4, r5
 8006084:	428b      	cmp	r3, r1
 8006086:	bf01      	itttt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	e7ed      	b.n	800606e <_free_r+0x22>
 8006092:	461a      	mov	r2, r3
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b10b      	cbz	r3, 800609c <_free_r+0x50>
 8006098:	42a3      	cmp	r3, r4
 800609a:	d9fa      	bls.n	8006092 <_free_r+0x46>
 800609c:	6811      	ldr	r1, [r2, #0]
 800609e:	1855      	adds	r5, r2, r1
 80060a0:	42a5      	cmp	r5, r4
 80060a2:	d10b      	bne.n	80060bc <_free_r+0x70>
 80060a4:	6824      	ldr	r4, [r4, #0]
 80060a6:	4421      	add	r1, r4
 80060a8:	1854      	adds	r4, r2, r1
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	d1e0      	bne.n	8006072 <_free_r+0x26>
 80060b0:	681c      	ldr	r4, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	4421      	add	r1, r4
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	e7da      	b.n	8006072 <_free_r+0x26>
 80060bc:	d902      	bls.n	80060c4 <_free_r+0x78>
 80060be:	230c      	movs	r3, #12
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	e7d6      	b.n	8006072 <_free_r+0x26>
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	1961      	adds	r1, r4, r5
 80060c8:	428b      	cmp	r3, r1
 80060ca:	bf04      	itt	eq
 80060cc:	6819      	ldreq	r1, [r3, #0]
 80060ce:	685b      	ldreq	r3, [r3, #4]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	bf04      	itt	eq
 80060d4:	1949      	addeq	r1, r1, r5
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	6054      	str	r4, [r2, #4]
 80060da:	e7ca      	b.n	8006072 <_free_r+0x26>
 80060dc:	b003      	add	sp, #12
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	2000037c 	.word	0x2000037c

080060e4 <__sfputc_r>:
 80060e4:	6893      	ldr	r3, [r2, #8]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	b410      	push	{r4}
 80060ec:	6093      	str	r3, [r2, #8]
 80060ee:	da08      	bge.n	8006102 <__sfputc_r+0x1e>
 80060f0:	6994      	ldr	r4, [r2, #24]
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	db01      	blt.n	80060fa <__sfputc_r+0x16>
 80060f6:	290a      	cmp	r1, #10
 80060f8:	d103      	bne.n	8006102 <__sfputc_r+0x1e>
 80060fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060fe:	f000 badf 	b.w	80066c0 <__swbuf_r>
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	1c58      	adds	r0, r3, #1
 8006106:	6010      	str	r0, [r2, #0]
 8006108:	7019      	strb	r1, [r3, #0]
 800610a:	4608      	mov	r0, r1
 800610c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006110:	4770      	bx	lr

08006112 <__sfputs_r>:
 8006112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006114:	4606      	mov	r6, r0
 8006116:	460f      	mov	r7, r1
 8006118:	4614      	mov	r4, r2
 800611a:	18d5      	adds	r5, r2, r3
 800611c:	42ac      	cmp	r4, r5
 800611e:	d101      	bne.n	8006124 <__sfputs_r+0x12>
 8006120:	2000      	movs	r0, #0
 8006122:	e007      	b.n	8006134 <__sfputs_r+0x22>
 8006124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006128:	463a      	mov	r2, r7
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ffda 	bl	80060e4 <__sfputc_r>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d1f3      	bne.n	800611c <__sfputs_r+0xa>
 8006134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006138 <_vfiprintf_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	460d      	mov	r5, r1
 800613e:	b09d      	sub	sp, #116	; 0x74
 8006140:	4614      	mov	r4, r2
 8006142:	4698      	mov	r8, r3
 8006144:	4606      	mov	r6, r0
 8006146:	b118      	cbz	r0, 8006150 <_vfiprintf_r+0x18>
 8006148:	6983      	ldr	r3, [r0, #24]
 800614a:	b90b      	cbnz	r3, 8006150 <_vfiprintf_r+0x18>
 800614c:	f000 fc9a 	bl	8006a84 <__sinit>
 8006150:	4b89      	ldr	r3, [pc, #548]	; (8006378 <_vfiprintf_r+0x240>)
 8006152:	429d      	cmp	r5, r3
 8006154:	d11b      	bne.n	800618e <_vfiprintf_r+0x56>
 8006156:	6875      	ldr	r5, [r6, #4]
 8006158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800615a:	07d9      	lsls	r1, r3, #31
 800615c:	d405      	bmi.n	800616a <_vfiprintf_r+0x32>
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	059a      	lsls	r2, r3, #22
 8006162:	d402      	bmi.n	800616a <_vfiprintf_r+0x32>
 8006164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006166:	f000 fd2b 	bl	8006bc0 <__retarget_lock_acquire_recursive>
 800616a:	89ab      	ldrh	r3, [r5, #12]
 800616c:	071b      	lsls	r3, r3, #28
 800616e:	d501      	bpl.n	8006174 <_vfiprintf_r+0x3c>
 8006170:	692b      	ldr	r3, [r5, #16]
 8006172:	b9eb      	cbnz	r3, 80061b0 <_vfiprintf_r+0x78>
 8006174:	4629      	mov	r1, r5
 8006176:	4630      	mov	r0, r6
 8006178:	f000 faf4 	bl	8006764 <__swsetup_r>
 800617c:	b1c0      	cbz	r0, 80061b0 <_vfiprintf_r+0x78>
 800617e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006180:	07dc      	lsls	r4, r3, #31
 8006182:	d50e      	bpl.n	80061a2 <_vfiprintf_r+0x6a>
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	b01d      	add	sp, #116	; 0x74
 800618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618e:	4b7b      	ldr	r3, [pc, #492]	; (800637c <_vfiprintf_r+0x244>)
 8006190:	429d      	cmp	r5, r3
 8006192:	d101      	bne.n	8006198 <_vfiprintf_r+0x60>
 8006194:	68b5      	ldr	r5, [r6, #8]
 8006196:	e7df      	b.n	8006158 <_vfiprintf_r+0x20>
 8006198:	4b79      	ldr	r3, [pc, #484]	; (8006380 <_vfiprintf_r+0x248>)
 800619a:	429d      	cmp	r5, r3
 800619c:	bf08      	it	eq
 800619e:	68f5      	ldreq	r5, [r6, #12]
 80061a0:	e7da      	b.n	8006158 <_vfiprintf_r+0x20>
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	0598      	lsls	r0, r3, #22
 80061a6:	d4ed      	bmi.n	8006184 <_vfiprintf_r+0x4c>
 80061a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061aa:	f000 fd0a 	bl	8006bc2 <__retarget_lock_release_recursive>
 80061ae:	e7e9      	b.n	8006184 <_vfiprintf_r+0x4c>
 80061b0:	2300      	movs	r3, #0
 80061b2:	9309      	str	r3, [sp, #36]	; 0x24
 80061b4:	2320      	movs	r3, #32
 80061b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80061be:	2330      	movs	r3, #48	; 0x30
 80061c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006384 <_vfiprintf_r+0x24c>
 80061c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c8:	f04f 0901 	mov.w	r9, #1
 80061cc:	4623      	mov	r3, r4
 80061ce:	469a      	mov	sl, r3
 80061d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d4:	b10a      	cbz	r2, 80061da <_vfiprintf_r+0xa2>
 80061d6:	2a25      	cmp	r2, #37	; 0x25
 80061d8:	d1f9      	bne.n	80061ce <_vfiprintf_r+0x96>
 80061da:	ebba 0b04 	subs.w	fp, sl, r4
 80061de:	d00b      	beq.n	80061f8 <_vfiprintf_r+0xc0>
 80061e0:	465b      	mov	r3, fp
 80061e2:	4622      	mov	r2, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	4630      	mov	r0, r6
 80061e8:	f7ff ff93 	bl	8006112 <__sfputs_r>
 80061ec:	3001      	adds	r0, #1
 80061ee:	f000 80aa 	beq.w	8006346 <_vfiprintf_r+0x20e>
 80061f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f4:	445a      	add	r2, fp
 80061f6:	9209      	str	r2, [sp, #36]	; 0x24
 80061f8:	f89a 3000 	ldrb.w	r3, [sl]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80a2 	beq.w	8006346 <_vfiprintf_r+0x20e>
 8006202:	2300      	movs	r3, #0
 8006204:	f04f 32ff 	mov.w	r2, #4294967295
 8006208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800620c:	f10a 0a01 	add.w	sl, sl, #1
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006218:	931a      	str	r3, [sp, #104]	; 0x68
 800621a:	4654      	mov	r4, sl
 800621c:	2205      	movs	r2, #5
 800621e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006222:	4858      	ldr	r0, [pc, #352]	; (8006384 <_vfiprintf_r+0x24c>)
 8006224:	f7f9 ffec 	bl	8000200 <memchr>
 8006228:	9a04      	ldr	r2, [sp, #16]
 800622a:	b9d8      	cbnz	r0, 8006264 <_vfiprintf_r+0x12c>
 800622c:	06d1      	lsls	r1, r2, #27
 800622e:	bf44      	itt	mi
 8006230:	2320      	movmi	r3, #32
 8006232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006236:	0713      	lsls	r3, r2, #28
 8006238:	bf44      	itt	mi
 800623a:	232b      	movmi	r3, #43	; 0x2b
 800623c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006240:	f89a 3000 	ldrb.w	r3, [sl]
 8006244:	2b2a      	cmp	r3, #42	; 0x2a
 8006246:	d015      	beq.n	8006274 <_vfiprintf_r+0x13c>
 8006248:	9a07      	ldr	r2, [sp, #28]
 800624a:	4654      	mov	r4, sl
 800624c:	2000      	movs	r0, #0
 800624e:	f04f 0c0a 	mov.w	ip, #10
 8006252:	4621      	mov	r1, r4
 8006254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006258:	3b30      	subs	r3, #48	; 0x30
 800625a:	2b09      	cmp	r3, #9
 800625c:	d94e      	bls.n	80062fc <_vfiprintf_r+0x1c4>
 800625e:	b1b0      	cbz	r0, 800628e <_vfiprintf_r+0x156>
 8006260:	9207      	str	r2, [sp, #28]
 8006262:	e014      	b.n	800628e <_vfiprintf_r+0x156>
 8006264:	eba0 0308 	sub.w	r3, r0, r8
 8006268:	fa09 f303 	lsl.w	r3, r9, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	46a2      	mov	sl, r4
 8006272:	e7d2      	b.n	800621a <_vfiprintf_r+0xe2>
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	1d19      	adds	r1, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	9103      	str	r1, [sp, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	bfbb      	ittet	lt
 8006280:	425b      	neglt	r3, r3
 8006282:	f042 0202 	orrlt.w	r2, r2, #2
 8006286:	9307      	strge	r3, [sp, #28]
 8006288:	9307      	strlt	r3, [sp, #28]
 800628a:	bfb8      	it	lt
 800628c:	9204      	strlt	r2, [sp, #16]
 800628e:	7823      	ldrb	r3, [r4, #0]
 8006290:	2b2e      	cmp	r3, #46	; 0x2e
 8006292:	d10c      	bne.n	80062ae <_vfiprintf_r+0x176>
 8006294:	7863      	ldrb	r3, [r4, #1]
 8006296:	2b2a      	cmp	r3, #42	; 0x2a
 8006298:	d135      	bne.n	8006306 <_vfiprintf_r+0x1ce>
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	1d1a      	adds	r2, r3, #4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	9203      	str	r2, [sp, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfb8      	it	lt
 80062a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80062aa:	3402      	adds	r4, #2
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006394 <_vfiprintf_r+0x25c>
 80062b2:	7821      	ldrb	r1, [r4, #0]
 80062b4:	2203      	movs	r2, #3
 80062b6:	4650      	mov	r0, sl
 80062b8:	f7f9 ffa2 	bl	8000200 <memchr>
 80062bc:	b140      	cbz	r0, 80062d0 <_vfiprintf_r+0x198>
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	eba0 000a 	sub.w	r0, r0, sl
 80062c4:	fa03 f000 	lsl.w	r0, r3, r0
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	4303      	orrs	r3, r0
 80062cc:	3401      	adds	r4, #1
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d4:	482c      	ldr	r0, [pc, #176]	; (8006388 <_vfiprintf_r+0x250>)
 80062d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062da:	2206      	movs	r2, #6
 80062dc:	f7f9 ff90 	bl	8000200 <memchr>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d03f      	beq.n	8006364 <_vfiprintf_r+0x22c>
 80062e4:	4b29      	ldr	r3, [pc, #164]	; (800638c <_vfiprintf_r+0x254>)
 80062e6:	bb1b      	cbnz	r3, 8006330 <_vfiprintf_r+0x1f8>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	3307      	adds	r3, #7
 80062ec:	f023 0307 	bic.w	r3, r3, #7
 80062f0:	3308      	adds	r3, #8
 80062f2:	9303      	str	r3, [sp, #12]
 80062f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f6:	443b      	add	r3, r7
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	e767      	b.n	80061cc <_vfiprintf_r+0x94>
 80062fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006300:	460c      	mov	r4, r1
 8006302:	2001      	movs	r0, #1
 8006304:	e7a5      	b.n	8006252 <_vfiprintf_r+0x11a>
 8006306:	2300      	movs	r3, #0
 8006308:	3401      	adds	r4, #1
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	4619      	mov	r1, r3
 800630e:	f04f 0c0a 	mov.w	ip, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006318:	3a30      	subs	r2, #48	; 0x30
 800631a:	2a09      	cmp	r2, #9
 800631c:	d903      	bls.n	8006326 <_vfiprintf_r+0x1ee>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0c5      	beq.n	80062ae <_vfiprintf_r+0x176>
 8006322:	9105      	str	r1, [sp, #20]
 8006324:	e7c3      	b.n	80062ae <_vfiprintf_r+0x176>
 8006326:	fb0c 2101 	mla	r1, ip, r1, r2
 800632a:	4604      	mov	r4, r0
 800632c:	2301      	movs	r3, #1
 800632e:	e7f0      	b.n	8006312 <_vfiprintf_r+0x1da>
 8006330:	ab03      	add	r3, sp, #12
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	462a      	mov	r2, r5
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <_vfiprintf_r+0x258>)
 8006338:	a904      	add	r1, sp, #16
 800633a:	4630      	mov	r0, r6
 800633c:	f3af 8000 	nop.w
 8006340:	4607      	mov	r7, r0
 8006342:	1c78      	adds	r0, r7, #1
 8006344:	d1d6      	bne.n	80062f4 <_vfiprintf_r+0x1bc>
 8006346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006348:	07d9      	lsls	r1, r3, #31
 800634a:	d405      	bmi.n	8006358 <_vfiprintf_r+0x220>
 800634c:	89ab      	ldrh	r3, [r5, #12]
 800634e:	059a      	lsls	r2, r3, #22
 8006350:	d402      	bmi.n	8006358 <_vfiprintf_r+0x220>
 8006352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006354:	f000 fc35 	bl	8006bc2 <__retarget_lock_release_recursive>
 8006358:	89ab      	ldrh	r3, [r5, #12]
 800635a:	065b      	lsls	r3, r3, #25
 800635c:	f53f af12 	bmi.w	8006184 <_vfiprintf_r+0x4c>
 8006360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006362:	e711      	b.n	8006188 <_vfiprintf_r+0x50>
 8006364:	ab03      	add	r3, sp, #12
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	462a      	mov	r2, r5
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <_vfiprintf_r+0x258>)
 800636c:	a904      	add	r1, sp, #16
 800636e:	4630      	mov	r0, r6
 8006370:	f000 f880 	bl	8006474 <_printf_i>
 8006374:	e7e4      	b.n	8006340 <_vfiprintf_r+0x208>
 8006376:	bf00      	nop
 8006378:	080072cc 	.word	0x080072cc
 800637c:	080072ec 	.word	0x080072ec
 8006380:	080072ac 	.word	0x080072ac
 8006384:	08007279 	.word	0x08007279
 8006388:	08007283 	.word	0x08007283
 800638c:	00000000 	.word	0x00000000
 8006390:	08006113 	.word	0x08006113
 8006394:	0800727f 	.word	0x0800727f

08006398 <_printf_common>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	4616      	mov	r6, r2
 800639e:	4699      	mov	r9, r3
 80063a0:	688a      	ldr	r2, [r1, #8]
 80063a2:	690b      	ldr	r3, [r1, #16]
 80063a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	bfb8      	it	lt
 80063ac:	4613      	movlt	r3, r2
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063b4:	4607      	mov	r7, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	b10a      	cbz	r2, 80063be <_printf_common+0x26>
 80063ba:	3301      	adds	r3, #1
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	0699      	lsls	r1, r3, #26
 80063c2:	bf42      	ittt	mi
 80063c4:	6833      	ldrmi	r3, [r6, #0]
 80063c6:	3302      	addmi	r3, #2
 80063c8:	6033      	strmi	r3, [r6, #0]
 80063ca:	6825      	ldr	r5, [r4, #0]
 80063cc:	f015 0506 	ands.w	r5, r5, #6
 80063d0:	d106      	bne.n	80063e0 <_printf_common+0x48>
 80063d2:	f104 0a19 	add.w	sl, r4, #25
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	6832      	ldr	r2, [r6, #0]
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dc26      	bgt.n	800642e <_printf_common+0x96>
 80063e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063e4:	1e13      	subs	r3, r2, #0
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	bf18      	it	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	0692      	lsls	r2, r2, #26
 80063ee:	d42b      	bmi.n	8006448 <_printf_common+0xb0>
 80063f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f4:	4649      	mov	r1, r9
 80063f6:	4638      	mov	r0, r7
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d01e      	beq.n	800643c <_printf_common+0xa4>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	68e5      	ldr	r5, [r4, #12]
 8006402:	6832      	ldr	r2, [r6, #0]
 8006404:	f003 0306 	and.w	r3, r3, #6
 8006408:	2b04      	cmp	r3, #4
 800640a:	bf08      	it	eq
 800640c:	1aad      	subeq	r5, r5, r2
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	6922      	ldr	r2, [r4, #16]
 8006412:	bf0c      	ite	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	2500      	movne	r5, #0
 800641a:	4293      	cmp	r3, r2
 800641c:	bfc4      	itt	gt
 800641e:	1a9b      	subgt	r3, r3, r2
 8006420:	18ed      	addgt	r5, r5, r3
 8006422:	2600      	movs	r6, #0
 8006424:	341a      	adds	r4, #26
 8006426:	42b5      	cmp	r5, r6
 8006428:	d11a      	bne.n	8006460 <_printf_common+0xc8>
 800642a:	2000      	movs	r0, #0
 800642c:	e008      	b.n	8006440 <_printf_common+0xa8>
 800642e:	2301      	movs	r3, #1
 8006430:	4652      	mov	r2, sl
 8006432:	4649      	mov	r1, r9
 8006434:	4638      	mov	r0, r7
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d103      	bne.n	8006444 <_printf_common+0xac>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	3501      	adds	r5, #1
 8006446:	e7c6      	b.n	80063d6 <_printf_common+0x3e>
 8006448:	18e1      	adds	r1, r4, r3
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	2030      	movs	r0, #48	; 0x30
 800644e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006452:	4422      	add	r2, r4
 8006454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800645c:	3302      	adds	r3, #2
 800645e:	e7c7      	b.n	80063f0 <_printf_common+0x58>
 8006460:	2301      	movs	r3, #1
 8006462:	4622      	mov	r2, r4
 8006464:	4649      	mov	r1, r9
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	3001      	adds	r0, #1
 800646c:	d0e6      	beq.n	800643c <_printf_common+0xa4>
 800646e:	3601      	adds	r6, #1
 8006470:	e7d9      	b.n	8006426 <_printf_common+0x8e>
	...

08006474 <_printf_i>:
 8006474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	7e0f      	ldrb	r7, [r1, #24]
 800647a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800647c:	2f78      	cmp	r7, #120	; 0x78
 800647e:	4691      	mov	r9, r2
 8006480:	4680      	mov	r8, r0
 8006482:	460c      	mov	r4, r1
 8006484:	469a      	mov	sl, r3
 8006486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800648a:	d807      	bhi.n	800649c <_printf_i+0x28>
 800648c:	2f62      	cmp	r7, #98	; 0x62
 800648e:	d80a      	bhi.n	80064a6 <_printf_i+0x32>
 8006490:	2f00      	cmp	r7, #0
 8006492:	f000 80d8 	beq.w	8006646 <_printf_i+0x1d2>
 8006496:	2f58      	cmp	r7, #88	; 0x58
 8006498:	f000 80a3 	beq.w	80065e2 <_printf_i+0x16e>
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064a4:	e03a      	b.n	800651c <_printf_i+0xa8>
 80064a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064aa:	2b15      	cmp	r3, #21
 80064ac:	d8f6      	bhi.n	800649c <_printf_i+0x28>
 80064ae:	a101      	add	r1, pc, #4	; (adr r1, 80064b4 <_printf_i+0x40>)
 80064b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b4:	0800650d 	.word	0x0800650d
 80064b8:	08006521 	.word	0x08006521
 80064bc:	0800649d 	.word	0x0800649d
 80064c0:	0800649d 	.word	0x0800649d
 80064c4:	0800649d 	.word	0x0800649d
 80064c8:	0800649d 	.word	0x0800649d
 80064cc:	08006521 	.word	0x08006521
 80064d0:	0800649d 	.word	0x0800649d
 80064d4:	0800649d 	.word	0x0800649d
 80064d8:	0800649d 	.word	0x0800649d
 80064dc:	0800649d 	.word	0x0800649d
 80064e0:	0800662d 	.word	0x0800662d
 80064e4:	08006551 	.word	0x08006551
 80064e8:	0800660f 	.word	0x0800660f
 80064ec:	0800649d 	.word	0x0800649d
 80064f0:	0800649d 	.word	0x0800649d
 80064f4:	0800664f 	.word	0x0800664f
 80064f8:	0800649d 	.word	0x0800649d
 80064fc:	08006551 	.word	0x08006551
 8006500:	0800649d 	.word	0x0800649d
 8006504:	0800649d 	.word	0x0800649d
 8006508:	08006617 	.word	0x08006617
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	1d1a      	adds	r2, r3, #4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800651c:	2301      	movs	r3, #1
 800651e:	e0a3      	b.n	8006668 <_printf_i+0x1f4>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	6829      	ldr	r1, [r5, #0]
 8006524:	0606      	lsls	r6, r0, #24
 8006526:	f101 0304 	add.w	r3, r1, #4
 800652a:	d50a      	bpl.n	8006542 <_printf_i+0xce>
 800652c:	680e      	ldr	r6, [r1, #0]
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	2e00      	cmp	r6, #0
 8006532:	da03      	bge.n	800653c <_printf_i+0xc8>
 8006534:	232d      	movs	r3, #45	; 0x2d
 8006536:	4276      	negs	r6, r6
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653c:	485e      	ldr	r0, [pc, #376]	; (80066b8 <_printf_i+0x244>)
 800653e:	230a      	movs	r3, #10
 8006540:	e019      	b.n	8006576 <_printf_i+0x102>
 8006542:	680e      	ldr	r6, [r1, #0]
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800654a:	bf18      	it	ne
 800654c:	b236      	sxthne	r6, r6
 800654e:	e7ef      	b.n	8006530 <_printf_i+0xbc>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	1d19      	adds	r1, r3, #4
 8006556:	6029      	str	r1, [r5, #0]
 8006558:	0601      	lsls	r1, r0, #24
 800655a:	d501      	bpl.n	8006560 <_printf_i+0xec>
 800655c:	681e      	ldr	r6, [r3, #0]
 800655e:	e002      	b.n	8006566 <_printf_i+0xf2>
 8006560:	0646      	lsls	r6, r0, #25
 8006562:	d5fb      	bpl.n	800655c <_printf_i+0xe8>
 8006564:	881e      	ldrh	r6, [r3, #0]
 8006566:	4854      	ldr	r0, [pc, #336]	; (80066b8 <_printf_i+0x244>)
 8006568:	2f6f      	cmp	r7, #111	; 0x6f
 800656a:	bf0c      	ite	eq
 800656c:	2308      	moveq	r3, #8
 800656e:	230a      	movne	r3, #10
 8006570:	2100      	movs	r1, #0
 8006572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006576:	6865      	ldr	r5, [r4, #4]
 8006578:	60a5      	str	r5, [r4, #8]
 800657a:	2d00      	cmp	r5, #0
 800657c:	bfa2      	ittt	ge
 800657e:	6821      	ldrge	r1, [r4, #0]
 8006580:	f021 0104 	bicge.w	r1, r1, #4
 8006584:	6021      	strge	r1, [r4, #0]
 8006586:	b90e      	cbnz	r6, 800658c <_printf_i+0x118>
 8006588:	2d00      	cmp	r5, #0
 800658a:	d04d      	beq.n	8006628 <_printf_i+0x1b4>
 800658c:	4615      	mov	r5, r2
 800658e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006592:	fb03 6711 	mls	r7, r3, r1, r6
 8006596:	5dc7      	ldrb	r7, [r0, r7]
 8006598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800659c:	4637      	mov	r7, r6
 800659e:	42bb      	cmp	r3, r7
 80065a0:	460e      	mov	r6, r1
 80065a2:	d9f4      	bls.n	800658e <_printf_i+0x11a>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d10b      	bne.n	80065c0 <_printf_i+0x14c>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07de      	lsls	r6, r3, #31
 80065ac:	d508      	bpl.n	80065c0 <_printf_i+0x14c>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	4299      	cmp	r1, r3
 80065b4:	bfde      	ittt	le
 80065b6:	2330      	movle	r3, #48	; 0x30
 80065b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065c0:	1b52      	subs	r2, r2, r5
 80065c2:	6122      	str	r2, [r4, #16]
 80065c4:	f8cd a000 	str.w	sl, [sp]
 80065c8:	464b      	mov	r3, r9
 80065ca:	aa03      	add	r2, sp, #12
 80065cc:	4621      	mov	r1, r4
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7ff fee2 	bl	8006398 <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d14c      	bne.n	8006672 <_printf_i+0x1fe>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	b004      	add	sp, #16
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	4835      	ldr	r0, [pc, #212]	; (80066b8 <_printf_i+0x244>)
 80065e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065e8:	6829      	ldr	r1, [r5, #0]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80065f0:	6029      	str	r1, [r5, #0]
 80065f2:	061d      	lsls	r5, r3, #24
 80065f4:	d514      	bpl.n	8006620 <_printf_i+0x1ac>
 80065f6:	07df      	lsls	r7, r3, #31
 80065f8:	bf44      	itt	mi
 80065fa:	f043 0320 	orrmi.w	r3, r3, #32
 80065fe:	6023      	strmi	r3, [r4, #0]
 8006600:	b91e      	cbnz	r6, 800660a <_printf_i+0x196>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f023 0320 	bic.w	r3, r3, #32
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	2310      	movs	r3, #16
 800660c:	e7b0      	b.n	8006570 <_printf_i+0xfc>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	f043 0320 	orr.w	r3, r3, #32
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	2378      	movs	r3, #120	; 0x78
 8006618:	4828      	ldr	r0, [pc, #160]	; (80066bc <_printf_i+0x248>)
 800661a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800661e:	e7e3      	b.n	80065e8 <_printf_i+0x174>
 8006620:	0659      	lsls	r1, r3, #25
 8006622:	bf48      	it	mi
 8006624:	b2b6      	uxthmi	r6, r6
 8006626:	e7e6      	b.n	80065f6 <_printf_i+0x182>
 8006628:	4615      	mov	r5, r2
 800662a:	e7bb      	b.n	80065a4 <_printf_i+0x130>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	6826      	ldr	r6, [r4, #0]
 8006630:	6961      	ldr	r1, [r4, #20]
 8006632:	1d18      	adds	r0, r3, #4
 8006634:	6028      	str	r0, [r5, #0]
 8006636:	0635      	lsls	r5, r6, #24
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	d501      	bpl.n	8006640 <_printf_i+0x1cc>
 800663c:	6019      	str	r1, [r3, #0]
 800663e:	e002      	b.n	8006646 <_printf_i+0x1d2>
 8006640:	0670      	lsls	r0, r6, #25
 8006642:	d5fb      	bpl.n	800663c <_printf_i+0x1c8>
 8006644:	8019      	strh	r1, [r3, #0]
 8006646:	2300      	movs	r3, #0
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	4615      	mov	r5, r2
 800664c:	e7ba      	b.n	80065c4 <_printf_i+0x150>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	602a      	str	r2, [r5, #0]
 8006654:	681d      	ldr	r5, [r3, #0]
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	2100      	movs	r1, #0
 800665a:	4628      	mov	r0, r5
 800665c:	f7f9 fdd0 	bl	8000200 <memchr>
 8006660:	b108      	cbz	r0, 8006666 <_printf_i+0x1f2>
 8006662:	1b40      	subs	r0, r0, r5
 8006664:	6060      	str	r0, [r4, #4]
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	2300      	movs	r3, #0
 800666c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006670:	e7a8      	b.n	80065c4 <_printf_i+0x150>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	462a      	mov	r2, r5
 8006676:	4649      	mov	r1, r9
 8006678:	4640      	mov	r0, r8
 800667a:	47d0      	blx	sl
 800667c:	3001      	adds	r0, #1
 800667e:	d0ab      	beq.n	80065d8 <_printf_i+0x164>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	079b      	lsls	r3, r3, #30
 8006684:	d413      	bmi.n	80066ae <_printf_i+0x23a>
 8006686:	68e0      	ldr	r0, [r4, #12]
 8006688:	9b03      	ldr	r3, [sp, #12]
 800668a:	4298      	cmp	r0, r3
 800668c:	bfb8      	it	lt
 800668e:	4618      	movlt	r0, r3
 8006690:	e7a4      	b.n	80065dc <_printf_i+0x168>
 8006692:	2301      	movs	r3, #1
 8006694:	4632      	mov	r2, r6
 8006696:	4649      	mov	r1, r9
 8006698:	4640      	mov	r0, r8
 800669a:	47d0      	blx	sl
 800669c:	3001      	adds	r0, #1
 800669e:	d09b      	beq.n	80065d8 <_printf_i+0x164>
 80066a0:	3501      	adds	r5, #1
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	9903      	ldr	r1, [sp, #12]
 80066a6:	1a5b      	subs	r3, r3, r1
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	dcf2      	bgt.n	8006692 <_printf_i+0x21e>
 80066ac:	e7eb      	b.n	8006686 <_printf_i+0x212>
 80066ae:	2500      	movs	r5, #0
 80066b0:	f104 0619 	add.w	r6, r4, #25
 80066b4:	e7f5      	b.n	80066a2 <_printf_i+0x22e>
 80066b6:	bf00      	nop
 80066b8:	0800728a 	.word	0x0800728a
 80066bc:	0800729b 	.word	0x0800729b

080066c0 <__swbuf_r>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	460e      	mov	r6, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	4605      	mov	r5, r0
 80066c8:	b118      	cbz	r0, 80066d2 <__swbuf_r+0x12>
 80066ca:	6983      	ldr	r3, [r0, #24]
 80066cc:	b90b      	cbnz	r3, 80066d2 <__swbuf_r+0x12>
 80066ce:	f000 f9d9 	bl	8006a84 <__sinit>
 80066d2:	4b21      	ldr	r3, [pc, #132]	; (8006758 <__swbuf_r+0x98>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	d12b      	bne.n	8006730 <__swbuf_r+0x70>
 80066d8:	686c      	ldr	r4, [r5, #4]
 80066da:	69a3      	ldr	r3, [r4, #24]
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	071a      	lsls	r2, r3, #28
 80066e2:	d52f      	bpl.n	8006744 <__swbuf_r+0x84>
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	b36b      	cbz	r3, 8006744 <__swbuf_r+0x84>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	1ac0      	subs	r0, r0, r3
 80066ee:	6963      	ldr	r3, [r4, #20]
 80066f0:	b2f6      	uxtb	r6, r6
 80066f2:	4283      	cmp	r3, r0
 80066f4:	4637      	mov	r7, r6
 80066f6:	dc04      	bgt.n	8006702 <__swbuf_r+0x42>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 f92e 	bl	800695c <_fflush_r>
 8006700:	bb30      	cbnz	r0, 8006750 <__swbuf_r+0x90>
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	3b01      	subs	r3, #1
 8006706:	60a3      	str	r3, [r4, #8]
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	701e      	strb	r6, [r3, #0]
 8006710:	6963      	ldr	r3, [r4, #20]
 8006712:	3001      	adds	r0, #1
 8006714:	4283      	cmp	r3, r0
 8006716:	d004      	beq.n	8006722 <__swbuf_r+0x62>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	07db      	lsls	r3, r3, #31
 800671c:	d506      	bpl.n	800672c <__swbuf_r+0x6c>
 800671e:	2e0a      	cmp	r6, #10
 8006720:	d104      	bne.n	800672c <__swbuf_r+0x6c>
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f919 	bl	800695c <_fflush_r>
 800672a:	b988      	cbnz	r0, 8006750 <__swbuf_r+0x90>
 800672c:	4638      	mov	r0, r7
 800672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <__swbuf_r+0x9c>)
 8006732:	429c      	cmp	r4, r3
 8006734:	d101      	bne.n	800673a <__swbuf_r+0x7a>
 8006736:	68ac      	ldr	r4, [r5, #8]
 8006738:	e7cf      	b.n	80066da <__swbuf_r+0x1a>
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <__swbuf_r+0xa0>)
 800673c:	429c      	cmp	r4, r3
 800673e:	bf08      	it	eq
 8006740:	68ec      	ldreq	r4, [r5, #12]
 8006742:	e7ca      	b.n	80066da <__swbuf_r+0x1a>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f80c 	bl	8006764 <__swsetup_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0cb      	beq.n	80066e8 <__swbuf_r+0x28>
 8006750:	f04f 37ff 	mov.w	r7, #4294967295
 8006754:	e7ea      	b.n	800672c <__swbuf_r+0x6c>
 8006756:	bf00      	nop
 8006758:	080072cc 	.word	0x080072cc
 800675c:	080072ec 	.word	0x080072ec
 8006760:	080072ac 	.word	0x080072ac

08006764 <__swsetup_r>:
 8006764:	4b32      	ldr	r3, [pc, #200]	; (8006830 <__swsetup_r+0xcc>)
 8006766:	b570      	push	{r4, r5, r6, lr}
 8006768:	681d      	ldr	r5, [r3, #0]
 800676a:	4606      	mov	r6, r0
 800676c:	460c      	mov	r4, r1
 800676e:	b125      	cbz	r5, 800677a <__swsetup_r+0x16>
 8006770:	69ab      	ldr	r3, [r5, #24]
 8006772:	b913      	cbnz	r3, 800677a <__swsetup_r+0x16>
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f985 	bl	8006a84 <__sinit>
 800677a:	4b2e      	ldr	r3, [pc, #184]	; (8006834 <__swsetup_r+0xd0>)
 800677c:	429c      	cmp	r4, r3
 800677e:	d10f      	bne.n	80067a0 <__swsetup_r+0x3c>
 8006780:	686c      	ldr	r4, [r5, #4]
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006788:	0719      	lsls	r1, r3, #28
 800678a:	d42c      	bmi.n	80067e6 <__swsetup_r+0x82>
 800678c:	06dd      	lsls	r5, r3, #27
 800678e:	d411      	bmi.n	80067b4 <__swsetup_r+0x50>
 8006790:	2309      	movs	r3, #9
 8006792:	6033      	str	r3, [r6, #0]
 8006794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006798:	81a3      	strh	r3, [r4, #12]
 800679a:	f04f 30ff 	mov.w	r0, #4294967295
 800679e:	e03e      	b.n	800681e <__swsetup_r+0xba>
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <__swsetup_r+0xd4>)
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d101      	bne.n	80067aa <__swsetup_r+0x46>
 80067a6:	68ac      	ldr	r4, [r5, #8]
 80067a8:	e7eb      	b.n	8006782 <__swsetup_r+0x1e>
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <__swsetup_r+0xd8>)
 80067ac:	429c      	cmp	r4, r3
 80067ae:	bf08      	it	eq
 80067b0:	68ec      	ldreq	r4, [r5, #12]
 80067b2:	e7e6      	b.n	8006782 <__swsetup_r+0x1e>
 80067b4:	0758      	lsls	r0, r3, #29
 80067b6:	d512      	bpl.n	80067de <__swsetup_r+0x7a>
 80067b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ba:	b141      	cbz	r1, 80067ce <__swsetup_r+0x6a>
 80067bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d002      	beq.n	80067ca <__swsetup_r+0x66>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff fc41 	bl	800604c <_free_r>
 80067ca:	2300      	movs	r3, #0
 80067cc:	6363      	str	r3, [r4, #52]	; 0x34
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6063      	str	r3, [r4, #4]
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f043 0308 	orr.w	r3, r3, #8
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	b94b      	cbnz	r3, 80067fe <__swsetup_r+0x9a>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f4:	d003      	beq.n	80067fe <__swsetup_r+0x9a>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 fa09 	bl	8006c10 <__smakebuf_r>
 80067fe:	89a0      	ldrh	r0, [r4, #12]
 8006800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006804:	f010 0301 	ands.w	r3, r0, #1
 8006808:	d00a      	beq.n	8006820 <__swsetup_r+0xbc>
 800680a:	2300      	movs	r3, #0
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	6963      	ldr	r3, [r4, #20]
 8006810:	425b      	negs	r3, r3
 8006812:	61a3      	str	r3, [r4, #24]
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	b943      	cbnz	r3, 800682a <__swsetup_r+0xc6>
 8006818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800681c:	d1ba      	bne.n	8006794 <__swsetup_r+0x30>
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	0781      	lsls	r1, r0, #30
 8006822:	bf58      	it	pl
 8006824:	6963      	ldrpl	r3, [r4, #20]
 8006826:	60a3      	str	r3, [r4, #8]
 8006828:	e7f4      	b.n	8006814 <__swsetup_r+0xb0>
 800682a:	2000      	movs	r0, #0
 800682c:	e7f7      	b.n	800681e <__swsetup_r+0xba>
 800682e:	bf00      	nop
 8006830:	2000000c 	.word	0x2000000c
 8006834:	080072cc 	.word	0x080072cc
 8006838:	080072ec 	.word	0x080072ec
 800683c:	080072ac 	.word	0x080072ac

08006840 <abort>:
 8006840:	b508      	push	{r3, lr}
 8006842:	2006      	movs	r0, #6
 8006844:	f000 fa4c 	bl	8006ce0 <raise>
 8006848:	2001      	movs	r0, #1
 800684a:	f7fb fb4d 	bl	8001ee8 <_exit>
	...

08006850 <__sflush_r>:
 8006850:	898a      	ldrh	r2, [r1, #12]
 8006852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	4605      	mov	r5, r0
 8006858:	0710      	lsls	r0, r2, #28
 800685a:	460c      	mov	r4, r1
 800685c:	d458      	bmi.n	8006910 <__sflush_r+0xc0>
 800685e:	684b      	ldr	r3, [r1, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	dc05      	bgt.n	8006870 <__sflush_r+0x20>
 8006864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	dc02      	bgt.n	8006870 <__sflush_r+0x20>
 800686a:	2000      	movs	r0, #0
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006872:	2e00      	cmp	r6, #0
 8006874:	d0f9      	beq.n	800686a <__sflush_r+0x1a>
 8006876:	2300      	movs	r3, #0
 8006878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800687c:	682f      	ldr	r7, [r5, #0]
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	d032      	beq.n	80068e8 <__sflush_r+0x98>
 8006882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	075a      	lsls	r2, r3, #29
 8006888:	d505      	bpl.n	8006896 <__sflush_r+0x46>
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	1ac0      	subs	r0, r0, r3
 800688e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006890:	b10b      	cbz	r3, 8006896 <__sflush_r+0x46>
 8006892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006894:	1ac0      	subs	r0, r0, r3
 8006896:	2300      	movs	r3, #0
 8006898:	4602      	mov	r2, r0
 800689a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800689c:	6a21      	ldr	r1, [r4, #32]
 800689e:	4628      	mov	r0, r5
 80068a0:	47b0      	blx	r6
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	d106      	bne.n	80068b6 <__sflush_r+0x66>
 80068a8:	6829      	ldr	r1, [r5, #0]
 80068aa:	291d      	cmp	r1, #29
 80068ac:	d82c      	bhi.n	8006908 <__sflush_r+0xb8>
 80068ae:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <__sflush_r+0x108>)
 80068b0:	40ca      	lsrs	r2, r1
 80068b2:	07d6      	lsls	r6, r2, #31
 80068b4:	d528      	bpl.n	8006908 <__sflush_r+0xb8>
 80068b6:	2200      	movs	r2, #0
 80068b8:	6062      	str	r2, [r4, #4]
 80068ba:	04d9      	lsls	r1, r3, #19
 80068bc:	6922      	ldr	r2, [r4, #16]
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	d504      	bpl.n	80068cc <__sflush_r+0x7c>
 80068c2:	1c42      	adds	r2, r0, #1
 80068c4:	d101      	bne.n	80068ca <__sflush_r+0x7a>
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	b903      	cbnz	r3, 80068cc <__sflush_r+0x7c>
 80068ca:	6560      	str	r0, [r4, #84]	; 0x54
 80068cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ce:	602f      	str	r7, [r5, #0]
 80068d0:	2900      	cmp	r1, #0
 80068d2:	d0ca      	beq.n	800686a <__sflush_r+0x1a>
 80068d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068d8:	4299      	cmp	r1, r3
 80068da:	d002      	beq.n	80068e2 <__sflush_r+0x92>
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff fbb5 	bl	800604c <_free_r>
 80068e2:	2000      	movs	r0, #0
 80068e4:	6360      	str	r0, [r4, #52]	; 0x34
 80068e6:	e7c1      	b.n	800686c <__sflush_r+0x1c>
 80068e8:	6a21      	ldr	r1, [r4, #32]
 80068ea:	2301      	movs	r3, #1
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b0      	blx	r6
 80068f0:	1c41      	adds	r1, r0, #1
 80068f2:	d1c7      	bne.n	8006884 <__sflush_r+0x34>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0c4      	beq.n	8006884 <__sflush_r+0x34>
 80068fa:	2b1d      	cmp	r3, #29
 80068fc:	d001      	beq.n	8006902 <__sflush_r+0xb2>
 80068fe:	2b16      	cmp	r3, #22
 8006900:	d101      	bne.n	8006906 <__sflush_r+0xb6>
 8006902:	602f      	str	r7, [r5, #0]
 8006904:	e7b1      	b.n	800686a <__sflush_r+0x1a>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	e7ad      	b.n	800686c <__sflush_r+0x1c>
 8006910:	690f      	ldr	r7, [r1, #16]
 8006912:	2f00      	cmp	r7, #0
 8006914:	d0a9      	beq.n	800686a <__sflush_r+0x1a>
 8006916:	0793      	lsls	r3, r2, #30
 8006918:	680e      	ldr	r6, [r1, #0]
 800691a:	bf08      	it	eq
 800691c:	694b      	ldreq	r3, [r1, #20]
 800691e:	600f      	str	r7, [r1, #0]
 8006920:	bf18      	it	ne
 8006922:	2300      	movne	r3, #0
 8006924:	eba6 0807 	sub.w	r8, r6, r7
 8006928:	608b      	str	r3, [r1, #8]
 800692a:	f1b8 0f00 	cmp.w	r8, #0
 800692e:	dd9c      	ble.n	800686a <__sflush_r+0x1a>
 8006930:	6a21      	ldr	r1, [r4, #32]
 8006932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006934:	4643      	mov	r3, r8
 8006936:	463a      	mov	r2, r7
 8006938:	4628      	mov	r0, r5
 800693a:	47b0      	blx	r6
 800693c:	2800      	cmp	r0, #0
 800693e:	dc06      	bgt.n	800694e <__sflush_r+0xfe>
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	e78e      	b.n	800686c <__sflush_r+0x1c>
 800694e:	4407      	add	r7, r0
 8006950:	eba8 0800 	sub.w	r8, r8, r0
 8006954:	e7e9      	b.n	800692a <__sflush_r+0xda>
 8006956:	bf00      	nop
 8006958:	20400001 	.word	0x20400001

0800695c <_fflush_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	690b      	ldr	r3, [r1, #16]
 8006960:	4605      	mov	r5, r0
 8006962:	460c      	mov	r4, r1
 8006964:	b913      	cbnz	r3, 800696c <_fflush_r+0x10>
 8006966:	2500      	movs	r5, #0
 8006968:	4628      	mov	r0, r5
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	b118      	cbz	r0, 8006976 <_fflush_r+0x1a>
 800696e:	6983      	ldr	r3, [r0, #24]
 8006970:	b90b      	cbnz	r3, 8006976 <_fflush_r+0x1a>
 8006972:	f000 f887 	bl	8006a84 <__sinit>
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <_fflush_r+0x6c>)
 8006978:	429c      	cmp	r4, r3
 800697a:	d11b      	bne.n	80069b4 <_fflush_r+0x58>
 800697c:	686c      	ldr	r4, [r5, #4]
 800697e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ef      	beq.n	8006966 <_fflush_r+0xa>
 8006986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006988:	07d0      	lsls	r0, r2, #31
 800698a:	d404      	bmi.n	8006996 <_fflush_r+0x3a>
 800698c:	0599      	lsls	r1, r3, #22
 800698e:	d402      	bmi.n	8006996 <_fflush_r+0x3a>
 8006990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006992:	f000 f915 	bl	8006bc0 <__retarget_lock_acquire_recursive>
 8006996:	4628      	mov	r0, r5
 8006998:	4621      	mov	r1, r4
 800699a:	f7ff ff59 	bl	8006850 <__sflush_r>
 800699e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069a0:	07da      	lsls	r2, r3, #31
 80069a2:	4605      	mov	r5, r0
 80069a4:	d4e0      	bmi.n	8006968 <_fflush_r+0xc>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	059b      	lsls	r3, r3, #22
 80069aa:	d4dd      	bmi.n	8006968 <_fflush_r+0xc>
 80069ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ae:	f000 f908 	bl	8006bc2 <__retarget_lock_release_recursive>
 80069b2:	e7d9      	b.n	8006968 <_fflush_r+0xc>
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <_fflush_r+0x70>)
 80069b6:	429c      	cmp	r4, r3
 80069b8:	d101      	bne.n	80069be <_fflush_r+0x62>
 80069ba:	68ac      	ldr	r4, [r5, #8]
 80069bc:	e7df      	b.n	800697e <_fflush_r+0x22>
 80069be:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <_fflush_r+0x74>)
 80069c0:	429c      	cmp	r4, r3
 80069c2:	bf08      	it	eq
 80069c4:	68ec      	ldreq	r4, [r5, #12]
 80069c6:	e7da      	b.n	800697e <_fflush_r+0x22>
 80069c8:	080072cc 	.word	0x080072cc
 80069cc:	080072ec 	.word	0x080072ec
 80069d0:	080072ac 	.word	0x080072ac

080069d4 <std>:
 80069d4:	2300      	movs	r3, #0
 80069d6:	b510      	push	{r4, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	e9c0 3300 	strd	r3, r3, [r0]
 80069de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	8181      	strh	r1, [r0, #12]
 80069e6:	6643      	str	r3, [r0, #100]	; 0x64
 80069e8:	81c2      	strh	r2, [r0, #14]
 80069ea:	6183      	str	r3, [r0, #24]
 80069ec:	4619      	mov	r1, r3
 80069ee:	2208      	movs	r2, #8
 80069f0:	305c      	adds	r0, #92	; 0x5c
 80069f2:	f7fd fb87 	bl	8004104 <memset>
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <std+0x38>)
 80069f8:	6263      	str	r3, [r4, #36]	; 0x24
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <std+0x3c>)
 80069fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <std+0x40>)
 8006a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x44>)
 8006a04:	6224      	str	r4, [r4, #32]
 8006a06:	6323      	str	r3, [r4, #48]	; 0x30
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006d19 	.word	0x08006d19
 8006a10:	08006d3b 	.word	0x08006d3b
 8006a14:	08006d73 	.word	0x08006d73
 8006a18:	08006d97 	.word	0x08006d97

08006a1c <_cleanup_r>:
 8006a1c:	4901      	ldr	r1, [pc, #4]	; (8006a24 <_cleanup_r+0x8>)
 8006a1e:	f000 b8af 	b.w	8006b80 <_fwalk_reent>
 8006a22:	bf00      	nop
 8006a24:	0800695d 	.word	0x0800695d

08006a28 <__sfmoreglue>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	2268      	movs	r2, #104	; 0x68
 8006a2c:	1e4d      	subs	r5, r1, #1
 8006a2e:	4355      	muls	r5, r2
 8006a30:	460e      	mov	r6, r1
 8006a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a36:	f7ff fa2b 	bl	8005e90 <_malloc_r>
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	b140      	cbz	r0, 8006a50 <__sfmoreglue+0x28>
 8006a3e:	2100      	movs	r1, #0
 8006a40:	e9c0 1600 	strd	r1, r6, [r0]
 8006a44:	300c      	adds	r0, #12
 8006a46:	60a0      	str	r0, [r4, #8]
 8006a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a4c:	f7fd fb5a 	bl	8004104 <memset>
 8006a50:	4620      	mov	r0, r4
 8006a52:	bd70      	pop	{r4, r5, r6, pc}

08006a54 <__sfp_lock_acquire>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__sfp_lock_acquire+0x8>)
 8006a56:	f000 b8b3 	b.w	8006bc0 <__retarget_lock_acquire_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	20000389 	.word	0x20000389

08006a60 <__sfp_lock_release>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sfp_lock_release+0x8>)
 8006a62:	f000 b8ae 	b.w	8006bc2 <__retarget_lock_release_recursive>
 8006a66:	bf00      	nop
 8006a68:	20000389 	.word	0x20000389

08006a6c <__sinit_lock_acquire>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__sinit_lock_acquire+0x8>)
 8006a6e:	f000 b8a7 	b.w	8006bc0 <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	2000038a 	.word	0x2000038a

08006a78 <__sinit_lock_release>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__sinit_lock_release+0x8>)
 8006a7a:	f000 b8a2 	b.w	8006bc2 <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	2000038a 	.word	0x2000038a

08006a84 <__sinit>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	4604      	mov	r4, r0
 8006a88:	f7ff fff0 	bl	8006a6c <__sinit_lock_acquire>
 8006a8c:	69a3      	ldr	r3, [r4, #24]
 8006a8e:	b11b      	cbz	r3, 8006a98 <__sinit+0x14>
 8006a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a94:	f7ff bff0 	b.w	8006a78 <__sinit_lock_release>
 8006a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <__sinit+0x68>)
 8006aa0:	4a13      	ldr	r2, [pc, #76]	; (8006af0 <__sinit+0x6c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	bf04      	itt	eq
 8006aaa:	2301      	moveq	r3, #1
 8006aac:	61a3      	streq	r3, [r4, #24]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 f820 	bl	8006af4 <__sfp>
 8006ab4:	6060      	str	r0, [r4, #4]
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f81c 	bl	8006af4 <__sfp>
 8006abc:	60a0      	str	r0, [r4, #8]
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 f818 	bl	8006af4 <__sfp>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	60e0      	str	r0, [r4, #12]
 8006ac8:	2104      	movs	r1, #4
 8006aca:	6860      	ldr	r0, [r4, #4]
 8006acc:	f7ff ff82 	bl	80069d4 <std>
 8006ad0:	68a0      	ldr	r0, [r4, #8]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	2109      	movs	r1, #9
 8006ad6:	f7ff ff7d 	bl	80069d4 <std>
 8006ada:	68e0      	ldr	r0, [r4, #12]
 8006adc:	2202      	movs	r2, #2
 8006ade:	2112      	movs	r1, #18
 8006ae0:	f7ff ff78 	bl	80069d4 <std>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	61a3      	str	r3, [r4, #24]
 8006ae8:	e7d2      	b.n	8006a90 <__sinit+0xc>
 8006aea:	bf00      	nop
 8006aec:	08006ee0 	.word	0x08006ee0
 8006af0:	08006a1d 	.word	0x08006a1d

08006af4 <__sfp>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	4607      	mov	r7, r0
 8006af8:	f7ff ffac 	bl	8006a54 <__sfp_lock_acquire>
 8006afc:	4b1e      	ldr	r3, [pc, #120]	; (8006b78 <__sfp+0x84>)
 8006afe:	681e      	ldr	r6, [r3, #0]
 8006b00:	69b3      	ldr	r3, [r6, #24]
 8006b02:	b913      	cbnz	r3, 8006b0a <__sfp+0x16>
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7ff ffbd 	bl	8006a84 <__sinit>
 8006b0a:	3648      	adds	r6, #72	; 0x48
 8006b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	d503      	bpl.n	8006b1c <__sfp+0x28>
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	b30b      	cbz	r3, 8006b5c <__sfp+0x68>
 8006b18:	6836      	ldr	r6, [r6, #0]
 8006b1a:	e7f7      	b.n	8006b0c <__sfp+0x18>
 8006b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b20:	b9d5      	cbnz	r5, 8006b58 <__sfp+0x64>
 8006b22:	4b16      	ldr	r3, [pc, #88]	; (8006b7c <__sfp+0x88>)
 8006b24:	60e3      	str	r3, [r4, #12]
 8006b26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b2c:	f000 f847 	bl	8006bbe <__retarget_lock_init_recursive>
 8006b30:	f7ff ff96 	bl	8006a60 <__sfp_lock_release>
 8006b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b3c:	6025      	str	r5, [r4, #0]
 8006b3e:	61a5      	str	r5, [r4, #24]
 8006b40:	2208      	movs	r2, #8
 8006b42:	4629      	mov	r1, r5
 8006b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b48:	f7fd fadc 	bl	8004104 <memset>
 8006b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b54:	4620      	mov	r0, r4
 8006b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b58:	3468      	adds	r4, #104	; 0x68
 8006b5a:	e7d9      	b.n	8006b10 <__sfp+0x1c>
 8006b5c:	2104      	movs	r1, #4
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f7ff ff62 	bl	8006a28 <__sfmoreglue>
 8006b64:	4604      	mov	r4, r0
 8006b66:	6030      	str	r0, [r6, #0]
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d1d5      	bne.n	8006b18 <__sfp+0x24>
 8006b6c:	f7ff ff78 	bl	8006a60 <__sfp_lock_release>
 8006b70:	230c      	movs	r3, #12
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	e7ee      	b.n	8006b54 <__sfp+0x60>
 8006b76:	bf00      	nop
 8006b78:	08006ee0 	.word	0x08006ee0
 8006b7c:	ffff0001 	.word	0xffff0001

08006b80 <_fwalk_reent>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	4606      	mov	r6, r0
 8006b86:	4688      	mov	r8, r1
 8006b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b8c:	2700      	movs	r7, #0
 8006b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b92:	f1b9 0901 	subs.w	r9, r9, #1
 8006b96:	d505      	bpl.n	8006ba4 <_fwalk_reent+0x24>
 8006b98:	6824      	ldr	r4, [r4, #0]
 8006b9a:	2c00      	cmp	r4, #0
 8006b9c:	d1f7      	bne.n	8006b8e <_fwalk_reent+0xe>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d907      	bls.n	8006bba <_fwalk_reent+0x3a>
 8006baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	d003      	beq.n	8006bba <_fwalk_reent+0x3a>
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	47c0      	blx	r8
 8006bb8:	4307      	orrs	r7, r0
 8006bba:	3568      	adds	r5, #104	; 0x68
 8006bbc:	e7e9      	b.n	8006b92 <_fwalk_reent+0x12>

08006bbe <__retarget_lock_init_recursive>:
 8006bbe:	4770      	bx	lr

08006bc0 <__retarget_lock_acquire_recursive>:
 8006bc0:	4770      	bx	lr

08006bc2 <__retarget_lock_release_recursive>:
 8006bc2:	4770      	bx	lr

08006bc4 <__swhatbuf_r>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	460e      	mov	r6, r1
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	b096      	sub	sp, #88	; 0x58
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	da08      	bge.n	8006be8 <__swhatbuf_r+0x24>
 8006bd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	061a      	lsls	r2, r3, #24
 8006be0:	d410      	bmi.n	8006c04 <__swhatbuf_r+0x40>
 8006be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be6:	e00e      	b.n	8006c06 <__swhatbuf_r+0x42>
 8006be8:	466a      	mov	r2, sp
 8006bea:	f000 f8fb 	bl	8006de4 <_fstat_r>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	dbf1      	blt.n	8006bd6 <__swhatbuf_r+0x12>
 8006bf2:	9a01      	ldr	r2, [sp, #4]
 8006bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bfc:	425a      	negs	r2, r3
 8006bfe:	415a      	adcs	r2, r3
 8006c00:	602a      	str	r2, [r5, #0]
 8006c02:	e7ee      	b.n	8006be2 <__swhatbuf_r+0x1e>
 8006c04:	2340      	movs	r3, #64	; 0x40
 8006c06:	2000      	movs	r0, #0
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	b016      	add	sp, #88	; 0x58
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c10 <__smakebuf_r>:
 8006c10:	898b      	ldrh	r3, [r1, #12]
 8006c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c14:	079d      	lsls	r5, r3, #30
 8006c16:	4606      	mov	r6, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	d507      	bpl.n	8006c2c <__smakebuf_r+0x1c>
 8006c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	2301      	movs	r3, #1
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	b002      	add	sp, #8
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	ab01      	add	r3, sp, #4
 8006c2e:	466a      	mov	r2, sp
 8006c30:	f7ff ffc8 	bl	8006bc4 <__swhatbuf_r>
 8006c34:	9900      	ldr	r1, [sp, #0]
 8006c36:	4605      	mov	r5, r0
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff f929 	bl	8005e90 <_malloc_r>
 8006c3e:	b948      	cbnz	r0, 8006c54 <__smakebuf_r+0x44>
 8006c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c44:	059a      	lsls	r2, r3, #22
 8006c46:	d4ef      	bmi.n	8006c28 <__smakebuf_r+0x18>
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	e7e3      	b.n	8006c1c <__smakebuf_r+0xc>
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <__smakebuf_r+0x7c>)
 8006c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	6020      	str	r0, [r4, #0]
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	6163      	str	r3, [r4, #20]
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	6120      	str	r0, [r4, #16]
 8006c6a:	b15b      	cbz	r3, 8006c84 <__smakebuf_r+0x74>
 8006c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c70:	4630      	mov	r0, r6
 8006c72:	f000 f8c9 	bl	8006e08 <_isatty_r>
 8006c76:	b128      	cbz	r0, 8006c84 <__smakebuf_r+0x74>
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	81a3      	strh	r3, [r4, #12]
 8006c84:	89a0      	ldrh	r0, [r4, #12]
 8006c86:	4305      	orrs	r5, r0
 8006c88:	81a5      	strh	r5, [r4, #12]
 8006c8a:	e7cd      	b.n	8006c28 <__smakebuf_r+0x18>
 8006c8c:	08006a1d 	.word	0x08006a1d

08006c90 <_raise_r>:
 8006c90:	291f      	cmp	r1, #31
 8006c92:	b538      	push	{r3, r4, r5, lr}
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	d904      	bls.n	8006ca4 <_raise_r+0x14>
 8006c9a:	2316      	movs	r3, #22
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ca6:	b112      	cbz	r2, 8006cae <_raise_r+0x1e>
 8006ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cac:	b94b      	cbnz	r3, 8006cc2 <_raise_r+0x32>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f830 	bl	8006d14 <_getpid_r>
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	4601      	mov	r1, r0
 8006cb8:	4620      	mov	r0, r4
 8006cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cbe:	f000 b817 	b.w	8006cf0 <_kill_r>
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d00a      	beq.n	8006cdc <_raise_r+0x4c>
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	d103      	bne.n	8006cd2 <_raise_r+0x42>
 8006cca:	2316      	movs	r3, #22
 8006ccc:	6003      	str	r3, [r0, #0]
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e7e7      	b.n	8006ca2 <_raise_r+0x12>
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cd8:	4628      	mov	r0, r5
 8006cda:	4798      	blx	r3
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e7e0      	b.n	8006ca2 <_raise_r+0x12>

08006ce0 <raise>:
 8006ce0:	4b02      	ldr	r3, [pc, #8]	; (8006cec <raise+0xc>)
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	f7ff bfd3 	b.w	8006c90 <_raise_r>
 8006cea:	bf00      	nop
 8006cec:	2000000c 	.word	0x2000000c

08006cf0 <_kill_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d07      	ldr	r5, [pc, #28]	; (8006d10 <_kill_r+0x20>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	f7fb f8e3 	bl	8001ec8 <_kill>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d102      	bne.n	8006d0c <_kill_r+0x1c>
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	b103      	cbz	r3, 8006d0c <_kill_r+0x1c>
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000384 	.word	0x20000384

08006d14 <_getpid_r>:
 8006d14:	f7fb b8d0 	b.w	8001eb8 <_getpid>

08006d18 <__sread>:
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d20:	f000 f894 	bl	8006e4c <_read_r>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	bfab      	itete	ge
 8006d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d2c:	181b      	addge	r3, r3, r0
 8006d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d32:	bfac      	ite	ge
 8006d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d36:	81a3      	strhlt	r3, [r4, #12]
 8006d38:	bd10      	pop	{r4, pc}

08006d3a <__swrite>:
 8006d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3e:	461f      	mov	r7, r3
 8006d40:	898b      	ldrh	r3, [r1, #12]
 8006d42:	05db      	lsls	r3, r3, #23
 8006d44:	4605      	mov	r5, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	4616      	mov	r6, r2
 8006d4a:	d505      	bpl.n	8006d58 <__swrite+0x1e>
 8006d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d50:	2302      	movs	r3, #2
 8006d52:	2200      	movs	r2, #0
 8006d54:	f000 f868 	bl	8006e28 <_lseek_r>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	4632      	mov	r2, r6
 8006d66:	463b      	mov	r3, r7
 8006d68:	4628      	mov	r0, r5
 8006d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	f000 b817 	b.w	8006da0 <_write_r>

08006d72 <__sseek>:
 8006d72:	b510      	push	{r4, lr}
 8006d74:	460c      	mov	r4, r1
 8006d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7a:	f000 f855 	bl	8006e28 <_lseek_r>
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	bf15      	itete	ne
 8006d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d8e:	81a3      	strheq	r3, [r4, #12]
 8006d90:	bf18      	it	ne
 8006d92:	81a3      	strhne	r3, [r4, #12]
 8006d94:	bd10      	pop	{r4, pc}

08006d96 <__sclose>:
 8006d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9a:	f000 b813 	b.w	8006dc4 <_close_r>
	...

08006da0 <_write_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d07      	ldr	r5, [pc, #28]	; (8006dc0 <_write_r+0x20>)
 8006da4:	4604      	mov	r4, r0
 8006da6:	4608      	mov	r0, r1
 8006da8:	4611      	mov	r1, r2
 8006daa:	2200      	movs	r2, #0
 8006dac:	602a      	str	r2, [r5, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f7fb f8c1 	bl	8001f36 <_write>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_write_r+0x1e>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_write_r+0x1e>
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	20000384 	.word	0x20000384

08006dc4 <_close_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d06      	ldr	r5, [pc, #24]	; (8006de0 <_close_r+0x1c>)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7fb f8cd 	bl	8001f6e <_close>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_close_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_close_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000384 	.word	0x20000384

08006de4 <_fstat_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d07      	ldr	r5, [pc, #28]	; (8006e04 <_fstat_r+0x20>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	f7fb f8c8 	bl	8001f86 <_fstat>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d102      	bne.n	8006e00 <_fstat_r+0x1c>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	b103      	cbz	r3, 8006e00 <_fstat_r+0x1c>
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
 8006e02:	bf00      	nop
 8006e04:	20000384 	.word	0x20000384

08006e08 <_isatty_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4d06      	ldr	r5, [pc, #24]	; (8006e24 <_isatty_r+0x1c>)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	f7fb f8c7 	bl	8001fa6 <_isatty>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_isatty_r+0x1a>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_isatty_r+0x1a>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20000384 	.word	0x20000384

08006e28 <_lseek_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d07      	ldr	r5, [pc, #28]	; (8006e48 <_lseek_r+0x20>)
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	602a      	str	r2, [r5, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fb f8c0 	bl	8001fbc <_lseek>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_lseek_r+0x1e>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_lseek_r+0x1e>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000384 	.word	0x20000384

08006e4c <_read_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	; (8006e6c <_read_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fb f84e 	bl	8001efc <_read>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_read_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_read_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000384 	.word	0x20000384

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
